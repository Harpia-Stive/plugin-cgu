/*
 * API REST do Portal da Transparência do Governo Federal
 * API de serviços do Portal da Transparência do Governo Federal
 *
 * OpenAPI spec version: 1.0
 * Contact: listaapitransparencia@cgu.gov.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.harpia.stive.service.client.api;

import com.google.gson.reflect.TypeToken;
import com.harpia.stive.domain.model.ViagemDTO;
import com.harpia.stive.service.client.ApiCallback;
import com.harpia.stive.service.client.ApiClient;
import com.harpia.stive.service.client.ApiException;
import com.harpia.stive.service.client.ApiResponse;
import com.harpia.stive.service.client.Configuration;
import com.harpia.stive.service.client.Pair;
import com.harpia.stive.service.client.ProgressRequestBody;
import com.harpia.stive.service.client.ProgressResponseBody;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ViagensAServioApi {
    private ApiClient apiClient;

    public ViagensAServioApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ViagensAServioApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for viagemUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call viagemUsingGETCall(String chaveApiDados, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/viagens/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call viagemUsingGETValidateBeforeCall(String chaveApiDados, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling viagemUsingGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling viagemUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = viagemUsingGETCall(chaveApiDados, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta uma viagem pelo ID
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @return ViagemDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ViagemDTO viagemUsingGET(String chaveApiDados, Integer id) throws ApiException {
        ApiResponse<ViagemDTO> resp = viagemUsingGETWithHttpInfo(chaveApiDados, id);
        return resp.getData();
    }

    /**
     * Consulta uma viagem pelo ID
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @return ApiResponse&lt;ViagemDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ViagemDTO> viagemUsingGETWithHttpInfo(String chaveApiDados, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = viagemUsingGETValidateBeforeCall(chaveApiDados, id, null, null);
        Type localVarReturnType = new TypeToken<ViagemDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta uma viagem pelo ID (asynchronously)
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call viagemUsingGETAsync(String chaveApiDados, Integer id, final ApiCallback<ViagemDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = viagemUsingGETValidateBeforeCall(chaveApiDados, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ViagemDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for viagensPorCpfUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param cpf CPF (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call viagensPorCpfUsingGETCall(String chaveApiDados, String cpf, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/viagens-por-cpf";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cpf != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cpf", cpf));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call viagensPorCpfUsingGETValidateBeforeCall(String chaveApiDados, String cpf, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling viagensPorCpfUsingGET(Async)");
        }
        
        // verify the required parameter 'cpf' is set
        if (cpf == null) {
            throw new ApiException("Missing the required parameter 'cpf' when calling viagensPorCpfUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling viagensPorCpfUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = viagensPorCpfUsingGETCall(chaveApiDados, cpf, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta viagens por CPF
     * Filtros mínimos:  Página (padrão &#x3D; 1);  CPF; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param cpf CPF (required)
     * @param pagina Página consultada (required)
     * @return List&lt;ViagemDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ViagemDTO> viagensPorCpfUsingGET(String chaveApiDados, String cpf, Integer pagina) throws ApiException {
        ApiResponse<List<ViagemDTO>> resp = viagensPorCpfUsingGETWithHttpInfo(chaveApiDados, cpf, pagina);
        return resp.getData();
    }

    /**
     * Consulta viagens por CPF
     * Filtros mínimos:  Página (padrão &#x3D; 1);  CPF; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param cpf CPF (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;ViagemDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ViagemDTO>> viagensPorCpfUsingGETWithHttpInfo(String chaveApiDados, String cpf, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = viagensPorCpfUsingGETValidateBeforeCall(chaveApiDados, cpf, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<ViagemDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta viagens por CPF (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  CPF; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param cpf CPF (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call viagensPorCpfUsingGETAsync(String chaveApiDados, String cpf, Integer pagina, final ApiCallback<List<ViagemDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = viagensPorCpfUsingGETValidateBeforeCall(chaveApiDados, cpf, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ViagemDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for viagensPorPeriodoEOrgaoUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoOrgao &lt;a href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiafiUsingGET&#39; &gt;Código do Órgão (SIAFI)&lt;/a&gt; (required)
     * @param dataIdaAte Data de ida até (DD/MM/AAAA) (required)
     * @param dataIdaDe Data de ida a partir de (DD/MM/AAAA) (required)
     * @param dataRetornoAte Data de retorno até (DD/MM/AAAA) (required)
     * @param dataRetornoDe Data de retorno a partir de (DD/MM/AAAA) (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call viagensPorPeriodoEOrgaoUsingGETCall(String chaveApiDados, String codigoOrgao, String dataIdaAte, String dataIdaDe, String dataRetornoAte, String dataRetornoDe, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/viagens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoOrgao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoOrgao", codigoOrgao));
        if (dataIdaAte != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dataIdaAte", dataIdaAte));
        if (dataIdaDe != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dataIdaDe", dataIdaDe));
        if (dataRetornoAte != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dataRetornoAte", dataRetornoAte));
        if (dataRetornoDe != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dataRetornoDe", dataRetornoDe));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call viagensPorPeriodoEOrgaoUsingGETValidateBeforeCall(String chaveApiDados, String codigoOrgao, String dataIdaAte, String dataIdaDe, String dataRetornoAte, String dataRetornoDe, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling viagensPorPeriodoEOrgaoUsingGET(Async)");
        }
        
        // verify the required parameter 'codigoOrgao' is set
        if (codigoOrgao == null) {
            throw new ApiException("Missing the required parameter 'codigoOrgao' when calling viagensPorPeriodoEOrgaoUsingGET(Async)");
        }
        
        // verify the required parameter 'dataIdaAte' is set
        if (dataIdaAte == null) {
            throw new ApiException("Missing the required parameter 'dataIdaAte' when calling viagensPorPeriodoEOrgaoUsingGET(Async)");
        }
        
        // verify the required parameter 'dataIdaDe' is set
        if (dataIdaDe == null) {
            throw new ApiException("Missing the required parameter 'dataIdaDe' when calling viagensPorPeriodoEOrgaoUsingGET(Async)");
        }
        
        // verify the required parameter 'dataRetornoAte' is set
        if (dataRetornoAte == null) {
            throw new ApiException("Missing the required parameter 'dataRetornoAte' when calling viagensPorPeriodoEOrgaoUsingGET(Async)");
        }
        
        // verify the required parameter 'dataRetornoDe' is set
        if (dataRetornoDe == null) {
            throw new ApiException("Missing the required parameter 'dataRetornoDe' when calling viagensPorPeriodoEOrgaoUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling viagensPorPeriodoEOrgaoUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = viagensPorPeriodoEOrgaoUsingGETCall(chaveApiDados, codigoOrgao, dataIdaAte, dataIdaDe, dataRetornoAte, dataRetornoDe, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta viagens por período
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Período de no máximo 1 mês; Código do Órgão (SIAFI)
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoOrgao &lt;a href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiafiUsingGET&#39; &gt;Código do Órgão (SIAFI)&lt;/a&gt; (required)
     * @param dataIdaAte Data de ida até (DD/MM/AAAA) (required)
     * @param dataIdaDe Data de ida a partir de (DD/MM/AAAA) (required)
     * @param dataRetornoAte Data de retorno até (DD/MM/AAAA) (required)
     * @param dataRetornoDe Data de retorno a partir de (DD/MM/AAAA) (required)
     * @param pagina Página consultada (required)
     * @return List&lt;ViagemDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ViagemDTO> viagensPorPeriodoEOrgaoUsingGET(String chaveApiDados, String codigoOrgao, String dataIdaAte, String dataIdaDe, String dataRetornoAte, String dataRetornoDe, Integer pagina) throws ApiException {
        ApiResponse<List<ViagemDTO>> resp = viagensPorPeriodoEOrgaoUsingGETWithHttpInfo(chaveApiDados, codigoOrgao, dataIdaAte, dataIdaDe, dataRetornoAte, dataRetornoDe, pagina);
        return resp.getData();
    }

    /**
     * Consulta viagens por período
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Período de no máximo 1 mês; Código do Órgão (SIAFI)
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoOrgao &lt;a href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiafiUsingGET&#39; &gt;Código do Órgão (SIAFI)&lt;/a&gt; (required)
     * @param dataIdaAte Data de ida até (DD/MM/AAAA) (required)
     * @param dataIdaDe Data de ida a partir de (DD/MM/AAAA) (required)
     * @param dataRetornoAte Data de retorno até (DD/MM/AAAA) (required)
     * @param dataRetornoDe Data de retorno a partir de (DD/MM/AAAA) (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;ViagemDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ViagemDTO>> viagensPorPeriodoEOrgaoUsingGETWithHttpInfo(String chaveApiDados, String codigoOrgao, String dataIdaAte, String dataIdaDe, String dataRetornoAte, String dataRetornoDe, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = viagensPorPeriodoEOrgaoUsingGETValidateBeforeCall(chaveApiDados, codigoOrgao, dataIdaAte, dataIdaDe, dataRetornoAte, dataRetornoDe, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<ViagemDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta viagens por período (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Período de no máximo 1 mês; Código do Órgão (SIAFI)
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoOrgao &lt;a href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiafiUsingGET&#39; &gt;Código do Órgão (SIAFI)&lt;/a&gt; (required)
     * @param dataIdaAte Data de ida até (DD/MM/AAAA) (required)
     * @param dataIdaDe Data de ida a partir de (DD/MM/AAAA) (required)
     * @param dataRetornoAte Data de retorno até (DD/MM/AAAA) (required)
     * @param dataRetornoDe Data de retorno a partir de (DD/MM/AAAA) (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call viagensPorPeriodoEOrgaoUsingGETAsync(String chaveApiDados, String codigoOrgao, String dataIdaAte, String dataIdaDe, String dataRetornoAte, String dataRetornoDe, Integer pagina, final ApiCallback<List<ViagemDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = viagensPorPeriodoEOrgaoUsingGETValidateBeforeCall(chaveApiDados, codigoOrgao, dataIdaAte, dataIdaDe, dataRetornoAte, dataRetornoDe, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ViagemDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
