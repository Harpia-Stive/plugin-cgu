/*
 * API REST do Portal da Transparência do Governo Federal
 * API de serviços do Portal da Transparência do Governo Federal
 *
 * OpenAPI spec version: 1.0
 * Contact: listaapitransparencia@cgu.gov.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.harpia.stive.service.client.api;

import com.google.gson.reflect.TypeToken;
import com.harpia.stive.domain.model.AuxilioBrasilPagoDTO;
import com.harpia.stive.domain.model.AuxilioEmergencialDTO;
import com.harpia.stive.domain.model.BPCDTO;
import com.harpia.stive.domain.model.BeneficioPorMunicipioDTO;
import com.harpia.stive.domain.model.BolsaFamiliaDTO;
import com.harpia.stive.domain.model.BolsaFamiliaPagoDTO;
import com.harpia.stive.domain.model.NovoBolsaFamiliaPagoDTO;
import com.harpia.stive.domain.model.PetiDTO;
import com.harpia.stive.domain.model.SafraDTO;
import com.harpia.stive.domain.model.SeguroDefesoDTO;
import com.harpia.stive.service.client.ApiCallback;
import com.harpia.stive.service.client.ApiClient;
import com.harpia.stive.service.client.ApiException;
import com.harpia.stive.service.client.ApiResponse;
import com.harpia.stive.service.client.Configuration;
import com.harpia.stive.service.client.Pair;
import com.harpia.stive.service.client.ProgressRequestBody;
import com.harpia.stive.service.client.ProgressResponseBody;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BenefciosApi {
    private ApiClient apiClient;

    public BenefciosApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BenefciosApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for auxilioBrasilPorMunicipioUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call auxilioBrasilPorMunicipioUsingGETCall(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/auxilio-brasil-por-municipio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoIbge != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoIbge", codigoIbge));
        if (mesAno != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mesAno", mesAno));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call auxilioBrasilPorMunicipioUsingGETValidateBeforeCall(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling auxilioBrasilPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'codigoIbge' is set
        if (codigoIbge == null) {
            throw new ApiException("Missing the required parameter 'codigoIbge' when calling auxilioBrasilPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'mesAno' is set
        if (mesAno == null) {
            throw new ApiException("Missing the required parameter 'mesAno' when calling auxilioBrasilPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling auxilioBrasilPorMunicipioUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = auxilioBrasilPorMunicipioUsingGETCall(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta as parcelas do Auxílio Brasil por Município
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return List&lt;BeneficioPorMunicipioDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BeneficioPorMunicipioDTO> auxilioBrasilPorMunicipioUsingGET(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        ApiResponse<List<BeneficioPorMunicipioDTO>> resp = auxilioBrasilPorMunicipioUsingGETWithHttpInfo(chaveApiDados, codigoIbge, mesAno, pagina);
        return resp.getData();
    }

    /**
     * Consulta as parcelas do Auxílio Brasil por Município
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;BeneficioPorMunicipioDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BeneficioPorMunicipioDTO>> auxilioBrasilPorMunicipioUsingGETWithHttpInfo(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = auxilioBrasilPorMunicipioUsingGETValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<BeneficioPorMunicipioDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta as parcelas do Auxílio Brasil por Município (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call auxilioBrasilPorMunicipioUsingGETAsync(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ApiCallback<List<BeneficioPorMunicipioDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = auxilioBrasilPorMunicipioUsingGETValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BeneficioPorMunicipioDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for auxilioBrasilSacadoDosBeneficiariosPorMunicipioUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call auxilioBrasilSacadoDosBeneficiariosPorMunicipioUsingGETCall(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/auxilio-brasil-sacado-beneficiario-por-municipio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoIbge != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoIbge", codigoIbge));
        if (mesAno != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mesAno", mesAno));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call auxilioBrasilSacadoDosBeneficiariosPorMunicipioUsingGETValidateBeforeCall(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling auxilioBrasilSacadoDosBeneficiariosPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'codigoIbge' is set
        if (codigoIbge == null) {
            throw new ApiException("Missing the required parameter 'codigoIbge' when calling auxilioBrasilSacadoDosBeneficiariosPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'mesAno' is set
        if (mesAno == null) {
            throw new ApiException("Missing the required parameter 'mesAno' when calling auxilioBrasilSacadoDosBeneficiariosPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling auxilioBrasilSacadoDosBeneficiariosPorMunicipioUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = auxilioBrasilSacadoDosBeneficiariosPorMunicipioUsingGETCall(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta as parcelas do Auxílio Brasil Sacado dos Beneficiários por Município e Mes/Ano
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return List&lt;AuxilioBrasilPagoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AuxilioBrasilPagoDTO> auxilioBrasilSacadoDosBeneficiariosPorMunicipioUsingGET(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        ApiResponse<List<AuxilioBrasilPagoDTO>> resp = auxilioBrasilSacadoDosBeneficiariosPorMunicipioUsingGETWithHttpInfo(chaveApiDados, codigoIbge, mesAno, pagina);
        return resp.getData();
    }

    /**
     * Consulta as parcelas do Auxílio Brasil Sacado dos Beneficiários por Município e Mes/Ano
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;AuxilioBrasilPagoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AuxilioBrasilPagoDTO>> auxilioBrasilSacadoDosBeneficiariosPorMunicipioUsingGETWithHttpInfo(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = auxilioBrasilSacadoDosBeneficiariosPorMunicipioUsingGETValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<AuxilioBrasilPagoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta as parcelas do Auxílio Brasil Sacado dos Beneficiários por Município e Mes/Ano (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call auxilioBrasilSacadoDosBeneficiariosPorMunicipioUsingGETAsync(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ApiCallback<List<AuxilioBrasilPagoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = auxilioBrasilSacadoDosBeneficiariosPorMunicipioUsingGETValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AuxilioBrasilPagoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for auxilioBrasilSacadoPorNisUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param nis NIS (sem máscara, somente números) (required)
     * @param pagina Página consultada (required)
     * @param anoMesCompetencia Ano e mês de competência (AAAAMM) (optional)
     * @param anoMesReferencia Ano e mês de referência (AAAAMM) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call auxilioBrasilSacadoPorNisUsingGETCall(String chaveApiDados, String nis, Integer pagina, Integer anoMesCompetencia, Integer anoMesReferencia, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/auxilio-brasil-sacado-por-nis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (anoMesCompetencia != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("anoMesCompetencia", anoMesCompetencia));
        if (anoMesReferencia != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("anoMesReferencia", anoMesReferencia));
        if (nis != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nis", nis));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call auxilioBrasilSacadoPorNisUsingGETValidateBeforeCall(String chaveApiDados, String nis, Integer pagina, Integer anoMesCompetencia, Integer anoMesReferencia, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling auxilioBrasilSacadoPorNisUsingGET(Async)");
        }
        
        // verify the required parameter 'nis' is set
        if (nis == null) {
            throw new ApiException("Missing the required parameter 'nis' when calling auxilioBrasilSacadoPorNisUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling auxilioBrasilSacadoPorNisUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = auxilioBrasilSacadoPorNisUsingGETCall(chaveApiDados, nis, pagina, anoMesCompetencia, anoMesReferencia, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta as parcelas disponibilizadas pelo Auxílio Brasil pelo NIS
     * Filtros mínimos:  Página (padrão &#x3D; 1);  NIS; Ano e mês de competência (AAAAMM) ou Ano e mês de referência (AAAAMM); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param nis NIS (sem máscara, somente números) (required)
     * @param pagina Página consultada (required)
     * @param anoMesCompetencia Ano e mês de competência (AAAAMM) (optional)
     * @param anoMesReferencia Ano e mês de referência (AAAAMM) (optional)
     * @return List&lt;AuxilioBrasilPagoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AuxilioBrasilPagoDTO> auxilioBrasilSacadoPorNisUsingGET(String chaveApiDados, String nis, Integer pagina, Integer anoMesCompetencia, Integer anoMesReferencia) throws ApiException {
        ApiResponse<List<AuxilioBrasilPagoDTO>> resp = auxilioBrasilSacadoPorNisUsingGETWithHttpInfo(chaveApiDados, nis, pagina, anoMesCompetencia, anoMesReferencia);
        return resp.getData();
    }

    /**
     * Consulta as parcelas disponibilizadas pelo Auxílio Brasil pelo NIS
     * Filtros mínimos:  Página (padrão &#x3D; 1);  NIS; Ano e mês de competência (AAAAMM) ou Ano e mês de referência (AAAAMM); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param nis NIS (sem máscara, somente números) (required)
     * @param pagina Página consultada (required)
     * @param anoMesCompetencia Ano e mês de competência (AAAAMM) (optional)
     * @param anoMesReferencia Ano e mês de referência (AAAAMM) (optional)
     * @return ApiResponse&lt;List&lt;AuxilioBrasilPagoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AuxilioBrasilPagoDTO>> auxilioBrasilSacadoPorNisUsingGETWithHttpInfo(String chaveApiDados, String nis, Integer pagina, Integer anoMesCompetencia, Integer anoMesReferencia) throws ApiException {
        com.squareup.okhttp.Call call = auxilioBrasilSacadoPorNisUsingGETValidateBeforeCall(chaveApiDados, nis, pagina, anoMesCompetencia, anoMesReferencia, null, null);
        Type localVarReturnType = new TypeToken<List<AuxilioBrasilPagoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta as parcelas disponibilizadas pelo Auxílio Brasil pelo NIS (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  NIS; Ano e mês de competência (AAAAMM) ou Ano e mês de referência (AAAAMM); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param nis NIS (sem máscara, somente números) (required)
     * @param pagina Página consultada (required)
     * @param anoMesCompetencia Ano e mês de competência (AAAAMM) (optional)
     * @param anoMesReferencia Ano e mês de referência (AAAAMM) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call auxilioBrasilSacadoPorNisUsingGETAsync(String chaveApiDados, String nis, Integer pagina, Integer anoMesCompetencia, Integer anoMesReferencia, final ApiCallback<List<AuxilioBrasilPagoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = auxilioBrasilSacadoPorNisUsingGETValidateBeforeCall(chaveApiDados, nis, pagina, anoMesCompetencia, anoMesReferencia, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AuxilioBrasilPagoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for auxilioEmergencialBeneficiarosPorMunicipioUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call auxilioEmergencialBeneficiarosPorMunicipioUsingGETCall(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/auxilio-emergencial-beneficiario-por-municipio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoIbge != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoIbge", codigoIbge));
        if (mesAno != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mesAno", mesAno));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call auxilioEmergencialBeneficiarosPorMunicipioUsingGETValidateBeforeCall(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling auxilioEmergencialBeneficiarosPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'codigoIbge' is set
        if (codigoIbge == null) {
            throw new ApiException("Missing the required parameter 'codigoIbge' when calling auxilioEmergencialBeneficiarosPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'mesAno' is set
        if (mesAno == null) {
            throw new ApiException("Missing the required parameter 'mesAno' when calling auxilioEmergencialBeneficiarosPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling auxilioEmergencialBeneficiarosPorMunicipioUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = auxilioEmergencialBeneficiarosPorMunicipioUsingGETCall(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os registros dos beneficiários por município e mês/ano
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return List&lt;AuxilioEmergencialDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AuxilioEmergencialDTO> auxilioEmergencialBeneficiarosPorMunicipioUsingGET(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        ApiResponse<List<AuxilioEmergencialDTO>> resp = auxilioEmergencialBeneficiarosPorMunicipioUsingGETWithHttpInfo(chaveApiDados, codigoIbge, mesAno, pagina);
        return resp.getData();
    }

    /**
     * Consulta os registros dos beneficiários por município e mês/ano
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;AuxilioEmergencialDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AuxilioEmergencialDTO>> auxilioEmergencialBeneficiarosPorMunicipioUsingGETWithHttpInfo(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = auxilioEmergencialBeneficiarosPorMunicipioUsingGETValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<AuxilioEmergencialDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os registros dos beneficiários por município e mês/ano (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call auxilioEmergencialBeneficiarosPorMunicipioUsingGETAsync(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ApiCallback<List<AuxilioEmergencialDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = auxilioEmergencialBeneficiarosPorMunicipioUsingGETValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AuxilioEmergencialDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for auxilioEmergencialPorMunicipioUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call auxilioEmergencialPorMunicipioUsingGETCall(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/auxilio-emergencial-por-municipio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoIbge != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoIbge", codigoIbge));
        if (mesAno != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mesAno", mesAno));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call auxilioEmergencialPorMunicipioUsingGETValidateBeforeCall(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling auxilioEmergencialPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'codigoIbge' is set
        if (codigoIbge == null) {
            throw new ApiException("Missing the required parameter 'codigoIbge' when calling auxilioEmergencialPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'mesAno' is set
        if (mesAno == null) {
            throw new ApiException("Missing the required parameter 'mesAno' when calling auxilioEmergencialPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling auxilioEmergencialPorMunicipioUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = auxilioEmergencialPorMunicipioUsingGETCall(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os registros de auxílio emergencial por Município
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return List&lt;BeneficioPorMunicipioDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BeneficioPorMunicipioDTO> auxilioEmergencialPorMunicipioUsingGET(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        ApiResponse<List<BeneficioPorMunicipioDTO>> resp = auxilioEmergencialPorMunicipioUsingGETWithHttpInfo(chaveApiDados, codigoIbge, mesAno, pagina);
        return resp.getData();
    }

    /**
     * Consulta os registros de auxílio emergencial por Município
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;BeneficioPorMunicipioDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BeneficioPorMunicipioDTO>> auxilioEmergencialPorMunicipioUsingGETWithHttpInfo(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = auxilioEmergencialPorMunicipioUsingGETValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<BeneficioPorMunicipioDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os registros de auxílio emergencial por Município (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call auxilioEmergencialPorMunicipioUsingGETAsync(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ApiCallback<List<BeneficioPorMunicipioDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = auxilioEmergencialPorMunicipioUsingGETValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BeneficioPorMunicipioDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for auxilioEmergencialPorNisOuCPFUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param codigoBeneficiario CPF/NIS Beneficiário (optional)
     * @param codigoResponsavelFamiliar CPF/NIS Responsável Familiar (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call auxilioEmergencialPorNisOuCPFUsingGETCall(String chaveApiDados, Integer pagina, String codigoBeneficiario, String codigoResponsavelFamiliar, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/auxilio-emergencial-por-cpf-ou-nis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoBeneficiario != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoBeneficiario", codigoBeneficiario));
        if (codigoResponsavelFamiliar != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoResponsavelFamiliar", codigoResponsavelFamiliar));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call auxilioEmergencialPorNisOuCPFUsingGETValidateBeforeCall(String chaveApiDados, Integer pagina, String codigoBeneficiario, String codigoResponsavelFamiliar, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling auxilioEmergencialPorNisOuCPFUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling auxilioEmergencialPorNisOuCPFUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = auxilioEmergencialPorNisOuCPFUsingGETCall(chaveApiDados, pagina, codigoBeneficiario, codigoResponsavelFamiliar, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os registros de auxílio emergencial por CPF/NIS
     * Filtros mínimos:  Página (padrão &#x3D; 1);  CPF / NIS; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param codigoBeneficiario CPF/NIS Beneficiário (optional)
     * @param codigoResponsavelFamiliar CPF/NIS Responsável Familiar (optional)
     * @return List&lt;AuxilioEmergencialDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AuxilioEmergencialDTO> auxilioEmergencialPorNisOuCPFUsingGET(String chaveApiDados, Integer pagina, String codigoBeneficiario, String codigoResponsavelFamiliar) throws ApiException {
        ApiResponse<List<AuxilioEmergencialDTO>> resp = auxilioEmergencialPorNisOuCPFUsingGETWithHttpInfo(chaveApiDados, pagina, codigoBeneficiario, codigoResponsavelFamiliar);
        return resp.getData();
    }

    /**
     * Consulta os registros de auxílio emergencial por CPF/NIS
     * Filtros mínimos:  Página (padrão &#x3D; 1);  CPF / NIS; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param codigoBeneficiario CPF/NIS Beneficiário (optional)
     * @param codigoResponsavelFamiliar CPF/NIS Responsável Familiar (optional)
     * @return ApiResponse&lt;List&lt;AuxilioEmergencialDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AuxilioEmergencialDTO>> auxilioEmergencialPorNisOuCPFUsingGETWithHttpInfo(String chaveApiDados, Integer pagina, String codigoBeneficiario, String codigoResponsavelFamiliar) throws ApiException {
        com.squareup.okhttp.Call call = auxilioEmergencialPorNisOuCPFUsingGETValidateBeforeCall(chaveApiDados, pagina, codigoBeneficiario, codigoResponsavelFamiliar, null, null);
        Type localVarReturnType = new TypeToken<List<AuxilioEmergencialDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os registros de auxílio emergencial por CPF/NIS (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  CPF / NIS; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param codigoBeneficiario CPF/NIS Beneficiário (optional)
     * @param codigoResponsavelFamiliar CPF/NIS Responsável Familiar (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call auxilioEmergencialPorNisOuCPFUsingGETAsync(String chaveApiDados, Integer pagina, String codigoBeneficiario, String codigoResponsavelFamiliar, final ApiCallback<List<AuxilioEmergencialDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = auxilioEmergencialPorNisOuCPFUsingGETValidateBeforeCall(chaveApiDados, pagina, codigoBeneficiario, codigoResponsavelFamiliar, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AuxilioEmergencialDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bolsaFamiliaDisponivelDosBeneficiariosPorMunicipioUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bolsaFamiliaDisponivelDosBeneficiariosPorMunicipioUsingGETCall(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/bolsa-familia-disponivel-beneficiario-por-municipio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoIbge != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoIbge", codigoIbge));
        if (mesAno != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mesAno", mesAno));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bolsaFamiliaDisponivelDosBeneficiariosPorMunicipioUsingGETValidateBeforeCall(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling bolsaFamiliaDisponivelDosBeneficiariosPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'codigoIbge' is set
        if (codigoIbge == null) {
            throw new ApiException("Missing the required parameter 'codigoIbge' when calling bolsaFamiliaDisponivelDosBeneficiariosPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'mesAno' is set
        if (mesAno == null) {
            throw new ApiException("Missing the required parameter 'mesAno' when calling bolsaFamiliaDisponivelDosBeneficiariosPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling bolsaFamiliaDisponivelDosBeneficiariosPorMunicipioUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = bolsaFamiliaDisponivelDosBeneficiariosPorMunicipioUsingGETCall(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta as parcelas do Bolsa Família Disponível dos Beneficiários por Município e Mes/Ano
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return List&lt;BolsaFamiliaDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BolsaFamiliaDTO> bolsaFamiliaDisponivelDosBeneficiariosPorMunicipioUsingGET(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        ApiResponse<List<BolsaFamiliaDTO>> resp = bolsaFamiliaDisponivelDosBeneficiariosPorMunicipioUsingGETWithHttpInfo(chaveApiDados, codigoIbge, mesAno, pagina);
        return resp.getData();
    }

    /**
     * Consulta as parcelas do Bolsa Família Disponível dos Beneficiários por Município e Mes/Ano
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;BolsaFamiliaDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BolsaFamiliaDTO>> bolsaFamiliaDisponivelDosBeneficiariosPorMunicipioUsingGETWithHttpInfo(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = bolsaFamiliaDisponivelDosBeneficiariosPorMunicipioUsingGETValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<BolsaFamiliaDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta as parcelas do Bolsa Família Disponível dos Beneficiários por Município e Mes/Ano (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bolsaFamiliaDisponivelDosBeneficiariosPorMunicipioUsingGETAsync(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ApiCallback<List<BolsaFamiliaDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bolsaFamiliaDisponivelDosBeneficiariosPorMunicipioUsingGETValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BolsaFamiliaDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bolsaFamiliaDisponivelPorCpfOuNisUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigo CPF/NIS (sem máscara, somente números) (required)
     * @param pagina Página consultada (required)
     * @param anoMesCompetencia Ano e mês de competência (AAAAMM) (optional)
     * @param anoMesReferencia Ano e mês de referência (AAAAMM) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bolsaFamiliaDisponivelPorCpfOuNisUsingGETCall(String chaveApiDados, String codigo, Integer pagina, Integer anoMesCompetencia, Integer anoMesReferencia, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/bolsa-familia-disponivel-por-cpf-ou-nis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (anoMesCompetencia != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("anoMesCompetencia", anoMesCompetencia));
        if (anoMesReferencia != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("anoMesReferencia", anoMesReferencia));
        if (codigo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigo", codigo));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bolsaFamiliaDisponivelPorCpfOuNisUsingGETValidateBeforeCall(String chaveApiDados, String codigo, Integer pagina, Integer anoMesCompetencia, Integer anoMesReferencia, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling bolsaFamiliaDisponivelPorCpfOuNisUsingGET(Async)");
        }
        
        // verify the required parameter 'codigo' is set
        if (codigo == null) {
            throw new ApiException("Missing the required parameter 'codigo' when calling bolsaFamiliaDisponivelPorCpfOuNisUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling bolsaFamiliaDisponivelPorCpfOuNisUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = bolsaFamiliaDisponivelPorCpfOuNisUsingGETCall(chaveApiDados, codigo, pagina, anoMesCompetencia, anoMesReferencia, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta as parcelas disponibilizadas pelo Bolsa Família pelo CPF/NIS
     * Filtros mínimos:  Página (padrão &#x3D; 1);  CPF / NIS;  Ano e mês de competência (AAAAMM) ou Ano e mês de referência (AAAAMM); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigo CPF/NIS (sem máscara, somente números) (required)
     * @param pagina Página consultada (required)
     * @param anoMesCompetencia Ano e mês de competência (AAAAMM) (optional)
     * @param anoMesReferencia Ano e mês de referência (AAAAMM) (optional)
     * @return List&lt;BolsaFamiliaDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BolsaFamiliaDTO> bolsaFamiliaDisponivelPorCpfOuNisUsingGET(String chaveApiDados, String codigo, Integer pagina, Integer anoMesCompetencia, Integer anoMesReferencia) throws ApiException {
        ApiResponse<List<BolsaFamiliaDTO>> resp = bolsaFamiliaDisponivelPorCpfOuNisUsingGETWithHttpInfo(chaveApiDados, codigo, pagina, anoMesCompetencia, anoMesReferencia);
        return resp.getData();
    }

    /**
     * Consulta as parcelas disponibilizadas pelo Bolsa Família pelo CPF/NIS
     * Filtros mínimos:  Página (padrão &#x3D; 1);  CPF / NIS;  Ano e mês de competência (AAAAMM) ou Ano e mês de referência (AAAAMM); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigo CPF/NIS (sem máscara, somente números) (required)
     * @param pagina Página consultada (required)
     * @param anoMesCompetencia Ano e mês de competência (AAAAMM) (optional)
     * @param anoMesReferencia Ano e mês de referência (AAAAMM) (optional)
     * @return ApiResponse&lt;List&lt;BolsaFamiliaDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BolsaFamiliaDTO>> bolsaFamiliaDisponivelPorCpfOuNisUsingGETWithHttpInfo(String chaveApiDados, String codigo, Integer pagina, Integer anoMesCompetencia, Integer anoMesReferencia) throws ApiException {
        com.squareup.okhttp.Call call = bolsaFamiliaDisponivelPorCpfOuNisUsingGETValidateBeforeCall(chaveApiDados, codigo, pagina, anoMesCompetencia, anoMesReferencia, null, null);
        Type localVarReturnType = new TypeToken<List<BolsaFamiliaDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta as parcelas disponibilizadas pelo Bolsa Família pelo CPF/NIS (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  CPF / NIS;  Ano e mês de competência (AAAAMM) ou Ano e mês de referência (AAAAMM); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigo CPF/NIS (sem máscara, somente números) (required)
     * @param pagina Página consultada (required)
     * @param anoMesCompetencia Ano e mês de competência (AAAAMM) (optional)
     * @param anoMesReferencia Ano e mês de referência (AAAAMM) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bolsaFamiliaDisponivelPorCpfOuNisUsingGETAsync(String chaveApiDados, String codigo, Integer pagina, Integer anoMesCompetencia, Integer anoMesReferencia, final ApiCallback<List<BolsaFamiliaDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bolsaFamiliaDisponivelPorCpfOuNisUsingGETValidateBeforeCall(chaveApiDados, codigo, pagina, anoMesCompetencia, anoMesReferencia, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BolsaFamiliaDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bolsaFamiliaPorMunicipioUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bolsaFamiliaPorMunicipioUsingGETCall(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/bolsa-familia-por-municipio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoIbge != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoIbge", codigoIbge));
        if (mesAno != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mesAno", mesAno));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bolsaFamiliaPorMunicipioUsingGETValidateBeforeCall(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling bolsaFamiliaPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'codigoIbge' is set
        if (codigoIbge == null) {
            throw new ApiException("Missing the required parameter 'codigoIbge' when calling bolsaFamiliaPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'mesAno' is set
        if (mesAno == null) {
            throw new ApiException("Missing the required parameter 'mesAno' when calling bolsaFamiliaPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling bolsaFamiliaPorMunicipioUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = bolsaFamiliaPorMunicipioUsingGETCall(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta as parcelas do Bolsa Família por Município
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return List&lt;BeneficioPorMunicipioDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BeneficioPorMunicipioDTO> bolsaFamiliaPorMunicipioUsingGET(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        ApiResponse<List<BeneficioPorMunicipioDTO>> resp = bolsaFamiliaPorMunicipioUsingGETWithHttpInfo(chaveApiDados, codigoIbge, mesAno, pagina);
        return resp.getData();
    }

    /**
     * Consulta as parcelas do Bolsa Família por Município
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;BeneficioPorMunicipioDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BeneficioPorMunicipioDTO>> bolsaFamiliaPorMunicipioUsingGETWithHttpInfo(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = bolsaFamiliaPorMunicipioUsingGETValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<BeneficioPorMunicipioDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta as parcelas do Bolsa Família por Município (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bolsaFamiliaPorMunicipioUsingGETAsync(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ApiCallback<List<BeneficioPorMunicipioDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bolsaFamiliaPorMunicipioUsingGETValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BeneficioPorMunicipioDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bolsaFamiliaSacadoDosBeneficiariosPorMunicipioUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bolsaFamiliaSacadoDosBeneficiariosPorMunicipioUsingGETCall(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/bolsa-familia-sacado-beneficiario-por-municipio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoIbge != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoIbge", codigoIbge));
        if (mesAno != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mesAno", mesAno));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bolsaFamiliaSacadoDosBeneficiariosPorMunicipioUsingGETValidateBeforeCall(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling bolsaFamiliaSacadoDosBeneficiariosPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'codigoIbge' is set
        if (codigoIbge == null) {
            throw new ApiException("Missing the required parameter 'codigoIbge' when calling bolsaFamiliaSacadoDosBeneficiariosPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'mesAno' is set
        if (mesAno == null) {
            throw new ApiException("Missing the required parameter 'mesAno' when calling bolsaFamiliaSacadoDosBeneficiariosPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling bolsaFamiliaSacadoDosBeneficiariosPorMunicipioUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = bolsaFamiliaSacadoDosBeneficiariosPorMunicipioUsingGETCall(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta as parcelas do Bolsa Família Sacado dos Beneficiários por Município e Mes/Ano
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return List&lt;BolsaFamiliaPagoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BolsaFamiliaPagoDTO> bolsaFamiliaSacadoDosBeneficiariosPorMunicipioUsingGET(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        ApiResponse<List<BolsaFamiliaPagoDTO>> resp = bolsaFamiliaSacadoDosBeneficiariosPorMunicipioUsingGETWithHttpInfo(chaveApiDados, codigoIbge, mesAno, pagina);
        return resp.getData();
    }

    /**
     * Consulta as parcelas do Bolsa Família Sacado dos Beneficiários por Município e Mes/Ano
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;BolsaFamiliaPagoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BolsaFamiliaPagoDTO>> bolsaFamiliaSacadoDosBeneficiariosPorMunicipioUsingGETWithHttpInfo(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = bolsaFamiliaSacadoDosBeneficiariosPorMunicipioUsingGETValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<BolsaFamiliaPagoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta as parcelas do Bolsa Família Sacado dos Beneficiários por Município e Mes/Ano (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bolsaFamiliaSacadoDosBeneficiariosPorMunicipioUsingGETAsync(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ApiCallback<List<BolsaFamiliaPagoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bolsaFamiliaSacadoDosBeneficiariosPorMunicipioUsingGETValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BolsaFamiliaPagoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bolsaFamiliaSacadoPorNisUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param nis NIS (sem máscara, somente números) (required)
     * @param pagina Página consultada (required)
     * @param anoMesCompetencia Ano e mês de competência (AAAAMM) (optional)
     * @param anoMesReferencia Ano e mês de referência (AAAAMM) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bolsaFamiliaSacadoPorNisUsingGETCall(String chaveApiDados, String nis, Integer pagina, Integer anoMesCompetencia, Integer anoMesReferencia, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/bolsa-familia-sacado-por-nis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (anoMesCompetencia != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("anoMesCompetencia", anoMesCompetencia));
        if (anoMesReferencia != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("anoMesReferencia", anoMesReferencia));
        if (nis != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nis", nis));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bolsaFamiliaSacadoPorNisUsingGETValidateBeforeCall(String chaveApiDados, String nis, Integer pagina, Integer anoMesCompetencia, Integer anoMesReferencia, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling bolsaFamiliaSacadoPorNisUsingGET(Async)");
        }
        
        // verify the required parameter 'nis' is set
        if (nis == null) {
            throw new ApiException("Missing the required parameter 'nis' when calling bolsaFamiliaSacadoPorNisUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling bolsaFamiliaSacadoPorNisUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = bolsaFamiliaSacadoPorNisUsingGETCall(chaveApiDados, nis, pagina, anoMesCompetencia, anoMesReferencia, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta as parcelas sacadas pelo Bolsa Família pelo NIS
     * Filtros mínimos:  Página (padrão &#x3D; 1);  NIS; Ano e mês de competência (AAAAMM) ou Ano e mês de referência (AAAAMM); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param nis NIS (sem máscara, somente números) (required)
     * @param pagina Página consultada (required)
     * @param anoMesCompetencia Ano e mês de competência (AAAAMM) (optional)
     * @param anoMesReferencia Ano e mês de referência (AAAAMM) (optional)
     * @return List&lt;BolsaFamiliaPagoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BolsaFamiliaPagoDTO> bolsaFamiliaSacadoPorNisUsingGET(String chaveApiDados, String nis, Integer pagina, Integer anoMesCompetencia, Integer anoMesReferencia) throws ApiException {
        ApiResponse<List<BolsaFamiliaPagoDTO>> resp = bolsaFamiliaSacadoPorNisUsingGETWithHttpInfo(chaveApiDados, nis, pagina, anoMesCompetencia, anoMesReferencia);
        return resp.getData();
    }

    /**
     * Consulta as parcelas sacadas pelo Bolsa Família pelo NIS
     * Filtros mínimos:  Página (padrão &#x3D; 1);  NIS; Ano e mês de competência (AAAAMM) ou Ano e mês de referência (AAAAMM); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param nis NIS (sem máscara, somente números) (required)
     * @param pagina Página consultada (required)
     * @param anoMesCompetencia Ano e mês de competência (AAAAMM) (optional)
     * @param anoMesReferencia Ano e mês de referência (AAAAMM) (optional)
     * @return ApiResponse&lt;List&lt;BolsaFamiliaPagoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BolsaFamiliaPagoDTO>> bolsaFamiliaSacadoPorNisUsingGETWithHttpInfo(String chaveApiDados, String nis, Integer pagina, Integer anoMesCompetencia, Integer anoMesReferencia) throws ApiException {
        com.squareup.okhttp.Call call = bolsaFamiliaSacadoPorNisUsingGETValidateBeforeCall(chaveApiDados, nis, pagina, anoMesCompetencia, anoMesReferencia, null, null);
        Type localVarReturnType = new TypeToken<List<BolsaFamiliaPagoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta as parcelas sacadas pelo Bolsa Família pelo NIS (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  NIS; Ano e mês de competência (AAAAMM) ou Ano e mês de referência (AAAAMM); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param nis NIS (sem máscara, somente números) (required)
     * @param pagina Página consultada (required)
     * @param anoMesCompetencia Ano e mês de competência (AAAAMM) (optional)
     * @param anoMesReferencia Ano e mês de referência (AAAAMM) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bolsaFamiliaSacadoPorNisUsingGETAsync(String chaveApiDados, String nis, Integer pagina, Integer anoMesCompetencia, Integer anoMesReferencia, final ApiCallback<List<BolsaFamiliaPagoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bolsaFamiliaSacadoPorNisUsingGETValidateBeforeCall(chaveApiDados, nis, pagina, anoMesCompetencia, anoMesReferencia, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BolsaFamiliaPagoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bpcDosBeneficiariosPorMunicipioUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bpcDosBeneficiariosPorMunicipioUsingGETCall(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/bpc-beneficiario-por-municipio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoIbge != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoIbge", codigoIbge));
        if (mesAno != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mesAno", mesAno));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bpcDosBeneficiariosPorMunicipioUsingGETValidateBeforeCall(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling bpcDosBeneficiariosPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'codigoIbge' is set
        if (codigoIbge == null) {
            throw new ApiException("Missing the required parameter 'codigoIbge' when calling bpcDosBeneficiariosPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'mesAno' is set
        if (mesAno == null) {
            throw new ApiException("Missing the required parameter 'mesAno' when calling bpcDosBeneficiariosPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling bpcDosBeneficiariosPorMunicipioUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = bpcDosBeneficiariosPorMunicipioUsingGETCall(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os registros de Benefício de Prestação Continuada dos Beneficiários por Município e Mes/Ano
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return List&lt;BPCDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BPCDTO> bpcDosBeneficiariosPorMunicipioUsingGET(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        ApiResponse<List<BPCDTO>> resp = bpcDosBeneficiariosPorMunicipioUsingGETWithHttpInfo(chaveApiDados, codigoIbge, mesAno, pagina);
        return resp.getData();
    }

    /**
     * Consulta os registros de Benefício de Prestação Continuada dos Beneficiários por Município e Mes/Ano
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;BPCDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BPCDTO>> bpcDosBeneficiariosPorMunicipioUsingGETWithHttpInfo(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = bpcDosBeneficiariosPorMunicipioUsingGETValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<BPCDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os registros de Benefício de Prestação Continuada dos Beneficiários por Município e Mes/Ano (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bpcDosBeneficiariosPorMunicipioUsingGETAsync(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ApiCallback<List<BPCDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bpcDosBeneficiariosPorMunicipioUsingGETValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BPCDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bpcPorNisOuCPFUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigo CPF/NIS (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bpcPorNisOuCPFUsingGETCall(String chaveApiDados, String codigo, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/bpc-por-cpf-ou-nis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigo", codigo));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bpcPorNisOuCPFUsingGETValidateBeforeCall(String chaveApiDados, String codigo, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling bpcPorNisOuCPFUsingGET(Async)");
        }
        
        // verify the required parameter 'codigo' is set
        if (codigo == null) {
            throw new ApiException("Missing the required parameter 'codigo' when calling bpcPorNisOuCPFUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling bpcPorNisOuCPFUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = bpcPorNisOuCPFUsingGETCall(chaveApiDados, codigo, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os registros de Benefício de Prestação Continuada por CPF/NIS
     * Filtros mínimos:  Página (padrão &#x3D; 1);  CPF / NIS; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigo CPF/NIS (required)
     * @param pagina Página consultada (required)
     * @return List&lt;BPCDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BPCDTO> bpcPorNisOuCPFUsingGET(String chaveApiDados, String codigo, Integer pagina) throws ApiException {
        ApiResponse<List<BPCDTO>> resp = bpcPorNisOuCPFUsingGETWithHttpInfo(chaveApiDados, codigo, pagina);
        return resp.getData();
    }

    /**
     * Consulta os registros de Benefício de Prestação Continuada por CPF/NIS
     * Filtros mínimos:  Página (padrão &#x3D; 1);  CPF / NIS; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigo CPF/NIS (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;BPCDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BPCDTO>> bpcPorNisOuCPFUsingGETWithHttpInfo(String chaveApiDados, String codigo, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = bpcPorNisOuCPFUsingGETValidateBeforeCall(chaveApiDados, codigo, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<BPCDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os registros de Benefício de Prestação Continuada por CPF/NIS (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  CPF / NIS; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigo CPF/NIS (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bpcPorNisOuCPFUsingGETAsync(String chaveApiDados, String codigo, Integer pagina, final ApiCallback<List<BPCDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bpcPorNisOuCPFUsingGETValidateBeforeCall(chaveApiDados, codigo, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BPCDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bpcUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bpcUsingGETCall(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/bpc-por-municipio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoIbge != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoIbge", codigoIbge));
        if (mesAno != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mesAno", mesAno));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bpcUsingGETValidateBeforeCall(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling bpcUsingGET(Async)");
        }
        
        // verify the required parameter 'codigoIbge' is set
        if (codigoIbge == null) {
            throw new ApiException("Missing the required parameter 'codigoIbge' when calling bpcUsingGET(Async)");
        }
        
        // verify the required parameter 'mesAno' is set
        if (mesAno == null) {
            throw new ApiException("Missing the required parameter 'mesAno' when calling bpcUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling bpcUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = bpcUsingGETCall(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os registros de Benefício de Prestação Continuada por Município
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return List&lt;BeneficioPorMunicipioDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BeneficioPorMunicipioDTO> bpcUsingGET(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        ApiResponse<List<BeneficioPorMunicipioDTO>> resp = bpcUsingGETWithHttpInfo(chaveApiDados, codigoIbge, mesAno, pagina);
        return resp.getData();
    }

    /**
     * Consulta os registros de Benefício de Prestação Continuada por Município
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;BeneficioPorMunicipioDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BeneficioPorMunicipioDTO>> bpcUsingGETWithHttpInfo(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = bpcUsingGETValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<BeneficioPorMunicipioDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os registros de Benefício de Prestação Continuada por Município (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bpcUsingGETAsync(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ApiCallback<List<BeneficioPorMunicipioDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bpcUsingGETValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BeneficioPorMunicipioDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for novoBolsaFamiliaPorMunicipioUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call novoBolsaFamiliaPorMunicipioUsingGETCall(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/novo-bolsa-familia-por-municipio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoIbge != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoIbge", codigoIbge));
        if (mesAno != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mesAno", mesAno));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call novoBolsaFamiliaPorMunicipioUsingGETValidateBeforeCall(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling novoBolsaFamiliaPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'codigoIbge' is set
        if (codigoIbge == null) {
            throw new ApiException("Missing the required parameter 'codigoIbge' when calling novoBolsaFamiliaPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'mesAno' is set
        if (mesAno == null) {
            throw new ApiException("Missing the required parameter 'mesAno' when calling novoBolsaFamiliaPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling novoBolsaFamiliaPorMunicipioUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = novoBolsaFamiliaPorMunicipioUsingGETCall(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta as parcelas do Novo Bolsa Família por Município
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return List&lt;BeneficioPorMunicipioDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BeneficioPorMunicipioDTO> novoBolsaFamiliaPorMunicipioUsingGET(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        ApiResponse<List<BeneficioPorMunicipioDTO>> resp = novoBolsaFamiliaPorMunicipioUsingGETWithHttpInfo(chaveApiDados, codigoIbge, mesAno, pagina);
        return resp.getData();
    }

    /**
     * Consulta as parcelas do Novo Bolsa Família por Município
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;BeneficioPorMunicipioDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BeneficioPorMunicipioDTO>> novoBolsaFamiliaPorMunicipioUsingGETWithHttpInfo(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = novoBolsaFamiliaPorMunicipioUsingGETValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<BeneficioPorMunicipioDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta as parcelas do Novo Bolsa Família por Município (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call novoBolsaFamiliaPorMunicipioUsingGETAsync(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ApiCallback<List<BeneficioPorMunicipioDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = novoBolsaFamiliaPorMunicipioUsingGETValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BeneficioPorMunicipioDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for novoBolsaFamiliaSacadoDosBeneficiariosPorMunicipioUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call novoBolsaFamiliaSacadoDosBeneficiariosPorMunicipioUsingGETCall(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/novo-bolsa-familia-sacado-beneficiario-por-municipio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoIbge != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoIbge", codigoIbge));
        if (mesAno != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mesAno", mesAno));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call novoBolsaFamiliaSacadoDosBeneficiariosPorMunicipioUsingGETValidateBeforeCall(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling novoBolsaFamiliaSacadoDosBeneficiariosPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'codigoIbge' is set
        if (codigoIbge == null) {
            throw new ApiException("Missing the required parameter 'codigoIbge' when calling novoBolsaFamiliaSacadoDosBeneficiariosPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'mesAno' is set
        if (mesAno == null) {
            throw new ApiException("Missing the required parameter 'mesAno' when calling novoBolsaFamiliaSacadoDosBeneficiariosPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling novoBolsaFamiliaSacadoDosBeneficiariosPorMunicipioUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = novoBolsaFamiliaSacadoDosBeneficiariosPorMunicipioUsingGETCall(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta as parcelas do Novo Bolsa Família Sacado dos Beneficiários por Município e Mes/Ano
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return List&lt;NovoBolsaFamiliaPagoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<NovoBolsaFamiliaPagoDTO> novoBolsaFamiliaSacadoDosBeneficiariosPorMunicipioUsingGET(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        ApiResponse<List<NovoBolsaFamiliaPagoDTO>> resp = novoBolsaFamiliaSacadoDosBeneficiariosPorMunicipioUsingGETWithHttpInfo(chaveApiDados, codigoIbge, mesAno, pagina);
        return resp.getData();
    }

    /**
     * Consulta as parcelas do Novo Bolsa Família Sacado dos Beneficiários por Município e Mes/Ano
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;NovoBolsaFamiliaPagoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<NovoBolsaFamiliaPagoDTO>> novoBolsaFamiliaSacadoDosBeneficiariosPorMunicipioUsingGETWithHttpInfo(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = novoBolsaFamiliaSacadoDosBeneficiariosPorMunicipioUsingGETValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<NovoBolsaFamiliaPagoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta as parcelas do Novo Bolsa Família Sacado dos Beneficiários por Município e Mes/Ano (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call novoBolsaFamiliaSacadoDosBeneficiariosPorMunicipioUsingGETAsync(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ApiCallback<List<NovoBolsaFamiliaPagoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = novoBolsaFamiliaSacadoDosBeneficiariosPorMunicipioUsingGETValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<NovoBolsaFamiliaPagoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for novoBolsaFamiliaSacadoPorNisUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param nis NIS (sem máscara, somente números) (required)
     * @param pagina Página consultada (required)
     * @param anoMesCompetencia Ano e mês de competência (AAAAMM) (optional)
     * @param anoMesReferencia Ano e mês de referência (AAAAMM) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call novoBolsaFamiliaSacadoPorNisUsingGETCall(String chaveApiDados, String nis, Integer pagina, Integer anoMesCompetencia, Integer anoMesReferencia, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/novo-bolsa-familia-sacado-por-nis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (anoMesCompetencia != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("anoMesCompetencia", anoMesCompetencia));
        if (anoMesReferencia != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("anoMesReferencia", anoMesReferencia));
        if (nis != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nis", nis));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call novoBolsaFamiliaSacadoPorNisUsingGETValidateBeforeCall(String chaveApiDados, String nis, Integer pagina, Integer anoMesCompetencia, Integer anoMesReferencia, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling novoBolsaFamiliaSacadoPorNisUsingGET(Async)");
        }
        
        // verify the required parameter 'nis' is set
        if (nis == null) {
            throw new ApiException("Missing the required parameter 'nis' when calling novoBolsaFamiliaSacadoPorNisUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling novoBolsaFamiliaSacadoPorNisUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = novoBolsaFamiliaSacadoPorNisUsingGETCall(chaveApiDados, nis, pagina, anoMesCompetencia, anoMesReferencia, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta as parcelas disponibilizadas pelo Novo Bolsa Família pelo NIS
     * Filtros mínimos:  Página (padrão &#x3D; 1);  NIS; Ano e mês de competência (AAAAMM) ou Ano e mês de referência (AAAAMM); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param nis NIS (sem máscara, somente números) (required)
     * @param pagina Página consultada (required)
     * @param anoMesCompetencia Ano e mês de competência (AAAAMM) (optional)
     * @param anoMesReferencia Ano e mês de referência (AAAAMM) (optional)
     * @return List&lt;NovoBolsaFamiliaPagoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<NovoBolsaFamiliaPagoDTO> novoBolsaFamiliaSacadoPorNisUsingGET(String chaveApiDados, String nis, Integer pagina, Integer anoMesCompetencia, Integer anoMesReferencia) throws ApiException {
        ApiResponse<List<NovoBolsaFamiliaPagoDTO>> resp = novoBolsaFamiliaSacadoPorNisUsingGETWithHttpInfo(chaveApiDados, nis, pagina, anoMesCompetencia, anoMesReferencia);
        return resp.getData();
    }

    /**
     * Consulta as parcelas disponibilizadas pelo Novo Bolsa Família pelo NIS
     * Filtros mínimos:  Página (padrão &#x3D; 1);  NIS; Ano e mês de competência (AAAAMM) ou Ano e mês de referência (AAAAMM); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param nis NIS (sem máscara, somente números) (required)
     * @param pagina Página consultada (required)
     * @param anoMesCompetencia Ano e mês de competência (AAAAMM) (optional)
     * @param anoMesReferencia Ano e mês de referência (AAAAMM) (optional)
     * @return ApiResponse&lt;List&lt;NovoBolsaFamiliaPagoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<NovoBolsaFamiliaPagoDTO>> novoBolsaFamiliaSacadoPorNisUsingGETWithHttpInfo(String chaveApiDados, String nis, Integer pagina, Integer anoMesCompetencia, Integer anoMesReferencia) throws ApiException {
        com.squareup.okhttp.Call call = novoBolsaFamiliaSacadoPorNisUsingGETValidateBeforeCall(chaveApiDados, nis, pagina, anoMesCompetencia, anoMesReferencia, null, null);
        Type localVarReturnType = new TypeToken<List<NovoBolsaFamiliaPagoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta as parcelas disponibilizadas pelo Novo Bolsa Família pelo NIS (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  NIS; Ano e mês de competência (AAAAMM) ou Ano e mês de referência (AAAAMM); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param nis NIS (sem máscara, somente números) (required)
     * @param pagina Página consultada (required)
     * @param anoMesCompetencia Ano e mês de competência (AAAAMM) (optional)
     * @param anoMesReferencia Ano e mês de referência (AAAAMM) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call novoBolsaFamiliaSacadoPorNisUsingGETAsync(String chaveApiDados, String nis, Integer pagina, Integer anoMesCompetencia, Integer anoMesReferencia, final ApiCallback<List<NovoBolsaFamiliaPagoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = novoBolsaFamiliaSacadoPorNisUsingGETValidateBeforeCall(chaveApiDados, nis, pagina, anoMesCompetencia, anoMesReferencia, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<NovoBolsaFamiliaPagoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for petiBeneficiarioPorMunicipioUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call petiBeneficiarioPorMunicipioUsingGETCall(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/peti-beneficiario-por-municipio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoIbge != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoIbge", codigoIbge));
        if (mesAno != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mesAno", mesAno));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call petiBeneficiarioPorMunicipioUsingGETValidateBeforeCall(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling petiBeneficiarioPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'codigoIbge' is set
        if (codigoIbge == null) {
            throw new ApiException("Missing the required parameter 'codigoIbge' when calling petiBeneficiarioPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'mesAno' is set
        if (mesAno == null) {
            throw new ApiException("Missing the required parameter 'mesAno' when calling petiBeneficiarioPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling petiBeneficiarioPorMunicipioUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = petiBeneficiarioPorMunicipioUsingGETCall(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os registros PETI dos beneficiários por município e mês/ano
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return List&lt;PetiDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PetiDTO> petiBeneficiarioPorMunicipioUsingGET(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        ApiResponse<List<PetiDTO>> resp = petiBeneficiarioPorMunicipioUsingGETWithHttpInfo(chaveApiDados, codigoIbge, mesAno, pagina);
        return resp.getData();
    }

    /**
     * Consulta os registros PETI dos beneficiários por município e mês/ano
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;PetiDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PetiDTO>> petiBeneficiarioPorMunicipioUsingGETWithHttpInfo(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = petiBeneficiarioPorMunicipioUsingGETValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<PetiDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os registros PETI dos beneficiários por município e mês/ano (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call petiBeneficiarioPorMunicipioUsingGETAsync(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ApiCallback<List<PetiDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = petiBeneficiarioPorMunicipioUsingGETValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PetiDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for petiUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigo CPF/NIS (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call petiUsingGETCall(String chaveApiDados, String codigo, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/peti-por-cpf-ou-nis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigo", codigo));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call petiUsingGETValidateBeforeCall(String chaveApiDados, String codigo, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling petiUsingGET(Async)");
        }
        
        // verify the required parameter 'codigo' is set
        if (codigo == null) {
            throw new ApiException("Missing the required parameter 'codigo' when calling petiUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling petiUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = petiUsingGETCall(chaveApiDados, codigo, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os registros Programa de Erradicação do Trabalho Infantil por CPF/NIS
     * Filtros mínimos:  Página (padrão &#x3D; 1);  CPF / NIS; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigo CPF/NIS (required)
     * @param pagina Página consultada (required)
     * @return List&lt;PetiDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PetiDTO> petiUsingGET(String chaveApiDados, String codigo, Integer pagina) throws ApiException {
        ApiResponse<List<PetiDTO>> resp = petiUsingGETWithHttpInfo(chaveApiDados, codigo, pagina);
        return resp.getData();
    }

    /**
     * Consulta os registros Programa de Erradicação do Trabalho Infantil por CPF/NIS
     * Filtros mínimos:  Página (padrão &#x3D; 1);  CPF / NIS; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigo CPF/NIS (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;PetiDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PetiDTO>> petiUsingGETWithHttpInfo(String chaveApiDados, String codigo, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = petiUsingGETValidateBeforeCall(chaveApiDados, codigo, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<PetiDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os registros Programa de Erradicação do Trabalho Infantil por CPF/NIS (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  CPF / NIS; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigo CPF/NIS (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call petiUsingGETAsync(String chaveApiDados, String codigo, Integer pagina, final ApiCallback<List<PetiDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = petiUsingGETValidateBeforeCall(chaveApiDados, codigo, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PetiDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for petiUsingGET1
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call petiUsingGET1Call(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/peti-por-municipio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoIbge != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoIbge", codigoIbge));
        if (mesAno != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mesAno", mesAno));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call petiUsingGET1ValidateBeforeCall(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling petiUsingGET1(Async)");
        }
        
        // verify the required parameter 'codigoIbge' is set
        if (codigoIbge == null) {
            throw new ApiException("Missing the required parameter 'codigoIbge' when calling petiUsingGET1(Async)");
        }
        
        // verify the required parameter 'mesAno' is set
        if (mesAno == null) {
            throw new ApiException("Missing the required parameter 'mesAno' when calling petiUsingGET1(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling petiUsingGET1(Async)");
        }
        

        com.squareup.okhttp.Call call = petiUsingGET1Call(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os registros Programa de Erradicação do Trabalho Infantil
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return List&lt;BeneficioPorMunicipioDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BeneficioPorMunicipioDTO> petiUsingGET1(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        ApiResponse<List<BeneficioPorMunicipioDTO>> resp = petiUsingGET1WithHttpInfo(chaveApiDados, codigoIbge, mesAno, pagina);
        return resp.getData();
    }

    /**
     * Consulta os registros Programa de Erradicação do Trabalho Infantil
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;BeneficioPorMunicipioDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BeneficioPorMunicipioDTO>> petiUsingGET1WithHttpInfo(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = petiUsingGET1ValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<BeneficioPorMunicipioDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os registros Programa de Erradicação do Trabalho Infantil (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call petiUsingGET1Async(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ApiCallback<List<BeneficioPorMunicipioDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = petiUsingGET1ValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BeneficioPorMunicipioDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for safraDosBeneficiariosPorMunicipioUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call safraDosBeneficiariosPorMunicipioUsingGETCall(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/safra-beneficiario-por-municipio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoIbge != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoIbge", codigoIbge));
        if (mesAno != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mesAno", mesAno));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call safraDosBeneficiariosPorMunicipioUsingGETValidateBeforeCall(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling safraDosBeneficiariosPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'codigoIbge' is set
        if (codigoIbge == null) {
            throw new ApiException("Missing the required parameter 'codigoIbge' when calling safraDosBeneficiariosPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'mesAno' is set
        if (mesAno == null) {
            throw new ApiException("Missing the required parameter 'mesAno' when calling safraDosBeneficiariosPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling safraDosBeneficiariosPorMunicipioUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = safraDosBeneficiariosPorMunicipioUsingGETCall(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os registros Garantia-Safra dos beneficiários por município e mes/ano
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return List&lt;SafraDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SafraDTO> safraDosBeneficiariosPorMunicipioUsingGET(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        ApiResponse<List<SafraDTO>> resp = safraDosBeneficiariosPorMunicipioUsingGETWithHttpInfo(chaveApiDados, codigoIbge, mesAno, pagina);
        return resp.getData();
    }

    /**
     * Consulta os registros Garantia-Safra dos beneficiários por município e mes/ano
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;SafraDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SafraDTO>> safraDosBeneficiariosPorMunicipioUsingGETWithHttpInfo(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = safraDosBeneficiariosPorMunicipioUsingGETValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<SafraDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os registros Garantia-Safra dos beneficiários por município e mes/ano (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call safraDosBeneficiariosPorMunicipioUsingGETAsync(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ApiCallback<List<SafraDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = safraDosBeneficiariosPorMunicipioUsingGETValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SafraDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for safraPorNisOuCPFUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigo CPF/NIS (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call safraPorNisOuCPFUsingGETCall(String chaveApiDados, String codigo, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/safra-codigo-por-cpf-ou-nis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigo", codigo));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call safraPorNisOuCPFUsingGETValidateBeforeCall(String chaveApiDados, String codigo, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling safraPorNisOuCPFUsingGET(Async)");
        }
        
        // verify the required parameter 'codigo' is set
        if (codigo == null) {
            throw new ApiException("Missing the required parameter 'codigo' when calling safraPorNisOuCPFUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling safraPorNisOuCPFUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = safraPorNisOuCPFUsingGETCall(chaveApiDados, codigo, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os registros Garantia-Safra por CPF/NIS
     * Filtros mínimos:  Página (padrão &#x3D; 1);  CPF / NIS; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigo CPF/NIS (required)
     * @param pagina Página consultada (required)
     * @return List&lt;SafraDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SafraDTO> safraPorNisOuCPFUsingGET(String chaveApiDados, String codigo, Integer pagina) throws ApiException {
        ApiResponse<List<SafraDTO>> resp = safraPorNisOuCPFUsingGETWithHttpInfo(chaveApiDados, codigo, pagina);
        return resp.getData();
    }

    /**
     * Consulta os registros Garantia-Safra por CPF/NIS
     * Filtros mínimos:  Página (padrão &#x3D; 1);  CPF / NIS; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigo CPF/NIS (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;SafraDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SafraDTO>> safraPorNisOuCPFUsingGETWithHttpInfo(String chaveApiDados, String codigo, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = safraPorNisOuCPFUsingGETValidateBeforeCall(chaveApiDados, codigo, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<SafraDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os registros Garantia-Safra por CPF/NIS (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  CPF / NIS; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigo CPF/NIS (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call safraPorNisOuCPFUsingGETAsync(String chaveApiDados, String codigo, Integer pagina, final ApiCallback<List<SafraDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = safraPorNisOuCPFUsingGETValidateBeforeCall(chaveApiDados, codigo, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SafraDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for safraUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call safraUsingGETCall(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/safra-por-municipio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoIbge != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoIbge", codigoIbge));
        if (mesAno != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mesAno", mesAno));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call safraUsingGETValidateBeforeCall(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling safraUsingGET(Async)");
        }
        
        // verify the required parameter 'codigoIbge' is set
        if (codigoIbge == null) {
            throw new ApiException("Missing the required parameter 'codigoIbge' when calling safraUsingGET(Async)");
        }
        
        // verify the required parameter 'mesAno' is set
        if (mesAno == null) {
            throw new ApiException("Missing the required parameter 'mesAno' when calling safraUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling safraUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = safraUsingGETCall(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os registros Garantia-Safra
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return List&lt;BeneficioPorMunicipioDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BeneficioPorMunicipioDTO> safraUsingGET(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        ApiResponse<List<BeneficioPorMunicipioDTO>> resp = safraUsingGETWithHttpInfo(chaveApiDados, codigoIbge, mesAno, pagina);
        return resp.getData();
    }

    /**
     * Consulta os registros Garantia-Safra
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;BeneficioPorMunicipioDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BeneficioPorMunicipioDTO>> safraUsingGETWithHttpInfo(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = safraUsingGETValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<BeneficioPorMunicipioDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os registros Garantia-Safra (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call safraUsingGETAsync(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ApiCallback<List<BeneficioPorMunicipioDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = safraUsingGETValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BeneficioPorMunicipioDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for seguroDefesosDosBeneficiariosPorMunicipioUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call seguroDefesosDosBeneficiariosPorMunicipioUsingGETCall(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/seguro-defeso-beneficiario-por-municipio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoIbge != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoIbge", codigoIbge));
        if (mesAno != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mesAno", mesAno));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call seguroDefesosDosBeneficiariosPorMunicipioUsingGETValidateBeforeCall(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling seguroDefesosDosBeneficiariosPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'codigoIbge' is set
        if (codigoIbge == null) {
            throw new ApiException("Missing the required parameter 'codigoIbge' when calling seguroDefesosDosBeneficiariosPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'mesAno' is set
        if (mesAno == null) {
            throw new ApiException("Missing the required parameter 'mesAno' when calling seguroDefesosDosBeneficiariosPorMunicipioUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling seguroDefesosDosBeneficiariosPorMunicipioUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = seguroDefesosDosBeneficiariosPorMunicipioUsingGETCall(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os registros Seguro Defeso dos Beneficiários por Município e Mes/Ano
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return List&lt;SeguroDefesoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SeguroDefesoDTO> seguroDefesosDosBeneficiariosPorMunicipioUsingGET(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        ApiResponse<List<SeguroDefesoDTO>> resp = seguroDefesosDosBeneficiariosPorMunicipioUsingGETWithHttpInfo(chaveApiDados, codigoIbge, mesAno, pagina);
        return resp.getData();
    }

    /**
     * Consulta os registros Seguro Defeso dos Beneficiários por Município e Mes/Ano
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;SeguroDefesoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SeguroDefesoDTO>> seguroDefesosDosBeneficiariosPorMunicipioUsingGETWithHttpInfo(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = seguroDefesosDosBeneficiariosPorMunicipioUsingGETValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<SeguroDefesoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os registros Seguro Defeso dos Beneficiários por Município e Mes/Ano (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call seguroDefesosDosBeneficiariosPorMunicipioUsingGETAsync(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ApiCallback<List<SeguroDefesoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = seguroDefesosDosBeneficiariosPorMunicipioUsingGETValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SeguroDefesoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for seguroDefesosPorCodigoUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigo CPF/NIS (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call seguroDefesosPorCodigoUsingGETCall(String chaveApiDados, String codigo, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/seguro-defeso-codigo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigo", codigo));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call seguroDefesosPorCodigoUsingGETValidateBeforeCall(String chaveApiDados, String codigo, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling seguroDefesosPorCodigoUsingGET(Async)");
        }
        
        // verify the required parameter 'codigo' is set
        if (codigo == null) {
            throw new ApiException("Missing the required parameter 'codigo' when calling seguroDefesosPorCodigoUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling seguroDefesosPorCodigoUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = seguroDefesosPorCodigoUsingGETCall(chaveApiDados, codigo, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os registros Seguro Defeso por CPF/NIS
     * Filtros mínimos:  Página (padrão &#x3D; 1);  CPF / NIS; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigo CPF/NIS (required)
     * @param pagina Página consultada (required)
     * @return List&lt;SeguroDefesoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SeguroDefesoDTO> seguroDefesosPorCodigoUsingGET(String chaveApiDados, String codigo, Integer pagina) throws ApiException {
        ApiResponse<List<SeguroDefesoDTO>> resp = seguroDefesosPorCodigoUsingGETWithHttpInfo(chaveApiDados, codigo, pagina);
        return resp.getData();
    }

    /**
     * Consulta os registros Seguro Defeso por CPF/NIS
     * Filtros mínimos:  Página (padrão &#x3D; 1);  CPF / NIS; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigo CPF/NIS (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;SeguroDefesoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SeguroDefesoDTO>> seguroDefesosPorCodigoUsingGETWithHttpInfo(String chaveApiDados, String codigo, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = seguroDefesosPorCodigoUsingGETValidateBeforeCall(chaveApiDados, codigo, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<SeguroDefesoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os registros Seguro Defeso por CPF/NIS (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  CPF / NIS; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigo CPF/NIS (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call seguroDefesosPorCodigoUsingGETAsync(String chaveApiDados, String codigo, Integer pagina, final ApiCallback<List<SeguroDefesoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = seguroDefesosPorCodigoUsingGETValidateBeforeCall(chaveApiDados, codigo, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SeguroDefesoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for seguroDefesosUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call seguroDefesosUsingGETCall(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/seguro-defeso-por-municipio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoIbge != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoIbge", codigoIbge));
        if (mesAno != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mesAno", mesAno));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call seguroDefesosUsingGETValidateBeforeCall(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling seguroDefesosUsingGET(Async)");
        }
        
        // verify the required parameter 'codigoIbge' is set
        if (codigoIbge == null) {
            throw new ApiException("Missing the required parameter 'codigoIbge' when calling seguroDefesosUsingGET(Async)");
        }
        
        // verify the required parameter 'mesAno' is set
        if (mesAno == null) {
            throw new ApiException("Missing the required parameter 'mesAno' when calling seguroDefesosUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling seguroDefesosUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = seguroDefesosUsingGETCall(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os registros Seguro Defeso
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return List&lt;BeneficioPorMunicipioDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BeneficioPorMunicipioDTO> seguroDefesosUsingGET(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        ApiResponse<List<BeneficioPorMunicipioDTO>> resp = seguroDefesosUsingGETWithHttpInfo(chaveApiDados, codigoIbge, mesAno, pagina);
        return resp.getData();
    }

    /**
     * Consulta os registros Seguro Defeso
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;BeneficioPorMunicipioDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BeneficioPorMunicipioDTO>> seguroDefesosUsingGETWithHttpInfo(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = seguroDefesosUsingGETValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<BeneficioPorMunicipioDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os registros Seguro Defeso (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano/Mês (YYYYMM); Código IBGE (https://cidades.ibge.gov.br/brasil); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoIbge Código IBGE (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call seguroDefesosUsingGETAsync(String chaveApiDados, String codigoIbge, Integer mesAno, Integer pagina, final ApiCallback<List<BeneficioPorMunicipioDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = seguroDefesosUsingGETValidateBeforeCall(chaveApiDados, codigoIbge, mesAno, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BeneficioPorMunicipioDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
