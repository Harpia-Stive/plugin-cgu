/*
 * API REST do Portal da Transparência do Governo Federal
 * API de serviços do Portal da Transparência do Governo Federal
 *
 * OpenAPI spec version: 1.0
 * Contact: listaapitransparencia@cgu.gov.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.harpia.stive.service.client.api;

import com.google.gson.reflect.TypeToken;
import com.harpia.stive.domain.model.ConsultaFavorecidosFinaisPorDocumentoDTO;
import com.harpia.stive.domain.model.DespesaAnualPorFuncaoESubfuncaoDTO;
import com.harpia.stive.domain.model.DespesaAnualPorOrgaoDTO;
import com.harpia.stive.domain.model.DespesaLiquidaAnualPorFuncaoESubfuncaoDTO;
import com.harpia.stive.domain.model.DespesasPorDocumentoDTO;
import com.harpia.stive.domain.model.DespesasPorPlanoOrcamentarioDTO;
import com.harpia.stive.domain.model.DetalhamentoDoGastoDTO;
import com.harpia.stive.domain.model.DocumentoRelacionadoDTO;
import com.harpia.stive.domain.model.EmpenhoImpactadoBasicoDTO;
import com.harpia.stive.domain.model.HistoricoSubItemEmpenhoDTO;
import com.harpia.stive.domain.model.IdDescricaoDTO;
import com.harpia.stive.domain.model.PessoaRecursosRecebidosUGMesDesnormalizadaDTO;
import com.harpia.stive.service.client.ApiCallback;
import com.harpia.stive.service.client.ApiClient;
import com.harpia.stive.service.client.ApiException;
import com.harpia.stive.service.client.ApiResponse;
import com.harpia.stive.service.client.Configuration;
import com.harpia.stive.service.client.Pair;
import com.harpia.stive.service.client.ProgressRequestBody;
import com.harpia.stive.service.client.ProgressResponseBody;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DespesasPblicasApi {
    private ApiClient apiClient;

    public DespesasPblicasApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DespesasPblicasApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for consultaHistoricoUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoDocumento Código do empenho (Unidade Gestora + Gestão + Número do documento) (required)
     * @param pagina Página consultada (required)
     * @param sequencial Número sequencial do item de empenho (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call consultaHistoricoUsingGETCall(String chaveApiDados, String codigoDocumento, Integer pagina, Integer sequencial, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/despesas/itens-de-empenho/historico";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoDocumento != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoDocumento", codigoDocumento));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));
        if (sequencial != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sequencial", sequencial));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call consultaHistoricoUsingGETValidateBeforeCall(String chaveApiDados, String codigoDocumento, Integer pagina, Integer sequencial, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling consultaHistoricoUsingGET(Async)");
        }
        
        // verify the required parameter 'codigoDocumento' is set
        if (codigoDocumento == null) {
            throw new ApiException("Missing the required parameter 'codigoDocumento' when calling consultaHistoricoUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling consultaHistoricoUsingGET(Async)");
        }
        
        // verify the required parameter 'sequencial' is set
        if (sequencial == null) {
            throw new ApiException("Missing the required parameter 'sequencial' when calling consultaHistoricoUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = consultaHistoricoUsingGETCall(chaveApiDados, codigoDocumento, pagina, sequencial, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta o histórico de um item de empenho
     * 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoDocumento Código do empenho (Unidade Gestora + Gestão + Número do documento) (required)
     * @param pagina Página consultada (required)
     * @param sequencial Número sequencial do item de empenho (required)
     * @return List&lt;HistoricoSubItemEmpenhoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<HistoricoSubItemEmpenhoDTO> consultaHistoricoUsingGET(String chaveApiDados, String codigoDocumento, Integer pagina, Integer sequencial) throws ApiException {
        ApiResponse<List<HistoricoSubItemEmpenhoDTO>> resp = consultaHistoricoUsingGETWithHttpInfo(chaveApiDados, codigoDocumento, pagina, sequencial);
        return resp.getData();
    }

    /**
     * Consulta o histórico de um item de empenho
     * 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoDocumento Código do empenho (Unidade Gestora + Gestão + Número do documento) (required)
     * @param pagina Página consultada (required)
     * @param sequencial Número sequencial do item de empenho (required)
     * @return ApiResponse&lt;List&lt;HistoricoSubItemEmpenhoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<HistoricoSubItemEmpenhoDTO>> consultaHistoricoUsingGETWithHttpInfo(String chaveApiDados, String codigoDocumento, Integer pagina, Integer sequencial) throws ApiException {
        com.squareup.okhttp.Call call = consultaHistoricoUsingGETValidateBeforeCall(chaveApiDados, codigoDocumento, pagina, sequencial, null, null);
        Type localVarReturnType = new TypeToken<List<HistoricoSubItemEmpenhoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta o histórico de um item de empenho (asynchronously)
     * 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoDocumento Código do empenho (Unidade Gestora + Gestão + Número do documento) (required)
     * @param pagina Página consultada (required)
     * @param sequencial Número sequencial do item de empenho (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call consultaHistoricoUsingGETAsync(String chaveApiDados, String codigoDocumento, Integer pagina, Integer sequencial, final ApiCallback<List<HistoricoSubItemEmpenhoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = consultaHistoricoUsingGETValidateBeforeCall(chaveApiDados, codigoDocumento, pagina, sequencial, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<HistoricoSubItemEmpenhoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for despesasPorFuncaoMovimentacaoLiquidaUsingGET1
     * @param ano Ano da despesa (AAAA) (required)
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param acao Ação (código SIAFI) (optional)
     * @param elementoDespesa Elemento Despesa (código SIAFI) (optional)
     * @param funcao Função (código SIAFI) (optional)
     * @param grupoDespesa Grupo Despesa (código SIAFI) (optional)
     * @param idPlanoOrcamentario Id Plano orçamentário (optional)
     * @param modalidadeAplicacao Modalidade de Aplicação (código SIAFI) (optional)
     * @param programa Programa (código SIAFI) (optional)
     * @param subfuncao Subfunção (código SIAFI) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call despesasPorFuncaoMovimentacaoLiquidaUsingGET1Call(Integer ano, String chaveApiDados, Integer pagina, String acao, String elementoDespesa, String funcao, String grupoDespesa, Integer idPlanoOrcamentario, String modalidadeAplicacao, String programa, String subfuncao, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/despesas/por-funcional-programatica/movimentacao-liquida";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (acao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("acao", acao));
        if (ano != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ano", ano));
        if (elementoDespesa != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("elementoDespesa", elementoDespesa));
        if (funcao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("funcao", funcao));
        if (grupoDespesa != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("grupoDespesa", grupoDespesa));
        if (idPlanoOrcamentario != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("idPlanoOrcamentario", idPlanoOrcamentario));
        if (modalidadeAplicacao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modalidadeAplicacao", modalidadeAplicacao));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));
        if (programa != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("programa", programa));
        if (subfuncao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("subfuncao", subfuncao));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call despesasPorFuncaoMovimentacaoLiquidaUsingGET1ValidateBeforeCall(Integer ano, String chaveApiDados, Integer pagina, String acao, String elementoDespesa, String funcao, String grupoDespesa, Integer idPlanoOrcamentario, String modalidadeAplicacao, String programa, String subfuncao, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ano' is set
        if (ano == null) {
            throw new ApiException("Missing the required parameter 'ano' when calling despesasPorFuncaoMovimentacaoLiquidaUsingGET1(Async)");
        }
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling despesasPorFuncaoMovimentacaoLiquidaUsingGET1(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling despesasPorFuncaoMovimentacaoLiquidaUsingGET1(Async)");
        }
        

        com.squareup.okhttp.Call call = despesasPorFuncaoMovimentacaoLiquidaUsingGET1Call(ano, chaveApiDados, pagina, acao, elementoDespesa, funcao, grupoDespesa, idPlanoOrcamentario, modalidadeAplicacao, programa, subfuncao, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta de movimentação líquida anual das despesas do Poder Executivo Federal pela classificação funcional programática
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano do registro;  Ao menos um dos demais filtros; 
     * @param ano Ano da despesa (AAAA) (required)
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param acao Ação (código SIAFI) (optional)
     * @param elementoDespesa Elemento Despesa (código SIAFI) (optional)
     * @param funcao Função (código SIAFI) (optional)
     * @param grupoDespesa Grupo Despesa (código SIAFI) (optional)
     * @param idPlanoOrcamentario Id Plano orçamentário (optional)
     * @param modalidadeAplicacao Modalidade de Aplicação (código SIAFI) (optional)
     * @param programa Programa (código SIAFI) (optional)
     * @param subfuncao Subfunção (código SIAFI) (optional)
     * @return List&lt;DespesaLiquidaAnualPorFuncaoESubfuncaoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DespesaLiquidaAnualPorFuncaoESubfuncaoDTO> despesasPorFuncaoMovimentacaoLiquidaUsingGET1(Integer ano, String chaveApiDados, Integer pagina, String acao, String elementoDespesa, String funcao, String grupoDespesa, Integer idPlanoOrcamentario, String modalidadeAplicacao, String programa, String subfuncao) throws ApiException {
        ApiResponse<List<DespesaLiquidaAnualPorFuncaoESubfuncaoDTO>> resp = despesasPorFuncaoMovimentacaoLiquidaUsingGET1WithHttpInfo(ano, chaveApiDados, pagina, acao, elementoDespesa, funcao, grupoDespesa, idPlanoOrcamentario, modalidadeAplicacao, programa, subfuncao);
        return resp.getData();
    }

    /**
     * Consulta de movimentação líquida anual das despesas do Poder Executivo Federal pela classificação funcional programática
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano do registro;  Ao menos um dos demais filtros; 
     * @param ano Ano da despesa (AAAA) (required)
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param acao Ação (código SIAFI) (optional)
     * @param elementoDespesa Elemento Despesa (código SIAFI) (optional)
     * @param funcao Função (código SIAFI) (optional)
     * @param grupoDespesa Grupo Despesa (código SIAFI) (optional)
     * @param idPlanoOrcamentario Id Plano orçamentário (optional)
     * @param modalidadeAplicacao Modalidade de Aplicação (código SIAFI) (optional)
     * @param programa Programa (código SIAFI) (optional)
     * @param subfuncao Subfunção (código SIAFI) (optional)
     * @return ApiResponse&lt;List&lt;DespesaLiquidaAnualPorFuncaoESubfuncaoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DespesaLiquidaAnualPorFuncaoESubfuncaoDTO>> despesasPorFuncaoMovimentacaoLiquidaUsingGET1WithHttpInfo(Integer ano, String chaveApiDados, Integer pagina, String acao, String elementoDespesa, String funcao, String grupoDespesa, Integer idPlanoOrcamentario, String modalidadeAplicacao, String programa, String subfuncao) throws ApiException {
        com.squareup.okhttp.Call call = despesasPorFuncaoMovimentacaoLiquidaUsingGET1ValidateBeforeCall(ano, chaveApiDados, pagina, acao, elementoDespesa, funcao, grupoDespesa, idPlanoOrcamentario, modalidadeAplicacao, programa, subfuncao, null, null);
        Type localVarReturnType = new TypeToken<List<DespesaLiquidaAnualPorFuncaoESubfuncaoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta de movimentação líquida anual das despesas do Poder Executivo Federal pela classificação funcional programática (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano do registro;  Ao menos um dos demais filtros; 
     * @param ano Ano da despesa (AAAA) (required)
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param acao Ação (código SIAFI) (optional)
     * @param elementoDespesa Elemento Despesa (código SIAFI) (optional)
     * @param funcao Função (código SIAFI) (optional)
     * @param grupoDespesa Grupo Despesa (código SIAFI) (optional)
     * @param idPlanoOrcamentario Id Plano orçamentário (optional)
     * @param modalidadeAplicacao Modalidade de Aplicação (código SIAFI) (optional)
     * @param programa Programa (código SIAFI) (optional)
     * @param subfuncao Subfunção (código SIAFI) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call despesasPorFuncaoMovimentacaoLiquidaUsingGET1Async(Integer ano, String chaveApiDados, Integer pagina, String acao, String elementoDespesa, String funcao, String grupoDespesa, Integer idPlanoOrcamentario, String modalidadeAplicacao, String programa, String subfuncao, final ApiCallback<List<DespesaLiquidaAnualPorFuncaoESubfuncaoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = despesasPorFuncaoMovimentacaoLiquidaUsingGET1ValidateBeforeCall(ano, chaveApiDados, pagina, acao, elementoDespesa, funcao, grupoDespesa, idPlanoOrcamentario, modalidadeAplicacao, programa, subfuncao, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DespesaLiquidaAnualPorFuncaoESubfuncaoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for despesasPorFuncaoUsingGET
     * @param ano Ano da despesa (AAAA) (required)
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param acao Ação (código SIAFI) (optional)
     * @param funcao Função (código SIAFI) (optional)
     * @param programa Programa (código SIAFI) (optional)
     * @param subfuncao Subfunção (código SIAFI) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call despesasPorFuncaoUsingGETCall(Integer ano, String chaveApiDados, Integer pagina, String acao, String funcao, String programa, String subfuncao, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/despesas/por-funcional-programatica";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (acao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("acao", acao));
        if (ano != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ano", ano));
        if (funcao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("funcao", funcao));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));
        if (programa != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("programa", programa));
        if (subfuncao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("subfuncao", subfuncao));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call despesasPorFuncaoUsingGETValidateBeforeCall(Integer ano, String chaveApiDados, Integer pagina, String acao, String funcao, String programa, String subfuncao, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ano' is set
        if (ano == null) {
            throw new ApiException("Missing the required parameter 'ano' when calling despesasPorFuncaoUsingGET(Async)");
        }
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling despesasPorFuncaoUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling despesasPorFuncaoUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = despesasPorFuncaoUsingGETCall(ano, chaveApiDados, pagina, acao, funcao, programa, subfuncao, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta as despesas do Poder Executivo Federal pela classificação funcional programática
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano do registro;  Ao menos um dos demais filtros; 
     * @param ano Ano da despesa (AAAA) (required)
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param acao Ação (código SIAFI) (optional)
     * @param funcao Função (código SIAFI) (optional)
     * @param programa Programa (código SIAFI) (optional)
     * @param subfuncao Subfunção (código SIAFI) (optional)
     * @return List&lt;DespesaAnualPorFuncaoESubfuncaoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DespesaAnualPorFuncaoESubfuncaoDTO> despesasPorFuncaoUsingGET(Integer ano, String chaveApiDados, Integer pagina, String acao, String funcao, String programa, String subfuncao) throws ApiException {
        ApiResponse<List<DespesaAnualPorFuncaoESubfuncaoDTO>> resp = despesasPorFuncaoUsingGETWithHttpInfo(ano, chaveApiDados, pagina, acao, funcao, programa, subfuncao);
        return resp.getData();
    }

    /**
     * Consulta as despesas do Poder Executivo Federal pela classificação funcional programática
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano do registro;  Ao menos um dos demais filtros; 
     * @param ano Ano da despesa (AAAA) (required)
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param acao Ação (código SIAFI) (optional)
     * @param funcao Função (código SIAFI) (optional)
     * @param programa Programa (código SIAFI) (optional)
     * @param subfuncao Subfunção (código SIAFI) (optional)
     * @return ApiResponse&lt;List&lt;DespesaAnualPorFuncaoESubfuncaoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DespesaAnualPorFuncaoESubfuncaoDTO>> despesasPorFuncaoUsingGETWithHttpInfo(Integer ano, String chaveApiDados, Integer pagina, String acao, String funcao, String programa, String subfuncao) throws ApiException {
        com.squareup.okhttp.Call call = despesasPorFuncaoUsingGETValidateBeforeCall(ano, chaveApiDados, pagina, acao, funcao, programa, subfuncao, null, null);
        Type localVarReturnType = new TypeToken<List<DespesaAnualPorFuncaoESubfuncaoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta as despesas do Poder Executivo Federal pela classificação funcional programática (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano do registro;  Ao menos um dos demais filtros; 
     * @param ano Ano da despesa (AAAA) (required)
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param acao Ação (código SIAFI) (optional)
     * @param funcao Função (código SIAFI) (optional)
     * @param programa Programa (código SIAFI) (optional)
     * @param subfuncao Subfunção (código SIAFI) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call despesasPorFuncaoUsingGETAsync(Integer ano, String chaveApiDados, Integer pagina, String acao, String funcao, String programa, String subfuncao, final ApiCallback<List<DespesaAnualPorFuncaoESubfuncaoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = despesasPorFuncaoUsingGETValidateBeforeCall(ano, chaveApiDados, pagina, acao, funcao, programa, subfuncao, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DespesaAnualPorFuncaoESubfuncaoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for despesasPorOrgaoUsingGET
     * @param ano Ano da despesa (AAAA) (required)
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param orgao Órgão/Entidade vinculada (código SIAFI) (optional)
     * @param orgaoSuperior Órgão superior (código SIAFI) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call despesasPorOrgaoUsingGETCall(Integer ano, String chaveApiDados, Integer pagina, String orgao, String orgaoSuperior, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/despesas/por-orgao";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ano != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ano", ano));
        if (orgao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgao", orgao));
        if (orgaoSuperior != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgaoSuperior", orgaoSuperior));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call despesasPorOrgaoUsingGETValidateBeforeCall(Integer ano, String chaveApiDados, Integer pagina, String orgao, String orgaoSuperior, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ano' is set
        if (ano == null) {
            throw new ApiException("Missing the required parameter 'ano' when calling despesasPorOrgaoUsingGET(Async)");
        }
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling despesasPorOrgaoUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling despesasPorOrgaoUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = despesasPorOrgaoUsingGETCall(ano, chaveApiDados, pagina, orgao, orgaoSuperior, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta as despesas dos órgão do Poder Executivo Federal
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano do registro;  Ao menos um dos demais filtros; 
     * @param ano Ano da despesa (AAAA) (required)
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param orgao Órgão/Entidade vinculada (código SIAFI) (optional)
     * @param orgaoSuperior Órgão superior (código SIAFI) (optional)
     * @return List&lt;DespesaAnualPorOrgaoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DespesaAnualPorOrgaoDTO> despesasPorOrgaoUsingGET(Integer ano, String chaveApiDados, Integer pagina, String orgao, String orgaoSuperior) throws ApiException {
        ApiResponse<List<DespesaAnualPorOrgaoDTO>> resp = despesasPorOrgaoUsingGETWithHttpInfo(ano, chaveApiDados, pagina, orgao, orgaoSuperior);
        return resp.getData();
    }

    /**
     * Consulta as despesas dos órgão do Poder Executivo Federal
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano do registro;  Ao menos um dos demais filtros; 
     * @param ano Ano da despesa (AAAA) (required)
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param orgao Órgão/Entidade vinculada (código SIAFI) (optional)
     * @param orgaoSuperior Órgão superior (código SIAFI) (optional)
     * @return ApiResponse&lt;List&lt;DespesaAnualPorOrgaoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DespesaAnualPorOrgaoDTO>> despesasPorOrgaoUsingGETWithHttpInfo(Integer ano, String chaveApiDados, Integer pagina, String orgao, String orgaoSuperior) throws ApiException {
        com.squareup.okhttp.Call call = despesasPorOrgaoUsingGETValidateBeforeCall(ano, chaveApiDados, pagina, orgao, orgaoSuperior, null, null);
        Type localVarReturnType = new TypeToken<List<DespesaAnualPorOrgaoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta as despesas dos órgão do Poder Executivo Federal (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano do registro;  Ao menos um dos demais filtros; 
     * @param ano Ano da despesa (AAAA) (required)
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param orgao Órgão/Entidade vinculada (código SIAFI) (optional)
     * @param orgaoSuperior Órgão superior (código SIAFI) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call despesasPorOrgaoUsingGETAsync(Integer ano, String chaveApiDados, Integer pagina, String orgao, String orgaoSuperior, final ApiCallback<List<DespesaAnualPorOrgaoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = despesasPorOrgaoUsingGETValidateBeforeCall(ano, chaveApiDados, pagina, orgao, orgaoSuperior, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DespesaAnualPorOrgaoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for despesasPorPlanoOrcamentarioUsingGET
     * @param ano Ano (required)
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param codPOIdentfAcompanhamento Identificado de acompanhamento (optional)
     * @param codPlanoOrcamentario Código Plano Orçamentária (optional)
     * @param descPlanoOrcamentario Descrição Plano Orçamentário (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call despesasPorPlanoOrcamentarioUsingGETCall(Integer ano, String chaveApiDados, Integer pagina, String codPOIdentfAcompanhamento, String codPlanoOrcamentario, String descPlanoOrcamentario, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/despesas/plano-orcamentario";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ano != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ano", ano));
        if (codPOIdentfAcompanhamento != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codPOIdentfAcompanhamento", codPOIdentfAcompanhamento));
        if (codPlanoOrcamentario != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codPlanoOrcamentario", codPlanoOrcamentario));
        if (descPlanoOrcamentario != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("descPlanoOrcamentario", descPlanoOrcamentario));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call despesasPorPlanoOrcamentarioUsingGETValidateBeforeCall(Integer ano, String chaveApiDados, Integer pagina, String codPOIdentfAcompanhamento, String codPlanoOrcamentario, String descPlanoOrcamentario, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ano' is set
        if (ano == null) {
            throw new ApiException("Missing the required parameter 'ano' when calling despesasPorPlanoOrcamentarioUsingGET(Async)");
        }
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling despesasPorPlanoOrcamentarioUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling despesasPorPlanoOrcamentarioUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = despesasPorPlanoOrcamentarioUsingGETCall(ano, chaveApiDados, pagina, codPOIdentfAcompanhamento, codPlanoOrcamentario, descPlanoOrcamentario, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta Plano orçamentário
     * 
     * @param ano Ano (required)
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param codPOIdentfAcompanhamento Identificado de acompanhamento (optional)
     * @param codPlanoOrcamentario Código Plano Orçamentária (optional)
     * @param descPlanoOrcamentario Descrição Plano Orçamentário (optional)
     * @return List&lt;DespesasPorPlanoOrcamentarioDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DespesasPorPlanoOrcamentarioDTO> despesasPorPlanoOrcamentarioUsingGET(Integer ano, String chaveApiDados, Integer pagina, String codPOIdentfAcompanhamento, String codPlanoOrcamentario, String descPlanoOrcamentario) throws ApiException {
        ApiResponse<List<DespesasPorPlanoOrcamentarioDTO>> resp = despesasPorPlanoOrcamentarioUsingGETWithHttpInfo(ano, chaveApiDados, pagina, codPOIdentfAcompanhamento, codPlanoOrcamentario, descPlanoOrcamentario);
        return resp.getData();
    }

    /**
     * Consulta Plano orçamentário
     * 
     * @param ano Ano (required)
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param codPOIdentfAcompanhamento Identificado de acompanhamento (optional)
     * @param codPlanoOrcamentario Código Plano Orçamentária (optional)
     * @param descPlanoOrcamentario Descrição Plano Orçamentário (optional)
     * @return ApiResponse&lt;List&lt;DespesasPorPlanoOrcamentarioDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DespesasPorPlanoOrcamentarioDTO>> despesasPorPlanoOrcamentarioUsingGETWithHttpInfo(Integer ano, String chaveApiDados, Integer pagina, String codPOIdentfAcompanhamento, String codPlanoOrcamentario, String descPlanoOrcamentario) throws ApiException {
        com.squareup.okhttp.Call call = despesasPorPlanoOrcamentarioUsingGETValidateBeforeCall(ano, chaveApiDados, pagina, codPOIdentfAcompanhamento, codPlanoOrcamentario, descPlanoOrcamentario, null, null);
        Type localVarReturnType = new TypeToken<List<DespesasPorPlanoOrcamentarioDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta Plano orçamentário (asynchronously)
     * 
     * @param ano Ano (required)
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param codPOIdentfAcompanhamento Identificado de acompanhamento (optional)
     * @param codPlanoOrcamentario Código Plano Orçamentária (optional)
     * @param descPlanoOrcamentario Descrição Plano Orçamentário (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call despesasPorPlanoOrcamentarioUsingGETAsync(Integer ano, String chaveApiDados, Integer pagina, String codPOIdentfAcompanhamento, String codPlanoOrcamentario, String descPlanoOrcamentario, final ApiCallback<List<DespesasPorPlanoOrcamentarioDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = despesasPorPlanoOrcamentarioUsingGETValidateBeforeCall(ano, chaveApiDados, pagina, codPOIdentfAcompanhamento, codPlanoOrcamentario, descPlanoOrcamentario, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DespesasPorPlanoOrcamentarioDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for documentoPorCodigoUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigo Código do registro (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentoPorCodigoUsingGETCall(String chaveApiDados, String codigo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/despesas/documentos/{codigo}"
            .replaceAll("\\{" + "codigo" + "\\}", apiClient.escapeString(codigo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentoPorCodigoUsingGETValidateBeforeCall(String chaveApiDados, String codigo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling documentoPorCodigoUsingGET(Async)");
        }
        
        // verify the required parameter 'codigo' is set
        if (codigo == null) {
            throw new ApiException("Missing the required parameter 'codigo' when calling documentoPorCodigoUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = documentoPorCodigoUsingGETCall(chaveApiDados, codigo, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta um documento pelo código (Unidade Gestora + Gestão + Número do documento)
     * Filtros mínimos: Código do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigo Código do registro (required)
     * @return DespesasPorDocumentoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DespesasPorDocumentoDTO documentoPorCodigoUsingGET(String chaveApiDados, String codigo) throws ApiException {
        ApiResponse<DespesasPorDocumentoDTO> resp = documentoPorCodigoUsingGETWithHttpInfo(chaveApiDados, codigo);
        return resp.getData();
    }

    /**
     * Consulta um documento pelo código (Unidade Gestora + Gestão + Número do documento)
     * Filtros mínimos: Código do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigo Código do registro (required)
     * @return ApiResponse&lt;DespesasPorDocumentoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DespesasPorDocumentoDTO> documentoPorCodigoUsingGETWithHttpInfo(String chaveApiDados, String codigo) throws ApiException {
        com.squareup.okhttp.Call call = documentoPorCodigoUsingGETValidateBeforeCall(chaveApiDados, codigo, null, null);
        Type localVarReturnType = new TypeToken<DespesasPorDocumentoDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta um documento pelo código (Unidade Gestora + Gestão + Número do documento) (asynchronously)
     * Filtros mínimos: Código do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigo Código do registro (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentoPorCodigoUsingGETAsync(String chaveApiDados, String codigo, final ApiCallback<DespesasPorDocumentoDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentoPorCodigoUsingGETValidateBeforeCall(chaveApiDados, codigo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DespesasPorDocumentoDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for documentosPorFavorecidoUsingGET
     * @param ano Ano de emissão do documento (required)
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoPessoa Código do Favorecido (CPF, CNPJ ou código do SIAFI) (required)
     * @param fase Fase da despesa (1 - Empenho, 2 - Liquidação, 3 - Pagamento) (required)
     * @param pagina Página consultada (required)
     * @param gestao Código da gestão do documento (optional)
     * @param ordenacaoResultado Ordenação de Resultado (1 - Valor Ascendente, 2 - Valor Descendente, 3 - Data Ascendente, 4 - Data Descendente) (optional)
     * @param ug Código da unidade gestora emissora do documento (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentosPorFavorecidoUsingGETCall(Integer ano, String chaveApiDados, String codigoPessoa, Integer fase, Integer pagina, String gestao, Integer ordenacaoResultado, String ug, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/despesas/documentos-por-favorecido";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ano != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ano", ano));
        if (codigoPessoa != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoPessoa", codigoPessoa));
        if (fase != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fase", fase));
        if (gestao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("gestao", gestao));
        if (ordenacaoResultado != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ordenacaoResultado", ordenacaoResultado));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));
        if (ug != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ug", ug));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentosPorFavorecidoUsingGETValidateBeforeCall(Integer ano, String chaveApiDados, String codigoPessoa, Integer fase, Integer pagina, String gestao, Integer ordenacaoResultado, String ug, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ano' is set
        if (ano == null) {
            throw new ApiException("Missing the required parameter 'ano' when calling documentosPorFavorecidoUsingGET(Async)");
        }
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling documentosPorFavorecidoUsingGET(Async)");
        }
        
        // verify the required parameter 'codigoPessoa' is set
        if (codigoPessoa == null) {
            throw new ApiException("Missing the required parameter 'codigoPessoa' when calling documentosPorFavorecidoUsingGET(Async)");
        }
        
        // verify the required parameter 'fase' is set
        if (fase == null) {
            throw new ApiException("Missing the required parameter 'fase' when calling documentosPorFavorecidoUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling documentosPorFavorecidoUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = documentosPorFavorecidoUsingGETCall(ano, chaveApiDados, codigoPessoa, fase, pagina, gestao, ordenacaoResultado, ug, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta Empenhos, Liquidações e Pagamentos emitidos para um favorecido
     * A informação favorecidoIntermediario indica se o documento foi emitido para o favorecido ou se ele é apenas um intermediário que recebe o recurso e repassa-o para os favorecidos finais
     * @param ano Ano de emissão do documento (required)
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoPessoa Código do Favorecido (CPF, CNPJ ou código do SIAFI) (required)
     * @param fase Fase da despesa (1 - Empenho, 2 - Liquidação, 3 - Pagamento) (required)
     * @param pagina Página consultada (required)
     * @param gestao Código da gestão do documento (optional)
     * @param ordenacaoResultado Ordenação de Resultado (1 - Valor Ascendente, 2 - Valor Descendente, 3 - Data Ascendente, 4 - Data Descendente) (optional)
     * @param ug Código da unidade gestora emissora do documento (optional)
     * @return List&lt;DespesasPorDocumentoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DespesasPorDocumentoDTO> documentosPorFavorecidoUsingGET(Integer ano, String chaveApiDados, String codigoPessoa, Integer fase, Integer pagina, String gestao, Integer ordenacaoResultado, String ug) throws ApiException {
        ApiResponse<List<DespesasPorDocumentoDTO>> resp = documentosPorFavorecidoUsingGETWithHttpInfo(ano, chaveApiDados, codigoPessoa, fase, pagina, gestao, ordenacaoResultado, ug);
        return resp.getData();
    }

    /**
     * Consulta Empenhos, Liquidações e Pagamentos emitidos para um favorecido
     * A informação favorecidoIntermediario indica se o documento foi emitido para o favorecido ou se ele é apenas um intermediário que recebe o recurso e repassa-o para os favorecidos finais
     * @param ano Ano de emissão do documento (required)
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoPessoa Código do Favorecido (CPF, CNPJ ou código do SIAFI) (required)
     * @param fase Fase da despesa (1 - Empenho, 2 - Liquidação, 3 - Pagamento) (required)
     * @param pagina Página consultada (required)
     * @param gestao Código da gestão do documento (optional)
     * @param ordenacaoResultado Ordenação de Resultado (1 - Valor Ascendente, 2 - Valor Descendente, 3 - Data Ascendente, 4 - Data Descendente) (optional)
     * @param ug Código da unidade gestora emissora do documento (optional)
     * @return ApiResponse&lt;List&lt;DespesasPorDocumentoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DespesasPorDocumentoDTO>> documentosPorFavorecidoUsingGETWithHttpInfo(Integer ano, String chaveApiDados, String codigoPessoa, Integer fase, Integer pagina, String gestao, Integer ordenacaoResultado, String ug) throws ApiException {
        com.squareup.okhttp.Call call = documentosPorFavorecidoUsingGETValidateBeforeCall(ano, chaveApiDados, codigoPessoa, fase, pagina, gestao, ordenacaoResultado, ug, null, null);
        Type localVarReturnType = new TypeToken<List<DespesasPorDocumentoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta Empenhos, Liquidações e Pagamentos emitidos para um favorecido (asynchronously)
     * A informação favorecidoIntermediario indica se o documento foi emitido para o favorecido ou se ele é apenas um intermediário que recebe o recurso e repassa-o para os favorecidos finais
     * @param ano Ano de emissão do documento (required)
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoPessoa Código do Favorecido (CPF, CNPJ ou código do SIAFI) (required)
     * @param fase Fase da despesa (1 - Empenho, 2 - Liquidação, 3 - Pagamento) (required)
     * @param pagina Página consultada (required)
     * @param gestao Código da gestão do documento (optional)
     * @param ordenacaoResultado Ordenação de Resultado (1 - Valor Ascendente, 2 - Valor Descendente, 3 - Data Ascendente, 4 - Data Descendente) (optional)
     * @param ug Código da unidade gestora emissora do documento (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentosPorFavorecidoUsingGETAsync(Integer ano, String chaveApiDados, String codigoPessoa, Integer fase, Integer pagina, String gestao, Integer ordenacaoResultado, String ug, final ApiCallback<List<DespesasPorDocumentoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentosPorFavorecidoUsingGETValidateBeforeCall(ano, chaveApiDados, codigoPessoa, fase, pagina, gestao, ordenacaoResultado, ug, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DespesasPorDocumentoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for documentosRelacionadosUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoDocumento Código do documento (Unidade Gestora + Gestão + Número do documento) (required)
     * @param fase Fase da despesa (1 - Empenho, 2 - Liquidação, 3 - Pagamento) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentosRelacionadosUsingGETCall(String chaveApiDados, String codigoDocumento, Integer fase, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/despesas/documentos-relacionados";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoDocumento != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoDocumento", codigoDocumento));
        if (fase != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fase", fase));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentosRelacionadosUsingGETValidateBeforeCall(String chaveApiDados, String codigoDocumento, Integer fase, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling documentosRelacionadosUsingGET(Async)");
        }
        
        // verify the required parameter 'codigoDocumento' is set
        if (codigoDocumento == null) {
            throw new ApiException("Missing the required parameter 'codigoDocumento' when calling documentosRelacionadosUsingGET(Async)");
        }
        
        // verify the required parameter 'fase' is set
        if (fase == null) {
            throw new ApiException("Missing the required parameter 'fase' when calling documentosRelacionadosUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = documentosRelacionadosUsingGETCall(chaveApiDados, codigoDocumento, fase, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os documentos relacionados a um Empenho, Liquidação ou Pagamento
     * 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoDocumento Código do documento (Unidade Gestora + Gestão + Número do documento) (required)
     * @param fase Fase da despesa (1 - Empenho, 2 - Liquidação, 3 - Pagamento) (required)
     * @return List&lt;DocumentoRelacionadoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DocumentoRelacionadoDTO> documentosRelacionadosUsingGET(String chaveApiDados, String codigoDocumento, Integer fase) throws ApiException {
        ApiResponse<List<DocumentoRelacionadoDTO>> resp = documentosRelacionadosUsingGETWithHttpInfo(chaveApiDados, codigoDocumento, fase);
        return resp.getData();
    }

    /**
     * Consulta os documentos relacionados a um Empenho, Liquidação ou Pagamento
     * 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoDocumento Código do documento (Unidade Gestora + Gestão + Número do documento) (required)
     * @param fase Fase da despesa (1 - Empenho, 2 - Liquidação, 3 - Pagamento) (required)
     * @return ApiResponse&lt;List&lt;DocumentoRelacionadoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DocumentoRelacionadoDTO>> documentosRelacionadosUsingGETWithHttpInfo(String chaveApiDados, String codigoDocumento, Integer fase) throws ApiException {
        com.squareup.okhttp.Call call = documentosRelacionadosUsingGETValidateBeforeCall(chaveApiDados, codigoDocumento, fase, null, null);
        Type localVarReturnType = new TypeToken<List<DocumentoRelacionadoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os documentos relacionados a um Empenho, Liquidação ou Pagamento (asynchronously)
     * 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoDocumento Código do documento (Unidade Gestora + Gestão + Número do documento) (required)
     * @param fase Fase da despesa (1 - Empenho, 2 - Liquidação, 3 - Pagamento) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentosRelacionadosUsingGETAsync(String chaveApiDados, String codigoDocumento, Integer fase, final ApiCallback<List<DocumentoRelacionadoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentosRelacionadosUsingGETValidateBeforeCall(chaveApiDados, codigoDocumento, fase, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DocumentoRelacionadoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for documentosUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param dataEmissao Data de emissão (DD/MM/AAAA) (required)
     * @param fase Fase da despesa (1 - Empenho, 2 - Liquidação, 3 - Pagamento) (required)
     * @param pagina Página consultada (required)
     * @param gestao Gestão (código SIAFI) (optional)
     * @param unidadeGestora Unidade gestora emitente (código SIAFI) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentosUsingGETCall(String chaveApiDados, String dataEmissao, Integer fase, Integer pagina, String gestao, String unidadeGestora, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/despesas/documentos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (dataEmissao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dataEmissao", dataEmissao));
        if (fase != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fase", fase));
        if (gestao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("gestao", gestao));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));
        if (unidadeGestora != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("unidadeGestora", unidadeGestora));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentosUsingGETValidateBeforeCall(String chaveApiDados, String dataEmissao, Integer fase, Integer pagina, String gestao, String unidadeGestora, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling documentosUsingGET(Async)");
        }
        
        // verify the required parameter 'dataEmissao' is set
        if (dataEmissao == null) {
            throw new ApiException("Missing the required parameter 'dataEmissao' when calling documentosUsingGET(Async)");
        }
        
        // verify the required parameter 'fase' is set
        if (fase == null) {
            throw new ApiException("Missing the required parameter 'fase' when calling documentosUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling documentosUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = documentosUsingGETCall(chaveApiDados, dataEmissao, fase, pagina, gestao, unidadeGestora, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta todos os documentos de despesas
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Período de no máximo 1 dia;  Fase da despesa;  Ao menos um dos demais filtros; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param dataEmissao Data de emissão (DD/MM/AAAA) (required)
     * @param fase Fase da despesa (1 - Empenho, 2 - Liquidação, 3 - Pagamento) (required)
     * @param pagina Página consultada (required)
     * @param gestao Gestão (código SIAFI) (optional)
     * @param unidadeGestora Unidade gestora emitente (código SIAFI) (optional)
     * @return List&lt;DespesasPorDocumentoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DespesasPorDocumentoDTO> documentosUsingGET(String chaveApiDados, String dataEmissao, Integer fase, Integer pagina, String gestao, String unidadeGestora) throws ApiException {
        ApiResponse<List<DespesasPorDocumentoDTO>> resp = documentosUsingGETWithHttpInfo(chaveApiDados, dataEmissao, fase, pagina, gestao, unidadeGestora);
        return resp.getData();
    }

    /**
     * Consulta todos os documentos de despesas
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Período de no máximo 1 dia;  Fase da despesa;  Ao menos um dos demais filtros; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param dataEmissao Data de emissão (DD/MM/AAAA) (required)
     * @param fase Fase da despesa (1 - Empenho, 2 - Liquidação, 3 - Pagamento) (required)
     * @param pagina Página consultada (required)
     * @param gestao Gestão (código SIAFI) (optional)
     * @param unidadeGestora Unidade gestora emitente (código SIAFI) (optional)
     * @return ApiResponse&lt;List&lt;DespesasPorDocumentoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DespesasPorDocumentoDTO>> documentosUsingGETWithHttpInfo(String chaveApiDados, String dataEmissao, Integer fase, Integer pagina, String gestao, String unidadeGestora) throws ApiException {
        com.squareup.okhttp.Call call = documentosUsingGETValidateBeforeCall(chaveApiDados, dataEmissao, fase, pagina, gestao, unidadeGestora, null, null);
        Type localVarReturnType = new TypeToken<List<DespesasPorDocumentoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta todos os documentos de despesas (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Período de no máximo 1 dia;  Fase da despesa;  Ao menos um dos demais filtros; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param dataEmissao Data de emissão (DD/MM/AAAA) (required)
     * @param fase Fase da despesa (1 - Empenho, 2 - Liquidação, 3 - Pagamento) (required)
     * @param pagina Página consultada (required)
     * @param gestao Gestão (código SIAFI) (optional)
     * @param unidadeGestora Unidade gestora emitente (código SIAFI) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentosUsingGETAsync(String chaveApiDados, String dataEmissao, Integer fase, Integer pagina, String gestao, String unidadeGestora, final ApiCallback<List<DespesasPorDocumentoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentosUsingGETValidateBeforeCall(chaveApiDados, dataEmissao, fase, pagina, gestao, unidadeGestora, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DespesasPorDocumentoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for empenhosImpactadosUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoDocumento Código do documento (Unidade Gestora + Gestão + Número do documento) (required)
     * @param fase Fase da despesa (2 - Liquidação, 3 - Pagamento) (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call empenhosImpactadosUsingGETCall(String chaveApiDados, String codigoDocumento, Integer fase, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/despesas/empenhos-impactados";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoDocumento != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoDocumento", codigoDocumento));
        if (fase != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fase", fase));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call empenhosImpactadosUsingGETValidateBeforeCall(String chaveApiDados, String codigoDocumento, Integer fase, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling empenhosImpactadosUsingGET(Async)");
        }
        
        // verify the required parameter 'codigoDocumento' is set
        if (codigoDocumento == null) {
            throw new ApiException("Missing the required parameter 'codigoDocumento' when calling empenhosImpactadosUsingGET(Async)");
        }
        
        // verify the required parameter 'fase' is set
        if (fase == null) {
            throw new ApiException("Missing the required parameter 'fase' when calling empenhosImpactadosUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling empenhosImpactadosUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = empenhosImpactadosUsingGETCall(chaveApiDados, codigoDocumento, fase, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta empenhos impactados por documento/fase
     * Filtros mínimos: Código do registro e fase da despesa (liquidação ou pagamento somente)
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoDocumento Código do documento (Unidade Gestora + Gestão + Número do documento) (required)
     * @param fase Fase da despesa (2 - Liquidação, 3 - Pagamento) (required)
     * @param pagina Página consultada (required)
     * @return List&lt;EmpenhoImpactadoBasicoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EmpenhoImpactadoBasicoDTO> empenhosImpactadosUsingGET(String chaveApiDados, String codigoDocumento, Integer fase, Integer pagina) throws ApiException {
        ApiResponse<List<EmpenhoImpactadoBasicoDTO>> resp = empenhosImpactadosUsingGETWithHttpInfo(chaveApiDados, codigoDocumento, fase, pagina);
        return resp.getData();
    }

    /**
     * Consulta empenhos impactados por documento/fase
     * Filtros mínimos: Código do registro e fase da despesa (liquidação ou pagamento somente)
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoDocumento Código do documento (Unidade Gestora + Gestão + Número do documento) (required)
     * @param fase Fase da despesa (2 - Liquidação, 3 - Pagamento) (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;EmpenhoImpactadoBasicoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EmpenhoImpactadoBasicoDTO>> empenhosImpactadosUsingGETWithHttpInfo(String chaveApiDados, String codigoDocumento, Integer fase, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = empenhosImpactadosUsingGETValidateBeforeCall(chaveApiDados, codigoDocumento, fase, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<EmpenhoImpactadoBasicoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta empenhos impactados por documento/fase (asynchronously)
     * Filtros mínimos: Código do registro e fase da despesa (liquidação ou pagamento somente)
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoDocumento Código do documento (Unidade Gestora + Gestão + Número do documento) (required)
     * @param fase Fase da despesa (2 - Liquidação, 3 - Pagamento) (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call empenhosImpactadosUsingGETAsync(String chaveApiDados, String codigoDocumento, Integer fase, Integer pagina, final ApiCallback<List<EmpenhoImpactadoBasicoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = empenhosImpactadosUsingGETValidateBeforeCall(chaveApiDados, codigoDocumento, fase, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EmpenhoImpactadoBasicoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for favorecidosFinaisPorDocumentoUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoDocumento Código do documento (Unidade Gestora + Gestão + Número do documento) (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call favorecidosFinaisPorDocumentoUsingGETCall(String chaveApiDados, String codigoDocumento, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/despesas/favorecidos-finais-por-documento";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoDocumento != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoDocumento", codigoDocumento));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call favorecidosFinaisPorDocumentoUsingGETValidateBeforeCall(String chaveApiDados, String codigoDocumento, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling favorecidosFinaisPorDocumentoUsingGET(Async)");
        }
        
        // verify the required parameter 'codigoDocumento' is set
        if (codigoDocumento == null) {
            throw new ApiException("Missing the required parameter 'codigoDocumento' when calling favorecidosFinaisPorDocumentoUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling favorecidosFinaisPorDocumentoUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = favorecidosFinaisPorDocumentoUsingGETCall(chaveApiDados, codigoDocumento, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta favorecidos finais por documento
     * Filtros mínimos: Código do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoDocumento Código do documento (Unidade Gestora + Gestão + Número do documento) (required)
     * @param pagina Página consultada (required)
     * @return List&lt;ConsultaFavorecidosFinaisPorDocumentoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ConsultaFavorecidosFinaisPorDocumentoDTO> favorecidosFinaisPorDocumentoUsingGET(String chaveApiDados, String codigoDocumento, Integer pagina) throws ApiException {
        ApiResponse<List<ConsultaFavorecidosFinaisPorDocumentoDTO>> resp = favorecidosFinaisPorDocumentoUsingGETWithHttpInfo(chaveApiDados, codigoDocumento, pagina);
        return resp.getData();
    }

    /**
     * Consulta favorecidos finais por documento
     * Filtros mínimos: Código do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoDocumento Código do documento (Unidade Gestora + Gestão + Número do documento) (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;ConsultaFavorecidosFinaisPorDocumentoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ConsultaFavorecidosFinaisPorDocumentoDTO>> favorecidosFinaisPorDocumentoUsingGETWithHttpInfo(String chaveApiDados, String codigoDocumento, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = favorecidosFinaisPorDocumentoUsingGETValidateBeforeCall(chaveApiDados, codigoDocumento, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<ConsultaFavorecidosFinaisPorDocumentoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta favorecidos finais por documento (asynchronously)
     * Filtros mínimos: Código do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoDocumento Código do documento (Unidade Gestora + Gestão + Número do documento) (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call favorecidosFinaisPorDocumentoUsingGETAsync(String chaveApiDados, String codigoDocumento, Integer pagina, final ApiCallback<List<ConsultaFavorecidosFinaisPorDocumentoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = favorecidosFinaisPorDocumentoUsingGETValidateBeforeCall(chaveApiDados, codigoDocumento, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ConsultaFavorecidosFinaisPorDocumentoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for itensDeEmpenhoUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoDocumento Código do empenho (Unidade Gestora + Gestão + Número do documento) (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call itensDeEmpenhoUsingGETCall(String chaveApiDados, String codigoDocumento, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/despesas/itens-de-empenho";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoDocumento != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoDocumento", codigoDocumento));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call itensDeEmpenhoUsingGETValidateBeforeCall(String chaveApiDados, String codigoDocumento, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling itensDeEmpenhoUsingGET(Async)");
        }
        
        // verify the required parameter 'codigoDocumento' is set
        if (codigoDocumento == null) {
            throw new ApiException("Missing the required parameter 'codigoDocumento' when calling itensDeEmpenhoUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling itensDeEmpenhoUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = itensDeEmpenhoUsingGETCall(chaveApiDados, codigoDocumento, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os itens de um Empenho
     * 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoDocumento Código do empenho (Unidade Gestora + Gestão + Número do documento) (required)
     * @param pagina Página consultada (required)
     * @return List&lt;DetalhamentoDoGastoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DetalhamentoDoGastoDTO> itensDeEmpenhoUsingGET(String chaveApiDados, String codigoDocumento, Integer pagina) throws ApiException {
        ApiResponse<List<DetalhamentoDoGastoDTO>> resp = itensDeEmpenhoUsingGETWithHttpInfo(chaveApiDados, codigoDocumento, pagina);
        return resp.getData();
    }

    /**
     * Consulta os itens de um Empenho
     * 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoDocumento Código do empenho (Unidade Gestora + Gestão + Número do documento) (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;DetalhamentoDoGastoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DetalhamentoDoGastoDTO>> itensDeEmpenhoUsingGETWithHttpInfo(String chaveApiDados, String codigoDocumento, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = itensDeEmpenhoUsingGETValidateBeforeCall(chaveApiDados, codigoDocumento, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<DetalhamentoDoGastoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os itens de um Empenho (asynchronously)
     * 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoDocumento Código do empenho (Unidade Gestora + Gestão + Número do documento) (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call itensDeEmpenhoUsingGETAsync(String chaveApiDados, String codigoDocumento, Integer pagina, final ApiCallback<List<DetalhamentoDoGastoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = itensDeEmpenhoUsingGETValidateBeforeCall(chaveApiDados, codigoDocumento, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DetalhamentoDoGastoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listaTipoTransferenciaUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listaTipoTransferenciaUsingGETCall(String chaveApiDados, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/despesas/tipo-transferencia";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listaTipoTransferenciaUsingGETValidateBeforeCall(String chaveApiDados, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling listaTipoTransferenciaUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = listaTipoTransferenciaUsingGETCall(chaveApiDados, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os tipos de transferências usados nas despesas
     * 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @return List&lt;IdDescricaoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<IdDescricaoDTO> listaTipoTransferenciaUsingGET(String chaveApiDados) throws ApiException {
        ApiResponse<List<IdDescricaoDTO>> resp = listaTipoTransferenciaUsingGETWithHttpInfo(chaveApiDados);
        return resp.getData();
    }

    /**
     * Consulta os tipos de transferências usados nas despesas
     * 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @return ApiResponse&lt;List&lt;IdDescricaoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<IdDescricaoDTO>> listaTipoTransferenciaUsingGETWithHttpInfo(String chaveApiDados) throws ApiException {
        com.squareup.okhttp.Call call = listaTipoTransferenciaUsingGETValidateBeforeCall(chaveApiDados, null, null);
        Type localVarReturnType = new TypeToken<List<IdDescricaoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os tipos de transferências usados nas despesas (asynchronously)
     * 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listaTipoTransferenciaUsingGETAsync(String chaveApiDados, final ApiCallback<List<IdDescricaoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listaTipoTransferenciaUsingGETValidateBeforeCall(chaveApiDados, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<IdDescricaoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for recursosRecebidosUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param mesAnoFim Mês ano fim (MM/AAAA) (required)
     * @param mesAnoInicio Mês ano início (MM/AAAA) (required)
     * @param pagina Página consultada (required)
     * @param codigoFavorecido CNPJ / CPF / Código do favorecido (optional)
     * @param codigoIBGE Município (optional)
     * @param nomeFavorecido Nome Favorecido (optional)
     * @param orgao Órgão/Entidade vinculada (código SIAFI) (optional)
     * @param orgaoSuperior Órgão superior (código SIAFI) (optional)
     * @param tipoFavorecido Tipo de favorecido (optional)
     * @param uf Sigla UF (optional)
     * @param unidadeGestora Unidade gestora (código SIAFI) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call recursosRecebidosUsingGETCall(String chaveApiDados, String mesAnoFim, String mesAnoInicio, Integer pagina, String codigoFavorecido, String codigoIBGE, String nomeFavorecido, String orgao, String orgaoSuperior, String tipoFavorecido, String uf, String unidadeGestora, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/despesas/recursos-recebidos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoFavorecido != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoFavorecido", codigoFavorecido));
        if (codigoIBGE != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoIBGE", codigoIBGE));
        if (mesAnoFim != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mesAnoFim", mesAnoFim));
        if (mesAnoInicio != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mesAnoInicio", mesAnoInicio));
        if (nomeFavorecido != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nomeFavorecido", nomeFavorecido));
        if (orgao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgao", orgao));
        if (orgaoSuperior != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgaoSuperior", orgaoSuperior));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));
        if (tipoFavorecido != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tipoFavorecido", tipoFavorecido));
        if (uf != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uf", uf));
        if (unidadeGestora != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("unidadeGestora", unidadeGestora));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call recursosRecebidosUsingGETValidateBeforeCall(String chaveApiDados, String mesAnoFim, String mesAnoInicio, Integer pagina, String codigoFavorecido, String codigoIBGE, String nomeFavorecido, String orgao, String orgaoSuperior, String tipoFavorecido, String uf, String unidadeGestora, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling recursosRecebidosUsingGET(Async)");
        }
        
        // verify the required parameter 'mesAnoFim' is set
        if (mesAnoFim == null) {
            throw new ApiException("Missing the required parameter 'mesAnoFim' when calling recursosRecebidosUsingGET(Async)");
        }
        
        // verify the required parameter 'mesAnoInicio' is set
        if (mesAnoInicio == null) {
            throw new ApiException("Missing the required parameter 'mesAnoInicio' when calling recursosRecebidosUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling recursosRecebidosUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = recursosRecebidosUsingGETCall(chaveApiDados, mesAnoFim, mesAnoInicio, pagina, codigoFavorecido, codigoIBGE, nomeFavorecido, orgao, orgaoSuperior, tipoFavorecido, uf, unidadeGestora, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Recebimento de recursos por favorecido
     * 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param mesAnoFim Mês ano fim (MM/AAAA) (required)
     * @param mesAnoInicio Mês ano início (MM/AAAA) (required)
     * @param pagina Página consultada (required)
     * @param codigoFavorecido CNPJ / CPF / Código do favorecido (optional)
     * @param codigoIBGE Município (optional)
     * @param nomeFavorecido Nome Favorecido (optional)
     * @param orgao Órgão/Entidade vinculada (código SIAFI) (optional)
     * @param orgaoSuperior Órgão superior (código SIAFI) (optional)
     * @param tipoFavorecido Tipo de favorecido (optional)
     * @param uf Sigla UF (optional)
     * @param unidadeGestora Unidade gestora (código SIAFI) (optional)
     * @return List&lt;PessoaRecursosRecebidosUGMesDesnormalizadaDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PessoaRecursosRecebidosUGMesDesnormalizadaDTO> recursosRecebidosUsingGET(String chaveApiDados, String mesAnoFim, String mesAnoInicio, Integer pagina, String codigoFavorecido, String codigoIBGE, String nomeFavorecido, String orgao, String orgaoSuperior, String tipoFavorecido, String uf, String unidadeGestora) throws ApiException {
        ApiResponse<List<PessoaRecursosRecebidosUGMesDesnormalizadaDTO>> resp = recursosRecebidosUsingGETWithHttpInfo(chaveApiDados, mesAnoFim, mesAnoInicio, pagina, codigoFavorecido, codigoIBGE, nomeFavorecido, orgao, orgaoSuperior, tipoFavorecido, uf, unidadeGestora);
        return resp.getData();
    }

    /**
     * Recebimento de recursos por favorecido
     * 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param mesAnoFim Mês ano fim (MM/AAAA) (required)
     * @param mesAnoInicio Mês ano início (MM/AAAA) (required)
     * @param pagina Página consultada (required)
     * @param codigoFavorecido CNPJ / CPF / Código do favorecido (optional)
     * @param codigoIBGE Município (optional)
     * @param nomeFavorecido Nome Favorecido (optional)
     * @param orgao Órgão/Entidade vinculada (código SIAFI) (optional)
     * @param orgaoSuperior Órgão superior (código SIAFI) (optional)
     * @param tipoFavorecido Tipo de favorecido (optional)
     * @param uf Sigla UF (optional)
     * @param unidadeGestora Unidade gestora (código SIAFI) (optional)
     * @return ApiResponse&lt;List&lt;PessoaRecursosRecebidosUGMesDesnormalizadaDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PessoaRecursosRecebidosUGMesDesnormalizadaDTO>> recursosRecebidosUsingGETWithHttpInfo(String chaveApiDados, String mesAnoFim, String mesAnoInicio, Integer pagina, String codigoFavorecido, String codigoIBGE, String nomeFavorecido, String orgao, String orgaoSuperior, String tipoFavorecido, String uf, String unidadeGestora) throws ApiException {
        com.squareup.okhttp.Call call = recursosRecebidosUsingGETValidateBeforeCall(chaveApiDados, mesAnoFim, mesAnoInicio, pagina, codigoFavorecido, codigoIBGE, nomeFavorecido, orgao, orgaoSuperior, tipoFavorecido, uf, unidadeGestora, null, null);
        Type localVarReturnType = new TypeToken<List<PessoaRecursosRecebidosUGMesDesnormalizadaDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Recebimento de recursos por favorecido (asynchronously)
     * 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param mesAnoFim Mês ano fim (MM/AAAA) (required)
     * @param mesAnoInicio Mês ano início (MM/AAAA) (required)
     * @param pagina Página consultada (required)
     * @param codigoFavorecido CNPJ / CPF / Código do favorecido (optional)
     * @param codigoIBGE Município (optional)
     * @param nomeFavorecido Nome Favorecido (optional)
     * @param orgao Órgão/Entidade vinculada (código SIAFI) (optional)
     * @param orgaoSuperior Órgão superior (código SIAFI) (optional)
     * @param tipoFavorecido Tipo de favorecido (optional)
     * @param uf Sigla UF (optional)
     * @param unidadeGestora Unidade gestora (código SIAFI) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call recursosRecebidosUsingGETAsync(String chaveApiDados, String mesAnoFim, String mesAnoInicio, Integer pagina, String codigoFavorecido, String codigoIBGE, String nomeFavorecido, String orgao, String orgaoSuperior, String tipoFavorecido, String uf, String unidadeGestora, final ApiCallback<List<PessoaRecursosRecebidosUGMesDesnormalizadaDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = recursosRecebidosUsingGETValidateBeforeCall(chaveApiDados, mesAnoFim, mesAnoInicio, pagina, codigoFavorecido, codigoIBGE, nomeFavorecido, orgao, orgaoSuperior, tipoFavorecido, uf, unidadeGestora, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PessoaRecursosRecebidosUGMesDesnormalizadaDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
