/*
 * API REST do Portal da Transparência do Governo Federal
 * API de serviços do Portal da Transparência do Governo Federal
 *
 * OpenAPI spec version: 1.0
 * Contact: listaapitransparencia@cgu.gov.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.harpia.stive.service.client.api;

import com.google.gson.reflect.TypeToken;
import com.harpia.stive.domain.model.CodigoDescricaoDTO;
import com.harpia.stive.domain.model.ContratoDTO;
import com.harpia.stive.domain.model.EmpenhoComprasDTO;
import com.harpia.stive.domain.model.ItemLicitacaoDTO;
import com.harpia.stive.domain.model.LicitacaoDTO;
import com.harpia.stive.domain.model.ParticipanteLicitacaoDTO;
import com.harpia.stive.domain.model.UnidadeGestoraDTO;
import com.harpia.stive.service.client.ApiCallback;
import com.harpia.stive.service.client.ApiClient;
import com.harpia.stive.service.client.ApiException;
import com.harpia.stive.service.client.ApiResponse;
import com.harpia.stive.service.client.Configuration;
import com.harpia.stive.service.client.Pair;
import com.harpia.stive.service.client.ProgressRequestBody;
import com.harpia.stive.service.client.ProgressResponseBody;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LicitaesDoPoderExecutivoFederalApi {
    private ApiClient apiClient;

    public LicitaesDoPoderExecutivoFederalApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LicitaesDoPoderExecutivoFederalApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for contratosRelacionadosUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoModalidade &lt;a href&#x3D;&#39;/swagger-ui.html#!/Licita231245es32do32Poder32Executivo32Federal/modalidadesUsingGET&#39; &gt;Código da Modalidade da Licitação&lt;/a&gt; (required)
     * @param codigoUG &lt;a href&#x3D;&#39;/swagger-ui.html#!/Licita231245es32do32Poder32Executivo32Federal/ugsUsingGET&#39; &gt;Código da Unidade Gestora&lt;/a&gt; (required)
     * @param numero Número da Licitação (NNNNNAAAA) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contratosRelacionadosUsingGETCall(String chaveApiDados, String codigoModalidade, String codigoUG, String numero, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/licitacoes/contratos-relacionados-licitacao";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoModalidade != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoModalidade", codigoModalidade));
        if (codigoUG != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoUG", codigoUG));
        if (numero != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("numero", numero));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contratosRelacionadosUsingGETValidateBeforeCall(String chaveApiDados, String codigoModalidade, String codigoUG, String numero, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling contratosRelacionadosUsingGET(Async)");
        }
        
        // verify the required parameter 'codigoModalidade' is set
        if (codigoModalidade == null) {
            throw new ApiException("Missing the required parameter 'codigoModalidade' when calling contratosRelacionadosUsingGET(Async)");
        }
        
        // verify the required parameter 'codigoUG' is set
        if (codigoUG == null) {
            throw new ApiException("Missing the required parameter 'codigoUG' when calling contratosRelacionadosUsingGET(Async)");
        }
        
        // verify the required parameter 'numero' is set
        if (numero == null) {
            throw new ApiException("Missing the required parameter 'numero' when calling contratosRelacionadosUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = contratosRelacionadosUsingGETCall(chaveApiDados, codigoModalidade, codigoUG, numero, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os contratos relacionados a licitação
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoModalidade &lt;a href&#x3D;&#39;/swagger-ui.html#!/Licita231245es32do32Poder32Executivo32Federal/modalidadesUsingGET&#39; &gt;Código da Modalidade da Licitação&lt;/a&gt; (required)
     * @param codigoUG &lt;a href&#x3D;&#39;/swagger-ui.html#!/Licita231245es32do32Poder32Executivo32Federal/ugsUsingGET&#39; &gt;Código da Unidade Gestora&lt;/a&gt; (required)
     * @param numero Número da Licitação (NNNNNAAAA) (required)
     * @return List&lt;ContratoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ContratoDTO> contratosRelacionadosUsingGET(String chaveApiDados, String codigoModalidade, String codigoUG, String numero) throws ApiException {
        ApiResponse<List<ContratoDTO>> resp = contratosRelacionadosUsingGETWithHttpInfo(chaveApiDados, codigoModalidade, codigoUG, numero);
        return resp.getData();
    }

    /**
     * Consulta os contratos relacionados a licitação
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoModalidade &lt;a href&#x3D;&#39;/swagger-ui.html#!/Licita231245es32do32Poder32Executivo32Federal/modalidadesUsingGET&#39; &gt;Código da Modalidade da Licitação&lt;/a&gt; (required)
     * @param codigoUG &lt;a href&#x3D;&#39;/swagger-ui.html#!/Licita231245es32do32Poder32Executivo32Federal/ugsUsingGET&#39; &gt;Código da Unidade Gestora&lt;/a&gt; (required)
     * @param numero Número da Licitação (NNNNNAAAA) (required)
     * @return ApiResponse&lt;List&lt;ContratoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ContratoDTO>> contratosRelacionadosUsingGETWithHttpInfo(String chaveApiDados, String codigoModalidade, String codigoUG, String numero) throws ApiException {
        com.squareup.okhttp.Call call = contratosRelacionadosUsingGETValidateBeforeCall(chaveApiDados, codigoModalidade, codigoUG, numero, null, null);
        Type localVarReturnType = new TypeToken<List<ContratoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os contratos relacionados a licitação (asynchronously)
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoModalidade &lt;a href&#x3D;&#39;/swagger-ui.html#!/Licita231245es32do32Poder32Executivo32Federal/modalidadesUsingGET&#39; &gt;Código da Modalidade da Licitação&lt;/a&gt; (required)
     * @param codigoUG &lt;a href&#x3D;&#39;/swagger-ui.html#!/Licita231245es32do32Poder32Executivo32Federal/ugsUsingGET&#39; &gt;Código da Unidade Gestora&lt;/a&gt; (required)
     * @param numero Número da Licitação (NNNNNAAAA) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contratosRelacionadosUsingGETAsync(String chaveApiDados, String codigoModalidade, String codigoUG, String numero, final ApiCallback<List<ContratoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contratosRelacionadosUsingGETValidateBeforeCall(chaveApiDados, codigoModalidade, codigoUG, numero, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ContratoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for empenhosUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoModalidade &lt;a href&#x3D;&#39;/swagger-ui.html#!/Licita231245es32do32Poder32Executivo32Federal/modalidadesUsingGET&#39; &gt;Código da Modalidade da Licitação&lt;/a&gt; (required)
     * @param codigoUG &lt;a href&#x3D;&#39;/swagger-ui.html#!/Licita231245es32do32Poder32Executivo32Federal/ugsUsingGET&#39; &gt;Código da Unidade Gestora&lt;/a&gt; (required)
     * @param numero Número da Licitação (NNNNNAAAA) (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call empenhosUsingGETCall(String chaveApiDados, String codigoModalidade, String codigoUG, String numero, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/licitacoes/empenhos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoModalidade != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoModalidade", codigoModalidade));
        if (codigoUG != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoUG", codigoUG));
        if (numero != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("numero", numero));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call empenhosUsingGETValidateBeforeCall(String chaveApiDados, String codigoModalidade, String codigoUG, String numero, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling empenhosUsingGET(Async)");
        }
        
        // verify the required parameter 'codigoModalidade' is set
        if (codigoModalidade == null) {
            throw new ApiException("Missing the required parameter 'codigoModalidade' when calling empenhosUsingGET(Async)");
        }
        
        // verify the required parameter 'codigoUG' is set
        if (codigoUG == null) {
            throw new ApiException("Missing the required parameter 'codigoUG' when calling empenhosUsingGET(Async)");
        }
        
        // verify the required parameter 'numero' is set
        if (numero == null) {
            throw new ApiException("Missing the required parameter 'numero' when calling empenhosUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling empenhosUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = empenhosUsingGETCall(chaveApiDados, codigoModalidade, codigoUG, numero, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os empenhos de uma licitação
     * O número da licitação deve conter somente números, por exemplo, para a licitação 2/2020 o parâmetro deve ter o valor 22020
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoModalidade &lt;a href&#x3D;&#39;/swagger-ui.html#!/Licita231245es32do32Poder32Executivo32Federal/modalidadesUsingGET&#39; &gt;Código da Modalidade da Licitação&lt;/a&gt; (required)
     * @param codigoUG &lt;a href&#x3D;&#39;/swagger-ui.html#!/Licita231245es32do32Poder32Executivo32Federal/ugsUsingGET&#39; &gt;Código da Unidade Gestora&lt;/a&gt; (required)
     * @param numero Número da Licitação (NNNNNAAAA) (required)
     * @param pagina Página consultada (required)
     * @return List&lt;EmpenhoComprasDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EmpenhoComprasDTO> empenhosUsingGET(String chaveApiDados, String codigoModalidade, String codigoUG, String numero, Integer pagina) throws ApiException {
        ApiResponse<List<EmpenhoComprasDTO>> resp = empenhosUsingGETWithHttpInfo(chaveApiDados, codigoModalidade, codigoUG, numero, pagina);
        return resp.getData();
    }

    /**
     * Consulta os empenhos de uma licitação
     * O número da licitação deve conter somente números, por exemplo, para a licitação 2/2020 o parâmetro deve ter o valor 22020
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoModalidade &lt;a href&#x3D;&#39;/swagger-ui.html#!/Licita231245es32do32Poder32Executivo32Federal/modalidadesUsingGET&#39; &gt;Código da Modalidade da Licitação&lt;/a&gt; (required)
     * @param codigoUG &lt;a href&#x3D;&#39;/swagger-ui.html#!/Licita231245es32do32Poder32Executivo32Federal/ugsUsingGET&#39; &gt;Código da Unidade Gestora&lt;/a&gt; (required)
     * @param numero Número da Licitação (NNNNNAAAA) (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;EmpenhoComprasDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EmpenhoComprasDTO>> empenhosUsingGETWithHttpInfo(String chaveApiDados, String codigoModalidade, String codigoUG, String numero, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = empenhosUsingGETValidateBeforeCall(chaveApiDados, codigoModalidade, codigoUG, numero, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<EmpenhoComprasDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os empenhos de uma licitação (asynchronously)
     * O número da licitação deve conter somente números, por exemplo, para a licitação 2/2020 o parâmetro deve ter o valor 22020
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoModalidade &lt;a href&#x3D;&#39;/swagger-ui.html#!/Licita231245es32do32Poder32Executivo32Federal/modalidadesUsingGET&#39; &gt;Código da Modalidade da Licitação&lt;/a&gt; (required)
     * @param codigoUG &lt;a href&#x3D;&#39;/swagger-ui.html#!/Licita231245es32do32Poder32Executivo32Federal/ugsUsingGET&#39; &gt;Código da Unidade Gestora&lt;/a&gt; (required)
     * @param numero Número da Licitação (NNNNNAAAA) (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call empenhosUsingGETAsync(String chaveApiDados, String codigoModalidade, String codigoUG, String numero, Integer pagina, final ApiCallback<List<EmpenhoComprasDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = empenhosUsingGETValidateBeforeCall(chaveApiDados, codigoModalidade, codigoUG, numero, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EmpenhoComprasDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for itensLicitadosUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call itensLicitadosUsingGETCall(String chaveApiDados, Integer id, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/licitacoes/itens-licitados";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call itensLicitadosUsingGETValidateBeforeCall(String chaveApiDados, Integer id, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling itensLicitadosUsingGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling itensLicitadosUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling itensLicitadosUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = itensLicitadosUsingGETCall(chaveApiDados, id, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os itens licitados pelo id licitação
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @param pagina Página consultada (required)
     * @return List&lt;ItemLicitacaoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ItemLicitacaoDTO> itensLicitadosUsingGET(String chaveApiDados, Integer id, Integer pagina) throws ApiException {
        ApiResponse<List<ItemLicitacaoDTO>> resp = itensLicitadosUsingGETWithHttpInfo(chaveApiDados, id, pagina);
        return resp.getData();
    }

    /**
     * Consulta os itens licitados pelo id licitação
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;ItemLicitacaoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ItemLicitacaoDTO>> itensLicitadosUsingGETWithHttpInfo(String chaveApiDados, Integer id, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = itensLicitadosUsingGETValidateBeforeCall(chaveApiDados, id, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<ItemLicitacaoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os itens licitados pelo id licitação (asynchronously)
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call itensLicitadosUsingGETAsync(String chaveApiDados, Integer id, Integer pagina, final ApiCallback<List<ItemLicitacaoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = itensLicitadosUsingGETValidateBeforeCall(chaveApiDados, id, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ItemLicitacaoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for licitacaoUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call licitacaoUsingGETCall(String chaveApiDados, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/licitacoes/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call licitacaoUsingGETValidateBeforeCall(String chaveApiDados, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling licitacaoUsingGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling licitacaoUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = licitacaoUsingGETCall(chaveApiDados, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta uma licitação do Poder Executivo Federal pelo id
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @return LicitacaoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LicitacaoDTO licitacaoUsingGET(String chaveApiDados, Integer id) throws ApiException {
        ApiResponse<LicitacaoDTO> resp = licitacaoUsingGETWithHttpInfo(chaveApiDados, id);
        return resp.getData();
    }

    /**
     * Consulta uma licitação do Poder Executivo Federal pelo id
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @return ApiResponse&lt;LicitacaoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LicitacaoDTO> licitacaoUsingGETWithHttpInfo(String chaveApiDados, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = licitacaoUsingGETValidateBeforeCall(chaveApiDados, id, null, null);
        Type localVarReturnType = new TypeToken<LicitacaoDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta uma licitação do Poder Executivo Federal pelo id (asynchronously)
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call licitacaoUsingGETAsync(String chaveApiDados, Integer id, final ApiCallback<LicitacaoDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = licitacaoUsingGETValidateBeforeCall(chaveApiDados, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LicitacaoDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for licitacoesPorProcessoUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param processo Número do Processo (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call licitacoesPorProcessoUsingGETCall(String chaveApiDados, String processo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/licitacoes/por-processo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (processo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("processo", processo));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call licitacoesPorProcessoUsingGETValidateBeforeCall(String chaveApiDados, String processo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling licitacoesPorProcessoUsingGET(Async)");
        }
        
        // verify the required parameter 'processo' is set
        if (processo == null) {
            throw new ApiException("Missing the required parameter 'processo' when calling licitacoesPorProcessoUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = licitacoesPorProcessoUsingGETCall(chaveApiDados, processo, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta uma licitação pelo número do processo
     * O número do processo deve conter somente números
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param processo Número do Processo (required)
     * @return List&lt;LicitacaoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LicitacaoDTO> licitacoesPorProcessoUsingGET(String chaveApiDados, String processo) throws ApiException {
        ApiResponse<List<LicitacaoDTO>> resp = licitacoesPorProcessoUsingGETWithHttpInfo(chaveApiDados, processo);
        return resp.getData();
    }

    /**
     * Consulta uma licitação pelo número do processo
     * O número do processo deve conter somente números
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param processo Número do Processo (required)
     * @return ApiResponse&lt;List&lt;LicitacaoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LicitacaoDTO>> licitacoesPorProcessoUsingGETWithHttpInfo(String chaveApiDados, String processo) throws ApiException {
        com.squareup.okhttp.Call call = licitacoesPorProcessoUsingGETValidateBeforeCall(chaveApiDados, processo, null, null);
        Type localVarReturnType = new TypeToken<List<LicitacaoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta uma licitação pelo número do processo (asynchronously)
     * O número do processo deve conter somente números
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param processo Número do Processo (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call licitacoesPorProcessoUsingGETAsync(String chaveApiDados, String processo, final ApiCallback<List<LicitacaoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = licitacoesPorProcessoUsingGETValidateBeforeCall(chaveApiDados, processo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LicitacaoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for licitacoesPorUgModalidadeENumeroUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoModalidade &lt;a href&#x3D;&#39;/swagger-ui.html#!/Licita231245es32do32Poder32Executivo32Federal/modalidadesUsingGET&#39; &gt;Código da Modalidade da Licitação&lt;/a&gt; (required)
     * @param codigoUG &lt;a href&#x3D;&#39;/swagger-ui.html#!/Licita231245es32do32Poder32Executivo32Federal/ugsUsingGET&#39; &gt;Código da Unidade Gestora&lt;/a&gt; (required)
     * @param numero Número da Licitação (NNNNNAAAA) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call licitacoesPorUgModalidadeENumeroUsingGETCall(String chaveApiDados, String codigoModalidade, String codigoUG, String numero, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/licitacoes/por-ug-modalidade-numero";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoModalidade != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoModalidade", codigoModalidade));
        if (codigoUG != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoUG", codigoUG));
        if (numero != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("numero", numero));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call licitacoesPorUgModalidadeENumeroUsingGETValidateBeforeCall(String chaveApiDados, String codigoModalidade, String codigoUG, String numero, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling licitacoesPorUgModalidadeENumeroUsingGET(Async)");
        }
        
        // verify the required parameter 'codigoModalidade' is set
        if (codigoModalidade == null) {
            throw new ApiException("Missing the required parameter 'codigoModalidade' when calling licitacoesPorUgModalidadeENumeroUsingGET(Async)");
        }
        
        // verify the required parameter 'codigoUG' is set
        if (codigoUG == null) {
            throw new ApiException("Missing the required parameter 'codigoUG' when calling licitacoesPorUgModalidadeENumeroUsingGET(Async)");
        }
        
        // verify the required parameter 'numero' is set
        if (numero == null) {
            throw new ApiException("Missing the required parameter 'numero' when calling licitacoesPorUgModalidadeENumeroUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = licitacoesPorUgModalidadeENumeroUsingGETCall(chaveApiDados, codigoModalidade, codigoUG, numero, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta uma licitação pelo código da Unidade Gestora, número e modalidade
     * O número da licitação deve conter somente números, por exemplo, para a licitação 2/2020 o parâmetro deve ter o valor 22020
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoModalidade &lt;a href&#x3D;&#39;/swagger-ui.html#!/Licita231245es32do32Poder32Executivo32Federal/modalidadesUsingGET&#39; &gt;Código da Modalidade da Licitação&lt;/a&gt; (required)
     * @param codigoUG &lt;a href&#x3D;&#39;/swagger-ui.html#!/Licita231245es32do32Poder32Executivo32Federal/ugsUsingGET&#39; &gt;Código da Unidade Gestora&lt;/a&gt; (required)
     * @param numero Número da Licitação (NNNNNAAAA) (required)
     * @return List&lt;LicitacaoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LicitacaoDTO> licitacoesPorUgModalidadeENumeroUsingGET(String chaveApiDados, String codigoModalidade, String codigoUG, String numero) throws ApiException {
        ApiResponse<List<LicitacaoDTO>> resp = licitacoesPorUgModalidadeENumeroUsingGETWithHttpInfo(chaveApiDados, codigoModalidade, codigoUG, numero);
        return resp.getData();
    }

    /**
     * Consulta uma licitação pelo código da Unidade Gestora, número e modalidade
     * O número da licitação deve conter somente números, por exemplo, para a licitação 2/2020 o parâmetro deve ter o valor 22020
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoModalidade &lt;a href&#x3D;&#39;/swagger-ui.html#!/Licita231245es32do32Poder32Executivo32Federal/modalidadesUsingGET&#39; &gt;Código da Modalidade da Licitação&lt;/a&gt; (required)
     * @param codigoUG &lt;a href&#x3D;&#39;/swagger-ui.html#!/Licita231245es32do32Poder32Executivo32Federal/ugsUsingGET&#39; &gt;Código da Unidade Gestora&lt;/a&gt; (required)
     * @param numero Número da Licitação (NNNNNAAAA) (required)
     * @return ApiResponse&lt;List&lt;LicitacaoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LicitacaoDTO>> licitacoesPorUgModalidadeENumeroUsingGETWithHttpInfo(String chaveApiDados, String codigoModalidade, String codigoUG, String numero) throws ApiException {
        com.squareup.okhttp.Call call = licitacoesPorUgModalidadeENumeroUsingGETValidateBeforeCall(chaveApiDados, codigoModalidade, codigoUG, numero, null, null);
        Type localVarReturnType = new TypeToken<List<LicitacaoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta uma licitação pelo código da Unidade Gestora, número e modalidade (asynchronously)
     * O número da licitação deve conter somente números, por exemplo, para a licitação 2/2020 o parâmetro deve ter o valor 22020
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoModalidade &lt;a href&#x3D;&#39;/swagger-ui.html#!/Licita231245es32do32Poder32Executivo32Federal/modalidadesUsingGET&#39; &gt;Código da Modalidade da Licitação&lt;/a&gt; (required)
     * @param codigoUG &lt;a href&#x3D;&#39;/swagger-ui.html#!/Licita231245es32do32Poder32Executivo32Federal/ugsUsingGET&#39; &gt;Código da Unidade Gestora&lt;/a&gt; (required)
     * @param numero Número da Licitação (NNNNNAAAA) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call licitacoesPorUgModalidadeENumeroUsingGETAsync(String chaveApiDados, String codigoModalidade, String codigoUG, String numero, final ApiCallback<List<LicitacaoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = licitacoesPorUgModalidadeENumeroUsingGETValidateBeforeCall(chaveApiDados, codigoModalidade, codigoUG, numero, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LicitacaoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for licitacoesUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoOrgao &lt;a href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiafiUsingGET&#39; &gt;Código do Órgão (SIAFI)&lt;/a&gt; (required)
     * @param pagina Página consultada (required)
     * @param dataFinal Data de abertura final (DD/MM/AAAA) (optional)
     * @param dataInicial Data de abertura inicial (DD/MM/AAAA) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call licitacoesUsingGETCall(String chaveApiDados, String codigoOrgao, Integer pagina, String dataFinal, String dataInicial, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/licitacoes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoOrgao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoOrgao", codigoOrgao));
        if (dataFinal != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dataFinal", dataFinal));
        if (dataInicial != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dataInicial", dataInicial));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call licitacoesUsingGETValidateBeforeCall(String chaveApiDados, String codigoOrgao, Integer pagina, String dataFinal, String dataInicial, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling licitacoesUsingGET(Async)");
        }
        
        // verify the required parameter 'codigoOrgao' is set
        if (codigoOrgao == null) {
            throw new ApiException("Missing the required parameter 'codigoOrgao' when calling licitacoesUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling licitacoesUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = licitacoesUsingGETCall(chaveApiDados, codigoOrgao, pagina, dataFinal, dataInicial, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta todas as licitações do Poder Executivo Federal
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Período de no máximo 1 mês; Código do Órgão (SIAFI)
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoOrgao &lt;a href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiafiUsingGET&#39; &gt;Código do Órgão (SIAFI)&lt;/a&gt; (required)
     * @param pagina Página consultada (required)
     * @param dataFinal Data de abertura final (DD/MM/AAAA) (optional)
     * @param dataInicial Data de abertura inicial (DD/MM/AAAA) (optional)
     * @return List&lt;LicitacaoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LicitacaoDTO> licitacoesUsingGET(String chaveApiDados, String codigoOrgao, Integer pagina, String dataFinal, String dataInicial) throws ApiException {
        ApiResponse<List<LicitacaoDTO>> resp = licitacoesUsingGETWithHttpInfo(chaveApiDados, codigoOrgao, pagina, dataFinal, dataInicial);
        return resp.getData();
    }

    /**
     * Consulta todas as licitações do Poder Executivo Federal
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Período de no máximo 1 mês; Código do Órgão (SIAFI)
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoOrgao &lt;a href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiafiUsingGET&#39; &gt;Código do Órgão (SIAFI)&lt;/a&gt; (required)
     * @param pagina Página consultada (required)
     * @param dataFinal Data de abertura final (DD/MM/AAAA) (optional)
     * @param dataInicial Data de abertura inicial (DD/MM/AAAA) (optional)
     * @return ApiResponse&lt;List&lt;LicitacaoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LicitacaoDTO>> licitacoesUsingGETWithHttpInfo(String chaveApiDados, String codigoOrgao, Integer pagina, String dataFinal, String dataInicial) throws ApiException {
        com.squareup.okhttp.Call call = licitacoesUsingGETValidateBeforeCall(chaveApiDados, codigoOrgao, pagina, dataFinal, dataInicial, null, null);
        Type localVarReturnType = new TypeToken<List<LicitacaoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta todas as licitações do Poder Executivo Federal (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Período de no máximo 1 mês; Código do Órgão (SIAFI)
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoOrgao &lt;a href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiafiUsingGET&#39; &gt;Código do Órgão (SIAFI)&lt;/a&gt; (required)
     * @param pagina Página consultada (required)
     * @param dataFinal Data de abertura final (DD/MM/AAAA) (optional)
     * @param dataInicial Data de abertura inicial (DD/MM/AAAA) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call licitacoesUsingGETAsync(String chaveApiDados, String codigoOrgao, Integer pagina, String dataFinal, String dataInicial, final ApiCallback<List<LicitacaoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = licitacoesUsingGETValidateBeforeCall(chaveApiDados, codigoOrgao, pagina, dataFinal, dataInicial, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LicitacaoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for modalidadesUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call modalidadesUsingGETCall(String chaveApiDados, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/licitacoes/modalidades";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call modalidadesUsingGETValidateBeforeCall(String chaveApiDados, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling modalidadesUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = modalidadesUsingGETCall(chaveApiDados, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta as modalidades de licitação
     * 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @return List&lt;CodigoDescricaoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CodigoDescricaoDTO> modalidadesUsingGET(String chaveApiDados) throws ApiException {
        ApiResponse<List<CodigoDescricaoDTO>> resp = modalidadesUsingGETWithHttpInfo(chaveApiDados);
        return resp.getData();
    }

    /**
     * Consulta as modalidades de licitação
     * 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @return ApiResponse&lt;List&lt;CodigoDescricaoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CodigoDescricaoDTO>> modalidadesUsingGETWithHttpInfo(String chaveApiDados) throws ApiException {
        com.squareup.okhttp.Call call = modalidadesUsingGETValidateBeforeCall(chaveApiDados, null, null);
        Type localVarReturnType = new TypeToken<List<CodigoDescricaoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta as modalidades de licitação (asynchronously)
     * 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call modalidadesUsingGETAsync(String chaveApiDados, final ApiCallback<List<CodigoDescricaoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = modalidadesUsingGETValidateBeforeCall(chaveApiDados, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CodigoDescricaoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for participantesUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoModalidade &lt;a href&#x3D;&#39;/swagger-ui.html#!/Licita231245es32do32Poder32Executivo32Federal/modalidadesUsingGET&#39; &gt;Código da Modalidade da Licitação&lt;/a&gt; (required)
     * @param codigoUG &lt;a href&#x3D;&#39;/swagger-ui.html#!/Licita231245es32do32Poder32Executivo32Federal/ugsUsingGET&#39; &gt;Código da Unidade Gestora&lt;/a&gt; (required)
     * @param numero Número da Licitação (NNNNNAAAA) (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call participantesUsingGETCall(String chaveApiDados, String codigoModalidade, String codigoUG, String numero, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/licitacoes/participantes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoModalidade != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoModalidade", codigoModalidade));
        if (codigoUG != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoUG", codigoUG));
        if (numero != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("numero", numero));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call participantesUsingGETValidateBeforeCall(String chaveApiDados, String codigoModalidade, String codigoUG, String numero, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling participantesUsingGET(Async)");
        }
        
        // verify the required parameter 'codigoModalidade' is set
        if (codigoModalidade == null) {
            throw new ApiException("Missing the required parameter 'codigoModalidade' when calling participantesUsingGET(Async)");
        }
        
        // verify the required parameter 'codigoUG' is set
        if (codigoUG == null) {
            throw new ApiException("Missing the required parameter 'codigoUG' when calling participantesUsingGET(Async)");
        }
        
        // verify the required parameter 'numero' is set
        if (numero == null) {
            throw new ApiException("Missing the required parameter 'numero' when calling participantesUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling participantesUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = participantesUsingGETCall(chaveApiDados, codigoModalidade, codigoUG, numero, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os participantes de uma licitação
     * O número da licitação deve conter somente números, por exemplo, para a licitação 2/2020 o parâmetro deve ter o valor 22020
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoModalidade &lt;a href&#x3D;&#39;/swagger-ui.html#!/Licita231245es32do32Poder32Executivo32Federal/modalidadesUsingGET&#39; &gt;Código da Modalidade da Licitação&lt;/a&gt; (required)
     * @param codigoUG &lt;a href&#x3D;&#39;/swagger-ui.html#!/Licita231245es32do32Poder32Executivo32Federal/ugsUsingGET&#39; &gt;Código da Unidade Gestora&lt;/a&gt; (required)
     * @param numero Número da Licitação (NNNNNAAAA) (required)
     * @param pagina Página consultada (required)
     * @return List&lt;ParticipanteLicitacaoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ParticipanteLicitacaoDTO> participantesUsingGET(String chaveApiDados, String codigoModalidade, String codigoUG, String numero, Integer pagina) throws ApiException {
        ApiResponse<List<ParticipanteLicitacaoDTO>> resp = participantesUsingGETWithHttpInfo(chaveApiDados, codigoModalidade, codigoUG, numero, pagina);
        return resp.getData();
    }

    /**
     * Consulta os participantes de uma licitação
     * O número da licitação deve conter somente números, por exemplo, para a licitação 2/2020 o parâmetro deve ter o valor 22020
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoModalidade &lt;a href&#x3D;&#39;/swagger-ui.html#!/Licita231245es32do32Poder32Executivo32Federal/modalidadesUsingGET&#39; &gt;Código da Modalidade da Licitação&lt;/a&gt; (required)
     * @param codigoUG &lt;a href&#x3D;&#39;/swagger-ui.html#!/Licita231245es32do32Poder32Executivo32Federal/ugsUsingGET&#39; &gt;Código da Unidade Gestora&lt;/a&gt; (required)
     * @param numero Número da Licitação (NNNNNAAAA) (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;ParticipanteLicitacaoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ParticipanteLicitacaoDTO>> participantesUsingGETWithHttpInfo(String chaveApiDados, String codigoModalidade, String codigoUG, String numero, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = participantesUsingGETValidateBeforeCall(chaveApiDados, codigoModalidade, codigoUG, numero, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<ParticipanteLicitacaoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os participantes de uma licitação (asynchronously)
     * O número da licitação deve conter somente números, por exemplo, para a licitação 2/2020 o parâmetro deve ter o valor 22020
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoModalidade &lt;a href&#x3D;&#39;/swagger-ui.html#!/Licita231245es32do32Poder32Executivo32Federal/modalidadesUsingGET&#39; &gt;Código da Modalidade da Licitação&lt;/a&gt; (required)
     * @param codigoUG &lt;a href&#x3D;&#39;/swagger-ui.html#!/Licita231245es32do32Poder32Executivo32Federal/ugsUsingGET&#39; &gt;Código da Unidade Gestora&lt;/a&gt; (required)
     * @param numero Número da Licitação (NNNNNAAAA) (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call participantesUsingGETAsync(String chaveApiDados, String codigoModalidade, String codigoUG, String numero, Integer pagina, final ApiCallback<List<ParticipanteLicitacaoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = participantesUsingGETValidateBeforeCall(chaveApiDados, codigoModalidade, codigoUG, numero, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ParticipanteLicitacaoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ugsUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ugsUsingGETCall(String chaveApiDados, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/licitacoes/ugs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ugsUsingGETValidateBeforeCall(String chaveApiDados, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling ugsUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling ugsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = ugsUsingGETCall(chaveApiDados, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta as Unidades Gestoras que realizaram licitações
     * 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @return List&lt;UnidadeGestoraDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<UnidadeGestoraDTO> ugsUsingGET(String chaveApiDados, Integer pagina) throws ApiException {
        ApiResponse<List<UnidadeGestoraDTO>> resp = ugsUsingGETWithHttpInfo(chaveApiDados, pagina);
        return resp.getData();
    }

    /**
     * Consulta as Unidades Gestoras que realizaram licitações
     * 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;UnidadeGestoraDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<UnidadeGestoraDTO>> ugsUsingGETWithHttpInfo(String chaveApiDados, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = ugsUsingGETValidateBeforeCall(chaveApiDados, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<UnidadeGestoraDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta as Unidades Gestoras que realizaram licitações (asynchronously)
     * 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ugsUsingGETAsync(String chaveApiDados, Integer pagina, final ApiCallback<List<UnidadeGestoraDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ugsUsingGETValidateBeforeCall(chaveApiDados, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<UnidadeGestoraDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
