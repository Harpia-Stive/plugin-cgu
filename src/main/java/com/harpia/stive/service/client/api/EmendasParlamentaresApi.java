/*
 * API REST do Portal da Transparência do Governo Federal
 * API de serviços do Portal da Transparência do Governo Federal
 *
 * OpenAPI spec version: 1.0
 * Contact: listaapitransparencia@cgu.gov.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.harpia.stive.service.client.api;

import com.google.gson.reflect.TypeToken;
import com.harpia.stive.domain.model.ConsultaEmendasDTO;
import com.harpia.stive.domain.model.DocumentoRelacionadoEmendaDTO;
import com.harpia.stive.service.client.ApiCallback;
import com.harpia.stive.service.client.ApiClient;
import com.harpia.stive.service.client.ApiException;
import com.harpia.stive.service.client.ApiResponse;
import com.harpia.stive.service.client.Configuration;
import com.harpia.stive.service.client.Pair;
import com.harpia.stive.service.client.ProgressRequestBody;
import com.harpia.stive.service.client.ProgressResponseBody;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EmendasParlamentaresApi {
    private ApiClient apiClient;

    public EmendasParlamentaresApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EmendasParlamentaresApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for documentosRelacionadosAEmendaUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigo Código da emenda (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentosRelacionadosAEmendaUsingGETCall(String chaveApiDados, String codigo, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/emendas/documentos/{codigo}"
            .replaceAll("\\{" + "codigo" + "\\}", apiClient.escapeString(codigo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentosRelacionadosAEmendaUsingGETValidateBeforeCall(String chaveApiDados, String codigo, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling documentosRelacionadosAEmendaUsingGET(Async)");
        }
        
        // verify the required parameter 'codigo' is set
        if (codigo == null) {
            throw new ApiException("Missing the required parameter 'codigo' when calling documentosRelacionadosAEmendaUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling documentosRelacionadosAEmendaUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = documentosRelacionadosAEmendaUsingGETCall(chaveApiDados, codigo, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os documentos relacionados à emenda parlamentar pelo código da emenda
     * Filtros mínimos:  Página (padrão &#x3D; 1); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigo Código da emenda (required)
     * @param pagina Página consultada (required)
     * @return List&lt;DocumentoRelacionadoEmendaDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DocumentoRelacionadoEmendaDTO> documentosRelacionadosAEmendaUsingGET(String chaveApiDados, String codigo, Integer pagina) throws ApiException {
        ApiResponse<List<DocumentoRelacionadoEmendaDTO>> resp = documentosRelacionadosAEmendaUsingGETWithHttpInfo(chaveApiDados, codigo, pagina);
        return resp.getData();
    }

    /**
     * Consulta os documentos relacionados à emenda parlamentar pelo código da emenda
     * Filtros mínimos:  Página (padrão &#x3D; 1); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigo Código da emenda (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;DocumentoRelacionadoEmendaDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DocumentoRelacionadoEmendaDTO>> documentosRelacionadosAEmendaUsingGETWithHttpInfo(String chaveApiDados, String codigo, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = documentosRelacionadosAEmendaUsingGETValidateBeforeCall(chaveApiDados, codigo, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<DocumentoRelacionadoEmendaDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os documentos relacionados à emenda parlamentar pelo código da emenda (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigo Código da emenda (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentosRelacionadosAEmendaUsingGETAsync(String chaveApiDados, String codigo, Integer pagina, final ApiCallback<List<DocumentoRelacionadoEmendaDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentosRelacionadosAEmendaUsingGETValidateBeforeCall(chaveApiDados, codigo, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DocumentoRelacionadoEmendaDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for emendasUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param ano Ano (optional)
     * @param codigoEmenda Código da Emenda (optional)
     * @param codigoFuncao Código da função (optional)
     * @param codigoSubfuncao Código da subfunção (optional)
     * @param nomeAutor Nome do Autor (optional)
     * @param numeroEmenda Número da emenda (optional)
     * @param tipoEmenda Tipo de emenda (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call emendasUsingGETCall(String chaveApiDados, Integer pagina, Integer ano, String codigoEmenda, String codigoFuncao, String codigoSubfuncao, String nomeAutor, String numeroEmenda, String tipoEmenda, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/emendas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ano != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ano", ano));
        if (codigoEmenda != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoEmenda", codigoEmenda));
        if (codigoFuncao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoFuncao", codigoFuncao));
        if (codigoSubfuncao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoSubfuncao", codigoSubfuncao));
        if (nomeAutor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nomeAutor", nomeAutor));
        if (numeroEmenda != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("numeroEmenda", numeroEmenda));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));
        if (tipoEmenda != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tipoEmenda", tipoEmenda));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call emendasUsingGETValidateBeforeCall(String chaveApiDados, Integer pagina, Integer ano, String codigoEmenda, String codigoFuncao, String codigoSubfuncao, String nomeAutor, String numeroEmenda, String tipoEmenda, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling emendasUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling emendasUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = emendasUsingGETCall(chaveApiDados, pagina, ano, codigoEmenda, codigoFuncao, codigoSubfuncao, nomeAutor, numeroEmenda, tipoEmenda, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta as emendas parlamentares
     * Filtros mínimos:  Página (padrão &#x3D; 1); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param ano Ano (optional)
     * @param codigoEmenda Código da Emenda (optional)
     * @param codigoFuncao Código da função (optional)
     * @param codigoSubfuncao Código da subfunção (optional)
     * @param nomeAutor Nome do Autor (optional)
     * @param numeroEmenda Número da emenda (optional)
     * @param tipoEmenda Tipo de emenda (optional)
     * @return List&lt;ConsultaEmendasDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ConsultaEmendasDTO> emendasUsingGET(String chaveApiDados, Integer pagina, Integer ano, String codigoEmenda, String codigoFuncao, String codigoSubfuncao, String nomeAutor, String numeroEmenda, String tipoEmenda) throws ApiException {
        ApiResponse<List<ConsultaEmendasDTO>> resp = emendasUsingGETWithHttpInfo(chaveApiDados, pagina, ano, codigoEmenda, codigoFuncao, codigoSubfuncao, nomeAutor, numeroEmenda, tipoEmenda);
        return resp.getData();
    }

    /**
     * Consulta as emendas parlamentares
     * Filtros mínimos:  Página (padrão &#x3D; 1); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param ano Ano (optional)
     * @param codigoEmenda Código da Emenda (optional)
     * @param codigoFuncao Código da função (optional)
     * @param codigoSubfuncao Código da subfunção (optional)
     * @param nomeAutor Nome do Autor (optional)
     * @param numeroEmenda Número da emenda (optional)
     * @param tipoEmenda Tipo de emenda (optional)
     * @return ApiResponse&lt;List&lt;ConsultaEmendasDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ConsultaEmendasDTO>> emendasUsingGETWithHttpInfo(String chaveApiDados, Integer pagina, Integer ano, String codigoEmenda, String codigoFuncao, String codigoSubfuncao, String nomeAutor, String numeroEmenda, String tipoEmenda) throws ApiException {
        com.squareup.okhttp.Call call = emendasUsingGETValidateBeforeCall(chaveApiDados, pagina, ano, codigoEmenda, codigoFuncao, codigoSubfuncao, nomeAutor, numeroEmenda, tipoEmenda, null, null);
        Type localVarReturnType = new TypeToken<List<ConsultaEmendasDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta as emendas parlamentares (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param ano Ano (optional)
     * @param codigoEmenda Código da Emenda (optional)
     * @param codigoFuncao Código da função (optional)
     * @param codigoSubfuncao Código da subfunção (optional)
     * @param nomeAutor Nome do Autor (optional)
     * @param numeroEmenda Número da emenda (optional)
     * @param tipoEmenda Tipo de emenda (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call emendasUsingGETAsync(String chaveApiDados, Integer pagina, Integer ano, String codigoEmenda, String codigoFuncao, String codigoSubfuncao, String nomeAutor, String numeroEmenda, String tipoEmenda, final ApiCallback<List<ConsultaEmendasDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = emendasUsingGETValidateBeforeCall(chaveApiDados, pagina, ano, codigoEmenda, codigoFuncao, codigoSubfuncao, nomeAutor, numeroEmenda, tipoEmenda, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ConsultaEmendasDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
