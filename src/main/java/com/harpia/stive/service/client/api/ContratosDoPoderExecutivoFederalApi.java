/*
 * API REST do Portal da Transparência do Governo Federal
 * API de serviços do Portal da Transparência do Governo Federal
 *
 * OpenAPI spec version: 1.0
 * Contact: listaapitransparencia@cgu.gov.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.harpia.stive.service.client.api;

import com.google.gson.reflect.TypeToken;
import com.harpia.stive.domain.model.ApostilamentoDTO;
import com.harpia.stive.domain.model.ContratoDTO;
import com.harpia.stive.domain.model.EmpenhoComprasDTO;
import com.harpia.stive.domain.model.ItemContratadoDTO;
import com.harpia.stive.domain.model.TermoAditivoDTO;
import com.harpia.stive.service.client.ApiCallback;
import com.harpia.stive.service.client.ApiClient;
import com.harpia.stive.service.client.ApiException;
import com.harpia.stive.service.client.ApiResponse;
import com.harpia.stive.service.client.Configuration;
import com.harpia.stive.service.client.Pair;
import com.harpia.stive.service.client.ProgressRequestBody;
import com.harpia.stive.service.client.ProgressResponseBody;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContratosDoPoderExecutivoFederalApi {
    private ApiClient apiClient;

    public ContratosDoPoderExecutivoFederalApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContratosDoPoderExecutivoFederalApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for apostilamentosDoContratoUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apostilamentosDoContratoUsingGETCall(String chaveApiDados, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/contratos/apostilamento";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apostilamentosDoContratoUsingGETValidateBeforeCall(String chaveApiDados, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling apostilamentosDoContratoUsingGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apostilamentosDoContratoUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = apostilamentosDoContratoUsingGETCall(chaveApiDados, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os apostilamentos do contrato pelo id do contrato
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @return List&lt;ApostilamentoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ApostilamentoDTO> apostilamentosDoContratoUsingGET(String chaveApiDados, Integer id) throws ApiException {
        ApiResponse<List<ApostilamentoDTO>> resp = apostilamentosDoContratoUsingGETWithHttpInfo(chaveApiDados, id);
        return resp.getData();
    }

    /**
     * Consulta os apostilamentos do contrato pelo id do contrato
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @return ApiResponse&lt;List&lt;ApostilamentoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ApostilamentoDTO>> apostilamentosDoContratoUsingGETWithHttpInfo(String chaveApiDados, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = apostilamentosDoContratoUsingGETValidateBeforeCall(chaveApiDados, id, null, null);
        Type localVarReturnType = new TypeToken<List<ApostilamentoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os apostilamentos do contrato pelo id do contrato (asynchronously)
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apostilamentosDoContratoUsingGETAsync(String chaveApiDados, Integer id, final ApiCallback<List<ApostilamentoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apostilamentosDoContratoUsingGETValidateBeforeCall(chaveApiDados, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ApostilamentoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contratoPorCpfCnpjUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param cpfCnpj CPF/CNPJ do Fornecedor (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contratoPorCpfCnpjUsingGETCall(String chaveApiDados, String cpfCnpj, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/contratos/cpf-cnpj";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cpfCnpj != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cpfCnpj", cpfCnpj));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contratoPorCpfCnpjUsingGETValidateBeforeCall(String chaveApiDados, String cpfCnpj, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling contratoPorCpfCnpjUsingGET(Async)");
        }
        
        // verify the required parameter 'cpfCnpj' is set
        if (cpfCnpj == null) {
            throw new ApiException("Missing the required parameter 'cpfCnpj' when calling contratoPorCpfCnpjUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling contratoPorCpfCnpjUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = contratoPorCpfCnpjUsingGETCall(chaveApiDados, cpfCnpj, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta um contrato do Poder Executivo Federal pelo CPF/CNPJ do Fornecedor
     * Filtros mínimos: CPF/CNPJ do Fornecedor
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param cpfCnpj CPF/CNPJ do Fornecedor (required)
     * @param pagina Página consultada (required)
     * @return List&lt;ContratoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ContratoDTO> contratoPorCpfCnpjUsingGET(String chaveApiDados, String cpfCnpj, Integer pagina) throws ApiException {
        ApiResponse<List<ContratoDTO>> resp = contratoPorCpfCnpjUsingGETWithHttpInfo(chaveApiDados, cpfCnpj, pagina);
        return resp.getData();
    }

    /**
     * Consulta um contrato do Poder Executivo Federal pelo CPF/CNPJ do Fornecedor
     * Filtros mínimos: CPF/CNPJ do Fornecedor
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param cpfCnpj CPF/CNPJ do Fornecedor (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;ContratoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ContratoDTO>> contratoPorCpfCnpjUsingGETWithHttpInfo(String chaveApiDados, String cpfCnpj, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = contratoPorCpfCnpjUsingGETValidateBeforeCall(chaveApiDados, cpfCnpj, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<ContratoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta um contrato do Poder Executivo Federal pelo CPF/CNPJ do Fornecedor (asynchronously)
     * Filtros mínimos: CPF/CNPJ do Fornecedor
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param cpfCnpj CPF/CNPJ do Fornecedor (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contratoPorCpfCnpjUsingGETAsync(String chaveApiDados, String cpfCnpj, Integer pagina, final ApiCallback<List<ContratoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contratoPorCpfCnpjUsingGETValidateBeforeCall(chaveApiDados, cpfCnpj, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ContratoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contratoUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contratoUsingGETCall(String chaveApiDados, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/contratos/id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contratoUsingGETValidateBeforeCall(String chaveApiDados, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling contratoUsingGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling contratoUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = contratoUsingGETCall(chaveApiDados, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta um contrato do Poder Executivo Federal pelo id
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @return ContratoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContratoDTO contratoUsingGET(String chaveApiDados, Integer id) throws ApiException {
        ApiResponse<ContratoDTO> resp = contratoUsingGETWithHttpInfo(chaveApiDados, id);
        return resp.getData();
    }

    /**
     * Consulta um contrato do Poder Executivo Federal pelo id
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @return ApiResponse&lt;ContratoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContratoDTO> contratoUsingGETWithHttpInfo(String chaveApiDados, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = contratoUsingGETValidateBeforeCall(chaveApiDados, id, null, null);
        Type localVarReturnType = new TypeToken<ContratoDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta um contrato do Poder Executivo Federal pelo id (asynchronously)
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contratoUsingGETAsync(String chaveApiDados, Integer id, final ApiCallback<ContratoDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contratoUsingGETValidateBeforeCall(chaveApiDados, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContratoDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contratosPorNumeroUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param numero Número do contrato (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contratosPorNumeroUsingGETCall(String chaveApiDados, String numero, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/contratos/numero";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (numero != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("numero", numero));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contratosPorNumeroUsingGETValidateBeforeCall(String chaveApiDados, String numero, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling contratosPorNumeroUsingGET(Async)");
        }
        
        // verify the required parameter 'numero' is set
        if (numero == null) {
            throw new ApiException("Missing the required parameter 'numero' when calling contratosPorNumeroUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling contratosPorNumeroUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = contratosPorNumeroUsingGETCall(chaveApiDados, numero, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta um contrato do Poder Executivo Federal pelo número do contrato
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Número; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param numero Número do contrato (required)
     * @param pagina Página consultada (required)
     * @return List&lt;ContratoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ContratoDTO> contratosPorNumeroUsingGET(String chaveApiDados, String numero, Integer pagina) throws ApiException {
        ApiResponse<List<ContratoDTO>> resp = contratosPorNumeroUsingGETWithHttpInfo(chaveApiDados, numero, pagina);
        return resp.getData();
    }

    /**
     * Consulta um contrato do Poder Executivo Federal pelo número do contrato
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Número; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param numero Número do contrato (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;ContratoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ContratoDTO>> contratosPorNumeroUsingGETWithHttpInfo(String chaveApiDados, String numero, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = contratosPorNumeroUsingGETValidateBeforeCall(chaveApiDados, numero, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<ContratoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta um contrato do Poder Executivo Federal pelo número do contrato (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Número; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param numero Número do contrato (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contratosPorNumeroUsingGETAsync(String chaveApiDados, String numero, Integer pagina, final ApiCallback<List<ContratoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contratosPorNumeroUsingGETValidateBeforeCall(chaveApiDados, numero, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ContratoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contratosPorProcessoUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param processo Número do processo (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contratosPorProcessoUsingGETCall(String chaveApiDados, Integer pagina, String processo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/contratos/processo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));
        if (processo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("processo", processo));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contratosPorProcessoUsingGETValidateBeforeCall(String chaveApiDados, Integer pagina, String processo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling contratosPorProcessoUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling contratosPorProcessoUsingGET(Async)");
        }
        
        // verify the required parameter 'processo' is set
        if (processo == null) {
            throw new ApiException("Missing the required parameter 'processo' when calling contratosPorProcessoUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = contratosPorProcessoUsingGETCall(chaveApiDados, pagina, processo, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta um contrato do Poder Executivo Federal pelo número do processo
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Processo; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param processo Número do processo (required)
     * @return List&lt;ContratoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ContratoDTO> contratosPorProcessoUsingGET(String chaveApiDados, Integer pagina, String processo) throws ApiException {
        ApiResponse<List<ContratoDTO>> resp = contratosPorProcessoUsingGETWithHttpInfo(chaveApiDados, pagina, processo);
        return resp.getData();
    }

    /**
     * Consulta um contrato do Poder Executivo Federal pelo número do processo
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Processo; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param processo Número do processo (required)
     * @return ApiResponse&lt;List&lt;ContratoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ContratoDTO>> contratosPorProcessoUsingGETWithHttpInfo(String chaveApiDados, Integer pagina, String processo) throws ApiException {
        com.squareup.okhttp.Call call = contratosPorProcessoUsingGETValidateBeforeCall(chaveApiDados, pagina, processo, null, null);
        Type localVarReturnType = new TypeToken<List<ContratoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta um contrato do Poder Executivo Federal pelo número do processo (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Processo; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param processo Número do processo (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contratosPorProcessoUsingGETAsync(String chaveApiDados, Integer pagina, String processo, final ApiCallback<List<ContratoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contratosPorProcessoUsingGETValidateBeforeCall(chaveApiDados, pagina, processo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ContratoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contratosUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoOrgao &lt;a href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiafiUsingGET&#39; &gt;Código do Órgão (SIAFI)&lt;/a&gt; (required)
     * @param pagina Página consultada (required)
     * @param dataFinal Data vigência fim (DD/MM/AAAA) (optional)
     * @param dataInicial Data vigência início (DD/MM/AAAA) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contratosUsingGETCall(String chaveApiDados, String codigoOrgao, Integer pagina, String dataFinal, String dataInicial, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/contratos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoOrgao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoOrgao", codigoOrgao));
        if (dataFinal != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dataFinal", dataFinal));
        if (dataInicial != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dataInicial", dataInicial));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contratosUsingGETValidateBeforeCall(String chaveApiDados, String codigoOrgao, Integer pagina, String dataFinal, String dataInicial, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling contratosUsingGET(Async)");
        }
        
        // verify the required parameter 'codigoOrgao' is set
        if (codigoOrgao == null) {
            throw new ApiException("Missing the required parameter 'codigoOrgao' when calling contratosUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling contratosUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = contratosUsingGETCall(chaveApiDados, codigoOrgao, pagina, dataFinal, dataInicial, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os todos contratos do Poder Executivo Federal
     * Filtros mínimos:  Página (padrão &#x3D; 1); Código do Órgão (SIAFI); Data vigência início; Data vigência fim
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoOrgao &lt;a href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiafiUsingGET&#39; &gt;Código do Órgão (SIAFI)&lt;/a&gt; (required)
     * @param pagina Página consultada (required)
     * @param dataFinal Data vigência fim (DD/MM/AAAA) (optional)
     * @param dataInicial Data vigência início (DD/MM/AAAA) (optional)
     * @return List&lt;ContratoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ContratoDTO> contratosUsingGET(String chaveApiDados, String codigoOrgao, Integer pagina, String dataFinal, String dataInicial) throws ApiException {
        ApiResponse<List<ContratoDTO>> resp = contratosUsingGETWithHttpInfo(chaveApiDados, codigoOrgao, pagina, dataFinal, dataInicial);
        return resp.getData();
    }

    /**
     * Consulta os todos contratos do Poder Executivo Federal
     * Filtros mínimos:  Página (padrão &#x3D; 1); Código do Órgão (SIAFI); Data vigência início; Data vigência fim
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoOrgao &lt;a href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiafiUsingGET&#39; &gt;Código do Órgão (SIAFI)&lt;/a&gt; (required)
     * @param pagina Página consultada (required)
     * @param dataFinal Data vigência fim (DD/MM/AAAA) (optional)
     * @param dataInicial Data vigência início (DD/MM/AAAA) (optional)
     * @return ApiResponse&lt;List&lt;ContratoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ContratoDTO>> contratosUsingGETWithHttpInfo(String chaveApiDados, String codigoOrgao, Integer pagina, String dataFinal, String dataInicial) throws ApiException {
        com.squareup.okhttp.Call call = contratosUsingGETValidateBeforeCall(chaveApiDados, codigoOrgao, pagina, dataFinal, dataInicial, null, null);
        Type localVarReturnType = new TypeToken<List<ContratoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os todos contratos do Poder Executivo Federal (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1); Código do Órgão (SIAFI); Data vigência início; Data vigência fim
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param codigoOrgao &lt;a href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiafiUsingGET&#39; &gt;Código do Órgão (SIAFI)&lt;/a&gt; (required)
     * @param pagina Página consultada (required)
     * @param dataFinal Data vigência fim (DD/MM/AAAA) (optional)
     * @param dataInicial Data vigência início (DD/MM/AAAA) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contratosUsingGETAsync(String chaveApiDados, String codigoOrgao, Integer pagina, String dataFinal, String dataInicial, final ApiCallback<List<ContratoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contratosUsingGETValidateBeforeCall(chaveApiDados, codigoOrgao, pagina, dataFinal, dataInicial, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ContratoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for documentosRelacionadosAoContratoUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call documentosRelacionadosAoContratoUsingGETCall(String chaveApiDados, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/contratos/documentos-relacionados";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call documentosRelacionadosAoContratoUsingGETValidateBeforeCall(String chaveApiDados, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling documentosRelacionadosAoContratoUsingGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling documentosRelacionadosAoContratoUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = documentosRelacionadosAoContratoUsingGETCall(chaveApiDados, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os documentos relacionados a um contrato pelo id do contrato
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @return List&lt;EmpenhoComprasDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EmpenhoComprasDTO> documentosRelacionadosAoContratoUsingGET(String chaveApiDados, Integer id) throws ApiException {
        ApiResponse<List<EmpenhoComprasDTO>> resp = documentosRelacionadosAoContratoUsingGETWithHttpInfo(chaveApiDados, id);
        return resp.getData();
    }

    /**
     * Consulta os documentos relacionados a um contrato pelo id do contrato
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @return ApiResponse&lt;List&lt;EmpenhoComprasDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EmpenhoComprasDTO>> documentosRelacionadosAoContratoUsingGETWithHttpInfo(String chaveApiDados, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = documentosRelacionadosAoContratoUsingGETValidateBeforeCall(chaveApiDados, id, null, null);
        Type localVarReturnType = new TypeToken<List<EmpenhoComprasDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os documentos relacionados a um contrato pelo id do contrato (asynchronously)
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call documentosRelacionadosAoContratoUsingGETAsync(String chaveApiDados, Integer id, final ApiCallback<List<EmpenhoComprasDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = documentosRelacionadosAoContratoUsingGETValidateBeforeCall(chaveApiDados, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EmpenhoComprasDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for itensContratadosUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call itensContratadosUsingGETCall(String chaveApiDados, Integer id, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/contratos/itens-contratados";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call itensContratadosUsingGETValidateBeforeCall(String chaveApiDados, Integer id, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling itensContratadosUsingGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling itensContratadosUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling itensContratadosUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = itensContratadosUsingGETCall(chaveApiDados, id, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os itens contratados pelo id do contrato
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @param pagina Página consultada (required)
     * @return List&lt;ItemContratadoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ItemContratadoDTO> itensContratadosUsingGET(String chaveApiDados, Integer id, Integer pagina) throws ApiException {
        ApiResponse<List<ItemContratadoDTO>> resp = itensContratadosUsingGETWithHttpInfo(chaveApiDados, id, pagina);
        return resp.getData();
    }

    /**
     * Consulta os itens contratados pelo id do contrato
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;ItemContratadoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ItemContratadoDTO>> itensContratadosUsingGETWithHttpInfo(String chaveApiDados, Integer id, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = itensContratadosUsingGETValidateBeforeCall(chaveApiDados, id, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<ItemContratadoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os itens contratados pelo id do contrato (asynchronously)
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call itensContratadosUsingGETAsync(String chaveApiDados, Integer id, Integer pagina, final ApiCallback<List<ItemContratadoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = itensContratadosUsingGETValidateBeforeCall(chaveApiDados, id, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ItemContratadoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for termosAditivosDoContratoUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call termosAditivosDoContratoUsingGETCall(String chaveApiDados, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/contratos/termo-aditivo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call termosAditivosDoContratoUsingGETValidateBeforeCall(String chaveApiDados, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling termosAditivosDoContratoUsingGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling termosAditivosDoContratoUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = termosAditivosDoContratoUsingGETCall(chaveApiDados, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os termos aditivos do contrato pelo id do contrato
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @return List&lt;TermoAditivoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TermoAditivoDTO> termosAditivosDoContratoUsingGET(String chaveApiDados, Integer id) throws ApiException {
        ApiResponse<List<TermoAditivoDTO>> resp = termosAditivosDoContratoUsingGETWithHttpInfo(chaveApiDados, id);
        return resp.getData();
    }

    /**
     * Consulta os termos aditivos do contrato pelo id do contrato
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @return ApiResponse&lt;List&lt;TermoAditivoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TermoAditivoDTO>> termosAditivosDoContratoUsingGETWithHttpInfo(String chaveApiDados, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = termosAditivosDoContratoUsingGETValidateBeforeCall(chaveApiDados, id, null, null);
        Type localVarReturnType = new TypeToken<List<TermoAditivoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os termos aditivos do contrato pelo id do contrato (asynchronously)
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call termosAditivosDoContratoUsingGETAsync(String chaveApiDados, Integer id, final ApiCallback<List<TermoAditivoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = termosAditivosDoContratoUsingGETValidateBeforeCall(chaveApiDados, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TermoAditivoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
