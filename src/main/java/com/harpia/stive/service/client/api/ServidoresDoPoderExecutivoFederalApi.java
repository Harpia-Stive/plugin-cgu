/*
 * API REST do Portal da Transparência do Governo Federal
 * API de serviços do Portal da Transparência do Governo Federal
 *
 * OpenAPI spec version: 1.0
 * Contact: listaapitransparencia@cgu.gov.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.harpia.stive.service.client.api;

import com.google.gson.reflect.TypeToken;
import com.harpia.stive.domain.model.CadastroServidorDTO;
import com.harpia.stive.domain.model.FuncaoServidorDTO;
import com.harpia.stive.domain.model.PEPDTO;
import com.harpia.stive.domain.model.ServidorPorOrgaoDTO;
import com.harpia.stive.domain.model.ServidorRemuneracaoDTO;
import com.harpia.stive.service.client.ApiCallback;
import com.harpia.stive.service.client.ApiClient;
import com.harpia.stive.service.client.ApiException;
import com.harpia.stive.service.client.ApiResponse;
import com.harpia.stive.service.client.Configuration;
import com.harpia.stive.service.client.Pair;
import com.harpia.stive.service.client.ProgressRequestBody;
import com.harpia.stive.service.client.ProgressResponseBody;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServidoresDoPoderExecutivoFederalApi {

    private ApiClient apiClient;

    public ServidoresDoPoderExecutivoFederalApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServidoresDoPoderExecutivoFederalApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for dadosPEPsUsingGET
     *
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse
     * http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email
     * (required)
     * @param pagina Página consultada (required)
     * @param cpf CPF do Servidor (optional)
     * @param datFimExercicioAte Data fim do exercício, período final
     * (DD/MM/AAAA) (optional)
     * @param datInicioExercicioAte Data início do exercício, período final
     * (DD/MM/AAAA) (optional)
     * @param dataFimExercicioDe Data fim do exercício, período inicial
     * (DD/MM/AAAA) (optional)
     * @param dataInicioExercicioDe Data início do exercício, período inicial
     * (DD/MM/AAAA) (optional)
     * @param descricaoFuncao Descrição da Função (optional)
     * @param nome Nome do Servidor (optional)
     * @param orgaoServidorLotacao &lt;a
     * href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiapeUsingGET&#39;
     * &gt;Código Órgão Lotação (SIAPE)&lt;/a&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call dadosPEPsUsingGETCall(String chaveApiDados, Integer pagina, String cpf, String datFimExercicioAte, String datInicioExercicioAte, String dataFimExercicioDe, String dataInicioExercicioDe, String descricaoFuncao, String nome, String orgaoServidorLotacao, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/peps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cpf != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("cpf", cpf));
        }
        if (datFimExercicioAte != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("datFimExercicioAte", datFimExercicioAte));
        }
        if (datInicioExercicioAte != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("datInicioExercicioAte", datInicioExercicioAte));
        }
        if (dataFimExercicioDe != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("dataFimExercicioDe", dataFimExercicioDe));
        }
        if (dataInicioExercicioDe != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("dataInicioExercicioDe", dataInicioExercicioDe));
        }
        if (descricaoFuncao != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("descricaoFuncao", descricaoFuncao));
        }
        if (nome != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("nome", nome));
        }
        if (orgaoServidorLotacao != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("orgaoServidorLotacao", orgaoServidorLotacao));
        }
        if (pagina != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null) {
            localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call dadosPEPsUsingGETValidateBeforeCall(String chaveApiDados, Integer pagina, String cpf, String datFimExercicioAte, String datInicioExercicioAte, String dataFimExercicioDe, String dataInicioExercicioDe, String descricaoFuncao, String nome, String orgaoServidorLotacao, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling dadosPEPsUsingGET(Async)");
        }

        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling dadosPEPsUsingGET(Async)");
        }

        com.squareup.okhttp.Call call = dadosPEPsUsingGETCall(chaveApiDados, pagina, cpf, datFimExercicioAte, datInicioExercicioAte, dataFimExercicioDe, dataInicioExercicioDe, descricaoFuncao, nome, orgaoServidorLotacao, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta PEPs
     *
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse
     * http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email
     * (required)
     * @param pagina Página consultada (required)
     * @param cpf CPF do Servidor (optional)
     * @param datFimExercicioAte Data fim do exercício, período final
     * (DD/MM/AAAA) (optional)
     * @param datInicioExercicioAte Data início do exercício, período final
     * (DD/MM/AAAA) (optional)
     * @param dataFimExercicioDe Data fim do exercício, período inicial
     * (DD/MM/AAAA) (optional)
     * @param dataInicioExercicioDe Data início do exercício, período inicial
     * (DD/MM/AAAA) (optional)
     * @param descricaoFuncao Descrição da Função (optional)
     * @param nome Nome do Servidor (optional)
     * @param orgaoServidorLotacao &lt;a
     * href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiapeUsingGET&#39;
     * &gt;Código Órgão Lotação (SIAPE)&lt;/a&gt; (optional)
     * @return List&lt;PEPDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     * deserialize the response body
     */
    public List<PEPDTO> dadosPEPsUsingGET(String chaveApiDados, Integer pagina, String cpf,
            String datFimExercicioAte, String datInicioExercicioAte, String dataFimExercicioDe,
            String dataInicioExercicioDe, String descricaoFuncao, String nome, String orgaoServidorLotacao) throws ApiException {
        
        ApiResponse<List<PEPDTO>> resp = dadosPEPsUsingGETWithHttpInfo(chaveApiDados, pagina, cpf, 
                datFimExercicioAte, datInicioExercicioAte, dataFimExercicioDe, dataInicioExercicioDe, descricaoFuncao, nome, orgaoServidorLotacao);

        return resp.getData();
    }

    /**
     * Consulta PEPs
     *
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse
     * http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email
     * (required)
     * @param pagina Página consultada (required)
     * @param cpf CPF do Servidor (optional)
     * @param datFimExercicioAte Data fim do exercício, período final
     * (DD/MM/AAAA) (optional)
     * @param datInicioExercicioAte Data início do exercício, período final
     * (DD/MM/AAAA) (optional)
     * @param dataFimExercicioDe Data fim do exercício, período inicial
     * (DD/MM/AAAA) (optional)
     * @param dataInicioExercicioDe Data início do exercício, período inicial
     * (DD/MM/AAAA) (optional)
     * @param descricaoFuncao Descrição da Função (optional)
     * @param nome Nome do Servidor (optional)
     * @param orgaoServidorLotacao &lt;a
     * href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiapeUsingGET&#39;
     * &gt;Código Órgão Lotação (SIAPE)&lt;/a&gt; (optional)
     * @return ApiResponse&lt;List&lt;PEPDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     * deserialize the response body
     */
    public ApiResponse<List<PEPDTO>> dadosPEPsUsingGETWithHttpInfo(String chaveApiDados, Integer pagina,
            String cpf, String datFimExercicioAte, String datInicioExercicioAte, String dataFimExercicioDe,
            String dataInicioExercicioDe, String descricaoFuncao, String nome, String orgaoServidorLotacao) throws ApiException {
        com.squareup.okhttp.Call call = dadosPEPsUsingGETValidateBeforeCall(chaveApiDados, pagina, cpf, datFimExercicioAte, datInicioExercicioAte, dataFimExercicioDe, dataInicioExercicioDe, descricaoFuncao, nome, orgaoServidorLotacao, null, null);
        Type localVarReturnType = new TypeToken<List<PEPDTO>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta PEPs (asynchronously)
     *
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse
     * http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email
     * (required)
     * @param pagina Página consultada (required)
     * @param cpf CPF do Servidor (optional)
     * @param datFimExercicioAte Data fim do exercício, período final
     * (DD/MM/AAAA) (optional)
     * @param datInicioExercicioAte Data início do exercício, período final
     * (DD/MM/AAAA) (optional)
     * @param dataFimExercicioDe Data fim do exercício, período inicial
     * (DD/MM/AAAA) (optional)
     * @param dataInicioExercicioDe Data início do exercício, período inicial
     * (DD/MM/AAAA) (optional)
     * @param descricaoFuncao Descrição da Função (optional)
     * @param nome Nome do Servidor (optional)
     * @param orgaoServidorLotacao &lt;a
     * href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiapeUsingGET&#39;
     * &gt;Código Órgão Lotação (SIAPE)&lt;/a&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing
     * the request body object
     */
    public com.squareup.okhttp.Call dadosPEPsUsingGETAsync(String chaveApiDados, Integer pagina, String cpf, 
            String datFimExercicioAte, String datInicioExercicioAte, String dataFimExercicioDe, String dataInicioExercicioDe, 
            String descricaoFuncao, String nome, String orgaoServidorLotacao, final ApiCallback<List<PEPDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = dadosPEPsUsingGETValidateBeforeCall(chaveApiDados, pagina, cpf, datFimExercicioAte, datInicioExercicioAte, dataFimExercicioDe, dataInicioExercicioDe, descricaoFuncao, nome, orgaoServidorLotacao, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PEPDTO>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for dadosServidoresUsingGET
     *
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse
     * http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email
     * (required)
     * @param pagina Página consultada (required)
     * @param codigoFuncaoCargo &lt;a
     * href&#x3D;&#39;/swagger-ui.html#!/Servidores32do32Poder32Executivo32Federal/listarFuncoesECargosUsingGET&#39;
     * &gt;Código da Função ou Cargo de Confiança&lt;/a&gt; (optional)
     * @param cpf CPF do Servidor (optional)
     * @param nome Nome do Servidor (optional)
     * @param orgaoServidorExercicio &lt;a
     * href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiapeUsingGET&#39;
     * &gt;Código Órgão Exercício (SIAPE)&lt;/a&gt; (optional)
     * @param orgaoServidorLotacao &lt;a
     * href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiapeUsingGET&#39;
     * &gt;Código Órgão Lotação (SIAPE)&lt;/a&gt; (optional)
     * @param situacaoServidor Situação do Servidor (Ativo&#x3D;1,
     * Inativo&#x3D;2 ou Pensionista&#x3D;3) (optional)
     * @param tipoServidor Tipo do Servidor (Civil&#x3D;1 ou Militar&#x3D;2)
     * (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call dadosServidoresUsingGETCall(String chaveApiDados, Integer pagina, 
            String codigoFuncaoCargo, String cpf, String nome, String orgaoServidorExercicio, 
            String orgaoServidorLotacao, Integer situacaoServidor, Integer tipoServidor, 
            final ProgressResponseBody.ProgressListener progressListener, 
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/servidores";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoFuncaoCargo != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("codigoFuncaoCargo", codigoFuncaoCargo));
        }
        if (cpf != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("cpf", cpf));
        }
        if (nome != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("nome", nome));
        }
        if (orgaoServidorExercicio != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("orgaoServidorExercicio", orgaoServidorExercicio));
        }
        if (orgaoServidorLotacao != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("orgaoServidorLotacao", orgaoServidorLotacao));
        }
        if (pagina != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));
        }
        if (situacaoServidor != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("situacaoServidor", situacaoServidor));
        }
        if (tipoServidor != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("tipoServidor", tipoServidor));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null) {
            localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call dadosServidoresUsingGETValidateBeforeCall(String chaveApiDados, 
            Integer pagina, String codigoFuncaoCargo, String cpf, String nome, 
            String orgaoServidorExercicio, String orgaoServidorLotacao, Integer situacaoServidor, 
            Integer tipoServidor, final ProgressResponseBody.ProgressListener progressListener, 
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling dadosServidoresUsingGET(Async)");
        }

        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling dadosServidoresUsingGET(Async)");
        }

        com.squareup.okhttp.Call call = dadosServidoresUsingGETCall(chaveApiDados, pagina, codigoFuncaoCargo, cpf, nome, orgaoServidorExercicio, orgaoServidorLotacao, situacaoServidor, tipoServidor, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta todos servidores do Poder Executivo Federal Filtros mínimos:
     * Página (padrão &#x3D; 1); &lt;a
     * href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiapeUsingGET&#39;
     * &gt;Código Órgão Lotação (SIAPE)&lt;/a&gt; OU &lt;a
     * href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiapeUsingGET&#39;
     * &gt;Código Órgão Exercício (SIAPE)&lt;/a&gt; OU CPF;
     *
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse
     * http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email
     * (required)
     * @param pagina Página consultada (required)
     * @param codigoFuncaoCargo &lt;a
     * href&#x3D;&#39;/swagger-ui.html#!/Servidores32do32Poder32Executivo32Federal/listarFuncoesECargosUsingGET&#39;
     * &gt;Código da Função ou Cargo de Confiança&lt;/a&gt; (optional)
     * @param cpf CPF do Servidor (optional)
     * @param nome Nome do Servidor (optional)
     * @param orgaoServidorExercicio &lt;a
     * href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiapeUsingGET&#39;
     * &gt;Código Órgão Exercício (SIAPE)&lt;/a&gt; (optional)
     * @param orgaoServidorLotacao &lt;a
     * href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiapeUsingGET&#39;
     * &gt;Código Órgão Lotação (SIAPE)&lt;/a&gt; (optional)
     * @param situacaoServidor Situação do Servidor (Ativo&#x3D;1,
     * Inativo&#x3D;2 ou Pensionista&#x3D;3) (optional)
     * @param tipoServidor Tipo do Servidor (Civil&#x3D;1 ou Militar&#x3D;2)
     * (optional)
     * @return List&lt;CadastroServidorDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     * deserialize the response body
     */
    public List<CadastroServidorDTO> dadosServidoresUsingGET(String chaveApiDados, Integer pagina, 
            String codigoFuncaoCargo, String cpf, String nome, String orgaoServidorExercicio, 
            String orgaoServidorLotacao, Integer situacaoServidor, Integer tipoServidor) throws ApiException {
        ApiResponse<List<CadastroServidorDTO>> resp = dadosServidoresUsingGETWithHttpInfo(chaveApiDados, pagina, codigoFuncaoCargo, cpf, nome, orgaoServidorExercicio, orgaoServidorLotacao, situacaoServidor, tipoServidor);
        return resp.getData();
    }

    /**
     * Consulta todos servidores do Poder Executivo Federal Filtros mínimos:
     * Página (padrão &#x3D; 1); &lt;a
     * href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiapeUsingGET&#39;
     * &gt;Código Órgão Lotação (SIAPE)&lt;/a&gt; OU &lt;a
     * href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiapeUsingGET&#39;
     * &gt;Código Órgão Exercício (SIAPE)&lt;/a&gt; OU CPF;
     *
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse
     * http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email
     * (required)
     * @param pagina Página consultada (required)
     * @param codigoFuncaoCargo &lt;a
     * href&#x3D;&#39;/swagger-ui.html#!/Servidores32do32Poder32Executivo32Federal/listarFuncoesECargosUsingGET&#39;
     * &gt;Código da Função ou Cargo de Confiança&lt;/a&gt; (optional)
     * @param cpf CPF do Servidor (optional)
     * @param nome Nome do Servidor (optional)
     * @param orgaoServidorExercicio &lt;a
     * href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiapeUsingGET&#39;
     * &gt;Código Órgão Exercício (SIAPE)&lt;/a&gt; (optional)
     * @param orgaoServidorLotacao &lt;a
     * href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiapeUsingGET&#39;
     * &gt;Código Órgão Lotação (SIAPE)&lt;/a&gt; (optional)
     * @param situacaoServidor Situação do Servidor (Ativo&#x3D;1,
     * Inativo&#x3D;2 ou Pensionista&#x3D;3) (optional)
     * @param tipoServidor Tipo do Servidor (Civil&#x3D;1 ou Militar&#x3D;2)
     * (optional)
     * @return ApiResponse&lt;List&lt;CadastroServidorDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     * deserialize the response body
     */
    public ApiResponse<List<CadastroServidorDTO>> dadosServidoresUsingGETWithHttpInfo(String chaveApiDados, Integer pagina, 
            String codigoFuncaoCargo, String cpf, String nome, String orgaoServidorExercicio, 
            String orgaoServidorLotacao, Integer situacaoServidor, Integer tipoServidor) throws ApiException {
        com.squareup.okhttp.Call call = dadosServidoresUsingGETValidateBeforeCall(chaveApiDados, pagina, codigoFuncaoCargo, cpf, nome, orgaoServidorExercicio, orgaoServidorLotacao, situacaoServidor, tipoServidor, null, null);
        Type localVarReturnType = new TypeToken<List<CadastroServidorDTO>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta todos servidores do Poder Executivo Federal (asynchronously)
     * Filtros mínimos: Página (padrão &#x3D; 1); &lt;a
     * href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiapeUsingGET&#39;
     * &gt;Código Órgão Lotação (SIAPE)&lt;/a&gt; OU &lt;a
     * href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiapeUsingGET&#39;
     * &gt;Código Órgão Exercício (SIAPE)&lt;/a&gt; OU CPF;
     *
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse
     * http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email
     * (required)
     * @param pagina Página consultada (required)
     * @param codigoFuncaoCargo &lt;a
     * href&#x3D;&#39;/swagger-ui.html#!/Servidores32do32Poder32Executivo32Federal/listarFuncoesECargosUsingGET&#39;
     * &gt;Código da Função ou Cargo de Confiança&lt;/a&gt; (optional)
     * @param cpf CPF do Servidor (optional)
     * @param nome Nome do Servidor (optional)
     * @param orgaoServidorExercicio &lt;a
     * href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiapeUsingGET&#39;
     * &gt;Código Órgão Exercício (SIAPE)&lt;/a&gt; (optional)
     * @param orgaoServidorLotacao &lt;a
     * href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiapeUsingGET&#39;
     * &gt;Código Órgão Lotação (SIAPE)&lt;/a&gt; (optional)
     * @param situacaoServidor Situação do Servidor (Ativo&#x3D;1,
     * Inativo&#x3D;2 ou Pensionista&#x3D;3) (optional)
     * @param tipoServidor Tipo do Servidor (Civil&#x3D;1 ou Militar&#x3D;2)
     * (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing
     * the request body object
     */
    public com.squareup.okhttp.Call dadosServidoresUsingGETAsync(String chaveApiDados, Integer pagina, 
            String codigoFuncaoCargo, String cpf, String nome, String orgaoServidorExercicio, 
            String orgaoServidorLotacao, Integer situacaoServidor, Integer tipoServidor,
            final ApiCallback<List<CadastroServidorDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = dadosServidoresUsingGETValidateBeforeCall(chaveApiDados, pagina, codigoFuncaoCargo, cpf, nome, orgaoServidorExercicio, orgaoServidorLotacao, situacaoServidor, tipoServidor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CadastroServidorDTO>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for listarFuncoesECargosUsingGET
     *
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse
     * http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email
     * (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listarFuncoesECargosUsingGETCall(String chaveApiDados, Integer pagina, 
            final ProgressResponseBody.ProgressListener progressListener, 
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/servidores/funcoes-e-cargos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pagina != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null) {
            localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listarFuncoesECargosUsingGETValidateBeforeCall(String chaveApiDados, Integer pagina, 
            final ProgressResponseBody.ProgressListener progressListener, 
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling listarFuncoesECargosUsingGET(Async)");
        }

        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling listarFuncoesECargosUsingGET(Async)");
        }

        com.squareup.okhttp.Call call = listarFuncoesECargosUsingGETCall(chaveApiDados, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Código da Função ou Cargo de Confiança Filtros mínimos: Página (padrão
     * &#x3D; 1);
     *
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse
     * http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email
     * (required)
     * @param pagina Página consultada (required)
     * @return List&lt;FuncaoServidorDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     * deserialize the response body
     */
    public List<FuncaoServidorDTO> listarFuncoesECargosUsingGET(String chaveApiDados, Integer pagina) throws ApiException {
        ApiResponse<List<FuncaoServidorDTO>> resp = listarFuncoesECargosUsingGETWithHttpInfo(chaveApiDados, pagina);
        return resp.getData();
    }

    /**
     * Código da Função ou Cargo de Confiança Filtros mínimos: Página (padrão
     * &#x3D; 1);
     *
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse
     * http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email
     * (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;FuncaoServidorDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     * deserialize the response body
     */
    public ApiResponse<List<FuncaoServidorDTO>> listarFuncoesECargosUsingGETWithHttpInfo(String chaveApiDados, 
            Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = listarFuncoesECargosUsingGETValidateBeforeCall(chaveApiDados, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<FuncaoServidorDTO>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Código da Função ou Cargo de Confiança (asynchronously) Filtros mínimos:
     * Página (padrão &#x3D; 1);
     *
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse
     * http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email
     * (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing
     * the request body object
     */
    public com.squareup.okhttp.Call listarFuncoesECargosUsingGETAsync(String chaveApiDados, Integer pagina, 
            final ApiCallback<List<FuncaoServidorDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listarFuncoesECargosUsingGETValidateBeforeCall(chaveApiDados, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FuncaoServidorDTO>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for remuneracoesServidoresUsingGET
     *
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse
     * http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email
     * (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param cpf CPF do Servidor (optional)
     * @param id idServidorAposentadoPensionista (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call remuneracoesServidoresUsingGETCall(String chaveApiDados, Integer mesAno, 
            Integer pagina, String cpf, Integer id, final ProgressResponseBody.ProgressListener progressListener, 
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/servidores/remuneracao";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cpf != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("cpf", cpf));
        }
        if (id != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        }
        if (mesAno != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("mesAno", mesAno));
        }
        if (pagina != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null) {
            localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call remuneracoesServidoresUsingGETValidateBeforeCall(String chaveApiDados, 
            Integer mesAno, Integer pagina, String cpf, Integer id, 
            final ProgressResponseBody.ProgressListener progressListener, 
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling remuneracoesServidoresUsingGET(Async)");
        }

        // verify the required parameter 'mesAno' is set
        if (mesAno == null) {
            throw new ApiException("Missing the required parameter 'mesAno' when calling remuneracoesServidoresUsingGET(Async)");
        }

        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling remuneracoesServidoresUsingGET(Async)");
        }

        com.squareup.okhttp.Call call = remuneracoesServidoresUsingGETCall(chaveApiDados, mesAno, pagina, cpf, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta remunerações de um servidor do Poder Executivo Federal pelo CPF
     * ou idServidorAposentadoPensionista e mês/ano Filtros mínimos: Página
     * (padrão &#x3D; 1); CPF; Ano/Mês (YYYYMM); ou Página (padrão &#x3D; 1); Id
     * Servidor; Ano/Mês (YYYYMM);
     *
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse
     * http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email
     * (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param cpf CPF do Servidor (optional)
     * @param id idServidorAposentadoPensionista (optional)
     * @return List&lt;ServidorRemuneracaoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     * deserialize the response body
     */
    public List<ServidorRemuneracaoDTO> remuneracoesServidoresUsingGET(String chaveApiDados, Integer mesAno, Integer pagina, 
            String cpf, Integer id) throws ApiException {
        ApiResponse<List<ServidorRemuneracaoDTO>> resp = remuneracoesServidoresUsingGETWithHttpInfo(chaveApiDados, mesAno, pagina, cpf, id);
        return resp.getData();
    }

    /**
     * Consulta remunerações de um servidor do Poder Executivo Federal pelo CPF
     * ou idServidorAposentadoPensionista e mês/ano Filtros mínimos: Página
     * (padrão &#x3D; 1); CPF; Ano/Mês (YYYYMM); ou Página (padrão &#x3D; 1); Id
     * Servidor; Ano/Mês (YYYYMM);
     *
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse
     * http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email
     * (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param cpf CPF do Servidor (optional)
     * @param id idServidorAposentadoPensionista (optional)
     * @return ApiResponse&lt;List&lt;ServidorRemuneracaoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     * deserialize the response body
     */
    public ApiResponse<List<ServidorRemuneracaoDTO>> remuneracoesServidoresUsingGETWithHttpInfo(String chaveApiDados, 
            Integer mesAno, Integer pagina, String cpf, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = remuneracoesServidoresUsingGETValidateBeforeCall(chaveApiDados, mesAno, pagina, cpf, id, null, null);
        Type localVarReturnType = new TypeToken<List<ServidorRemuneracaoDTO>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta remunerações de um servidor do Poder Executivo Federal pelo CPF
     * ou idServidorAposentadoPensionista e mês/ano (asynchronously) Filtros
     * mínimos: Página (padrão &#x3D; 1); CPF; Ano/Mês (YYYYMM); ou Página
     * (padrão &#x3D; 1); Id Servidor; Ano/Mês (YYYYMM);
     *
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse
     * http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email
     * (required)
     * @param mesAno Mês e Ano de referência (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param cpf CPF do Servidor (optional)
     * @param id idServidorAposentadoPensionista (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing
     * the request body object
     */
    public com.squareup.okhttp.Call remuneracoesServidoresUsingGETAsync(String chaveApiDados, Integer mesAno, Integer pagina, 
            String cpf, Integer id, final ApiCallback<List<ServidorRemuneracaoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = remuneracoesServidoresUsingGETValidateBeforeCall(chaveApiDados, mesAno, pagina, cpf, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ServidorRemuneracaoDTO>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for servidorAgregadoPorOrgaoUsingGET
     *
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse
     * http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email
     * (required)
     * @param pagina Página consultada (required)
     * @param licenca Licença (Sim: 1; Não: 0) (optional)
     * @param orgaoExercicio &lt;a
     * href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiapeUsingGET&#39;
     * &gt;Código Órgão Exercício (SIAPE)&lt;/a&gt; (optional)
     * @param orgaoLotacao &lt;a
     * href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiapeUsingGET&#39;
     * &gt;Código Órgão Lotação (SIAPE)&lt;/a&gt; (optional)
     * @param tipoServidor Tipo servidor (Civil: 1; Militar: 2) (optional)
     * @param tipoVinculo Tipo vínculo (Função: 1; Cargo: 2; Outros: 3;
     * Militares: 4 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call servidorAgregadoPorOrgaoUsingGETCall(String chaveApiDados, Integer pagina, Integer licenca, 
            String orgaoExercicio, String orgaoLotacao, Integer tipoServidor, Integer tipoVinculo, 
            final ProgressResponseBody.ProgressListener progressListener, 
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/servidores/por-orgao";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (licenca != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("licenca", licenca));
        }
        if (orgaoExercicio != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("orgaoExercicio", orgaoExercicio));
        }
        if (orgaoLotacao != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("orgaoLotacao", orgaoLotacao));
        }
        if (pagina != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));
        }
        if (tipoServidor != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("tipoServidor", tipoServidor));
        }
        if (tipoVinculo != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("tipoVinculo", tipoVinculo));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null) {
            localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call servidorAgregadoPorOrgaoUsingGETValidateBeforeCall(String chaveApiDados, Integer pagina, 
            Integer licenca, String orgaoExercicio, String orgaoLotacao, Integer tipoServidor, Integer tipoVinculo, 
            final ProgressResponseBody.ProgressListener progressListener, 
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling servidorAgregadoPorOrgaoUsingGET(Async)");
        }

        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling servidorAgregadoPorOrgaoUsingGET(Async)");
        }

        com.squareup.okhttp.Call call = servidorAgregadoPorOrgaoUsingGETCall(chaveApiDados, pagina, licenca, orgaoExercicio, orgaoLotacao, tipoServidor, tipoVinculo, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta de servidores agregados por órgão Filtros mínimos: Página
     * (padrão &#x3D; 1);
     *
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse
     * http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email
     * (required)
     * @param pagina Página consultada (required)
     * @param licenca Licença (Sim: 1; Não: 0) (optional)
     * @param orgaoExercicio &lt;a
     * href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiapeUsingGET&#39;
     * &gt;Código Órgão Exercício (SIAPE)&lt;/a&gt; (optional)
     * @param orgaoLotacao &lt;a
     * href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiapeUsingGET&#39;
     * &gt;Código Órgão Lotação (SIAPE)&lt;/a&gt; (optional)
     * @param tipoServidor Tipo servidor (Civil: 1; Militar: 2) (optional)
     * @param tipoVinculo Tipo vínculo (Função: 1; Cargo: 2; Outros: 3;
     * Militares: 4 (optional)
     * @return List&lt;ServidorPorOrgaoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     * deserialize the response body
     */
    public List<ServidorPorOrgaoDTO> servidorAgregadoPorOrgaoUsingGET(String chaveApiDados, Integer pagina, 
            Integer licenca, String orgaoExercicio, String orgaoLotacao, Integer tipoServidor, 
            Integer tipoVinculo) throws ApiException {
        ApiResponse<List<ServidorPorOrgaoDTO>> resp = servidorAgregadoPorOrgaoUsingGETWithHttpInfo(chaveApiDados, pagina, licenca, orgaoExercicio, orgaoLotacao, tipoServidor, tipoVinculo);
        return resp.getData();
    }

    /**
     * Consulta de servidores agregados por órgão Filtros mínimos: Página
     * (padrão &#x3D; 1);
     *
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse
     * http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email
     * (required)
     * @param pagina Página consultada (required)
     * @param licenca Licença (Sim: 1; Não: 0) (optional)
     * @param orgaoExercicio &lt;a
     * href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiapeUsingGET&#39;
     * &gt;Código Órgão Exercício (SIAPE)&lt;/a&gt; (optional)
     * @param orgaoLotacao &lt;a
     * href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiapeUsingGET&#39;
     * &gt;Código Órgão Lotação (SIAPE)&lt;/a&gt; (optional)
     * @param tipoServidor Tipo servidor (Civil: 1; Militar: 2) (optional)
     * @param tipoVinculo Tipo vínculo (Função: 1; Cargo: 2; Outros: 3;
     * Militares: 4 (optional)
     * @return ApiResponse&lt;List&lt;ServidorPorOrgaoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     * deserialize the response body
     */
    public ApiResponse<List<ServidorPorOrgaoDTO>> servidorAgregadoPorOrgaoUsingGETWithHttpInfo(String chaveApiDados,
            Integer pagina, Integer licenca, String orgaoExercicio, String orgaoLotacao, Integer tipoServidor, 
            Integer tipoVinculo) throws ApiException {
        com.squareup.okhttp.Call call = servidorAgregadoPorOrgaoUsingGETValidateBeforeCall(chaveApiDados, pagina, licenca, orgaoExercicio, orgaoLotacao, tipoServidor, tipoVinculo, null, null);
        Type localVarReturnType = new TypeToken<List<ServidorPorOrgaoDTO>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta de servidores agregados por órgão (asynchronously) Filtros
     * mínimos: Página (padrão &#x3D; 1);
     *
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse
     * http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email
     * (required)
     * @param pagina Página consultada (required)
     * @param licenca Licença (Sim: 1; Não: 0) (optional)
     * @param orgaoExercicio &lt;a
     * href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiapeUsingGET&#39;
     * &gt;Código Órgão Exercício (SIAPE)&lt;/a&gt; (optional)
     * @param orgaoLotacao &lt;a
     * href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiapeUsingGET&#39;
     * &gt;Código Órgão Lotação (SIAPE)&lt;/a&gt; (optional)
     * @param tipoServidor Tipo servidor (Civil: 1; Militar: 2) (optional)
     * @param tipoVinculo Tipo vínculo (Função: 1; Cargo: 2; Outros: 3;
     * Militares: 4 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing
     * the request body object
     */
    public com.squareup.okhttp.Call servidorAgregadoPorOrgaoUsingGETAsync(String chaveApiDados, Integer pagina, Integer licenca, 
            String orgaoExercicio, String orgaoLotacao, Integer tipoServidor, Integer tipoVinculo, 
            final ApiCallback<List<ServidorPorOrgaoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = servidorAgregadoPorOrgaoUsingGETValidateBeforeCall(chaveApiDados, pagina, licenca, orgaoExercicio, orgaoLotacao, tipoServidor, tipoVinculo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ServidorPorOrgaoDTO>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for servidorUsingGET
     *
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse
     * http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email
     * (required)
     * @param id idServidorAposentadoPensionista (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call servidorUsingGETCall(String chaveApiDados, Integer id, 
            final ProgressResponseBody.ProgressListener progressListener, 
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/servidores/{id}"
                .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null) {
            localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[]{};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call servidorUsingGETValidateBeforeCall(String chaveApiDados, Integer id,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling servidorUsingGET(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling servidorUsingGET(Async)");
        }

        com.squareup.okhttp.Call call = servidorUsingGETCall(chaveApiDados, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta um servidor do Poder Executivo Federal pelo
     * idServidorAposentadoPensionista Filtros mínimos: ID do registro
     *
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse
     * http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email
     * (required)
     * @param id idServidorAposentadoPensionista (required)
     * @return CadastroServidorDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     * deserialize the response body
     */
    public CadastroServidorDTO servidorUsingGET(String chaveApiDados, Integer id) throws ApiException {
        ApiResponse<CadastroServidorDTO> resp = servidorUsingGETWithHttpInfo(chaveApiDados, id);
        return resp.getData();
    }

    /**
     * Consulta um servidor do Poder Executivo Federal pelo
     * idServidorAposentadoPensionista Filtros mínimos: ID do registro
     *
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse
     * http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email
     * (required)
     * @param id idServidorAposentadoPensionista (required)
     * @return ApiResponse&lt;CadastroServidorDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot
     * deserialize the response body
     */
    public ApiResponse<CadastroServidorDTO> servidorUsingGETWithHttpInfo(String chaveApiDados, 
            Integer id) throws ApiException {
        com.squareup.okhttp.Call call = servidorUsingGETValidateBeforeCall(chaveApiDados, id, null, null);
        Type localVarReturnType = new TypeToken<CadastroServidorDTO>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta um servidor do Poder Executivo Federal pelo
     * idServidorAposentadoPensionista (asynchronously) Filtros mínimos: ID do
     * registro
     *
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse
     * http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email
     * (required)
     * @param id idServidorAposentadoPensionista (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing
     * the request body object
     */
    public com.squareup.okhttp.Call servidorUsingGETAsync(String chaveApiDados, Integer id, 
            final ApiCallback<CadastroServidorDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = servidorUsingGETValidateBeforeCall(chaveApiDados, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CadastroServidorDTO>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
