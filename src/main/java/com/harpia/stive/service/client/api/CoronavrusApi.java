/*
 * API REST do Portal da Transparência do Governo Federal
 * API de serviços do Portal da Transparência do Governo Federal
 *
 * OpenAPI spec version: 1.0
 * Contact: listaapitransparencia@cgu.gov.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.harpia.stive.service.client.api;

import com.google.gson.reflect.TypeToken;
import com.harpia.stive.domain.model.MovimentacaoLiquidaCovidDTO;
import com.harpia.stive.domain.model.TransferenciaCoronavirusDTO;
import com.harpia.stive.service.client.ApiCallback;
import com.harpia.stive.service.client.ApiClient;
import com.harpia.stive.service.client.ApiException;
import com.harpia.stive.service.client.ApiResponse;
import com.harpia.stive.service.client.Configuration;
import com.harpia.stive.service.client.Pair;
import com.harpia.stive.service.client.ProgressRequestBody;
import com.harpia.stive.service.client.ProgressResponseBody;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CoronavrusApi {
    private ApiClient apiClient;

    public CoronavrusApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CoronavrusApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for buscarTransferenciasUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param mesAno Mês e Ano (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param codigoIbge Município (optional)
     * @param codigoOrgao Órgão (código SIAFI) (optional)
     * @param tipoTransferencia &lt;a href&#x3D;&#39;/swagger-ui.html#!/Despesas32P250blicas/listaTipoTransferenciaUsingGET&#39; &gt;ID do Tipo de Transferência&lt;/a&gt; (optional)
     * @param uf Sigla UF (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call buscarTransferenciasUsingGETCall(String chaveApiDados, Integer mesAno, Integer pagina, String codigoIbge, String codigoOrgao, Integer tipoTransferencia, String uf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/coronavirus/transferencias";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoIbge != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoIbge", codigoIbge));
        if (codigoOrgao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoOrgao", codigoOrgao));
        if (mesAno != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mesAno", mesAno));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));
        if (tipoTransferencia != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tipoTransferencia", tipoTransferencia));
        if (uf != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uf", uf));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call buscarTransferenciasUsingGETValidateBeforeCall(String chaveApiDados, Integer mesAno, Integer pagina, String codigoIbge, String codigoOrgao, Integer tipoTransferencia, String uf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling buscarTransferenciasUsingGET(Async)");
        }
        
        // verify the required parameter 'mesAno' is set
        if (mesAno == null) {
            throw new ApiException("Missing the required parameter 'mesAno' when calling buscarTransferenciasUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling buscarTransferenciasUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = buscarTransferenciasUsingGETCall(chaveApiDados, mesAno, pagina, codigoIbge, codigoOrgao, tipoTransferencia, uf, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta de transferências mensal das despesas do Poder Executivo Federal pela classificação funcional programática
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano do registro;  Ao menos um dos demais filtros; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param mesAno Mês e Ano (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param codigoIbge Município (optional)
     * @param codigoOrgao Órgão (código SIAFI) (optional)
     * @param tipoTransferencia &lt;a href&#x3D;&#39;/swagger-ui.html#!/Despesas32P250blicas/listaTipoTransferenciaUsingGET&#39; &gt;ID do Tipo de Transferência&lt;/a&gt; (optional)
     * @param uf Sigla UF (optional)
     * @return List&lt;TransferenciaCoronavirusDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TransferenciaCoronavirusDTO> buscarTransferenciasUsingGET(String chaveApiDados, Integer mesAno, Integer pagina, String codigoIbge, String codigoOrgao, Integer tipoTransferencia, String uf) throws ApiException {
        ApiResponse<List<TransferenciaCoronavirusDTO>> resp = buscarTransferenciasUsingGETWithHttpInfo(chaveApiDados, mesAno, pagina, codigoIbge, codigoOrgao, tipoTransferencia, uf);
        return resp.getData();
    }

    /**
     * Consulta de transferências mensal das despesas do Poder Executivo Federal pela classificação funcional programática
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano do registro;  Ao menos um dos demais filtros; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param mesAno Mês e Ano (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param codigoIbge Município (optional)
     * @param codigoOrgao Órgão (código SIAFI) (optional)
     * @param tipoTransferencia &lt;a href&#x3D;&#39;/swagger-ui.html#!/Despesas32P250blicas/listaTipoTransferenciaUsingGET&#39; &gt;ID do Tipo de Transferência&lt;/a&gt; (optional)
     * @param uf Sigla UF (optional)
     * @return ApiResponse&lt;List&lt;TransferenciaCoronavirusDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TransferenciaCoronavirusDTO>> buscarTransferenciasUsingGETWithHttpInfo(String chaveApiDados, Integer mesAno, Integer pagina, String codigoIbge, String codigoOrgao, Integer tipoTransferencia, String uf) throws ApiException {
        com.squareup.okhttp.Call call = buscarTransferenciasUsingGETValidateBeforeCall(chaveApiDados, mesAno, pagina, codigoIbge, codigoOrgao, tipoTransferencia, uf, null, null);
        Type localVarReturnType = new TypeToken<List<TransferenciaCoronavirusDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta de transferências mensal das despesas do Poder Executivo Federal pela classificação funcional programática (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano do registro;  Ao menos um dos demais filtros; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param mesAno Mês e Ano (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param codigoIbge Município (optional)
     * @param codigoOrgao Órgão (código SIAFI) (optional)
     * @param tipoTransferencia &lt;a href&#x3D;&#39;/swagger-ui.html#!/Despesas32P250blicas/listaTipoTransferenciaUsingGET&#39; &gt;ID do Tipo de Transferência&lt;/a&gt; (optional)
     * @param uf Sigla UF (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call buscarTransferenciasUsingGETAsync(String chaveApiDados, Integer mesAno, Integer pagina, String codigoIbge, String codigoOrgao, Integer tipoTransferencia, String uf, final ApiCallback<List<TransferenciaCoronavirusDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = buscarTransferenciasUsingGETValidateBeforeCall(chaveApiDados, mesAno, pagina, codigoIbge, codigoOrgao, tipoTransferencia, uf, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TransferenciaCoronavirusDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for despesasPorFuncaoMovimentacaoLiquidaUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param mesAnoLancamento Mês e Ano de lançamento (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param acao Ação (código SIAFI) (optional)
     * @param elementoDespesa Elemento Despesa (código SIAFI) (optional)
     * @param funcao Função (código SIAFI) (optional)
     * @param grupoDespesa Grupo Despesa (código SIAFI) (optional)
     * @param idPlanoOrcamentario Id Plano orçamentário (optional)
     * @param modalidadeAplicacao Modalidade de Aplicação (código SIAFI) (optional)
     * @param programa Programa (código SIAFI) (optional)
     * @param subfuncao Subfunção (código SIAFI) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call despesasPorFuncaoMovimentacaoLiquidaUsingGETCall(String chaveApiDados, Integer mesAnoLancamento, Integer pagina, String acao, String elementoDespesa, String funcao, String grupoDespesa, Integer idPlanoOrcamentario, String modalidadeAplicacao, String programa, String subfuncao, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/coronavirus/movimento-liquido-despesa";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (acao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("acao", acao));
        if (elementoDespesa != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("elementoDespesa", elementoDespesa));
        if (funcao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("funcao", funcao));
        if (grupoDespesa != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("grupoDespesa", grupoDespesa));
        if (idPlanoOrcamentario != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("idPlanoOrcamentario", idPlanoOrcamentario));
        if (mesAnoLancamento != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mesAnoLancamento", mesAnoLancamento));
        if (modalidadeAplicacao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modalidadeAplicacao", modalidadeAplicacao));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));
        if (programa != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("programa", programa));
        if (subfuncao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("subfuncao", subfuncao));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call despesasPorFuncaoMovimentacaoLiquidaUsingGETValidateBeforeCall(String chaveApiDados, Integer mesAnoLancamento, Integer pagina, String acao, String elementoDespesa, String funcao, String grupoDespesa, Integer idPlanoOrcamentario, String modalidadeAplicacao, String programa, String subfuncao, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling despesasPorFuncaoMovimentacaoLiquidaUsingGET(Async)");
        }
        
        // verify the required parameter 'mesAnoLancamento' is set
        if (mesAnoLancamento == null) {
            throw new ApiException("Missing the required parameter 'mesAnoLancamento' when calling despesasPorFuncaoMovimentacaoLiquidaUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling despesasPorFuncaoMovimentacaoLiquidaUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = despesasPorFuncaoMovimentacaoLiquidaUsingGETCall(chaveApiDados, mesAnoLancamento, pagina, acao, elementoDespesa, funcao, grupoDespesa, idPlanoOrcamentario, modalidadeAplicacao, programa, subfuncao, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta de movimentação líquida mensal das despesas do Poder Executivo Federal pela classificação funcional programática
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano do registro;  Ao menos um dos demais filtros; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param mesAnoLancamento Mês e Ano de lançamento (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param acao Ação (código SIAFI) (optional)
     * @param elementoDespesa Elemento Despesa (código SIAFI) (optional)
     * @param funcao Função (código SIAFI) (optional)
     * @param grupoDespesa Grupo Despesa (código SIAFI) (optional)
     * @param idPlanoOrcamentario Id Plano orçamentário (optional)
     * @param modalidadeAplicacao Modalidade de Aplicação (código SIAFI) (optional)
     * @param programa Programa (código SIAFI) (optional)
     * @param subfuncao Subfunção (código SIAFI) (optional)
     * @return List&lt;MovimentacaoLiquidaCovidDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<MovimentacaoLiquidaCovidDTO> despesasPorFuncaoMovimentacaoLiquidaUsingGET(String chaveApiDados, Integer mesAnoLancamento, Integer pagina, String acao, String elementoDespesa, String funcao, String grupoDespesa, Integer idPlanoOrcamentario, String modalidadeAplicacao, String programa, String subfuncao) throws ApiException {
        ApiResponse<List<MovimentacaoLiquidaCovidDTO>> resp = despesasPorFuncaoMovimentacaoLiquidaUsingGETWithHttpInfo(chaveApiDados, mesAnoLancamento, pagina, acao, elementoDespesa, funcao, grupoDespesa, idPlanoOrcamentario, modalidadeAplicacao, programa, subfuncao);
        return resp.getData();
    }

    /**
     * Consulta de movimentação líquida mensal das despesas do Poder Executivo Federal pela classificação funcional programática
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano do registro;  Ao menos um dos demais filtros; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param mesAnoLancamento Mês e Ano de lançamento (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param acao Ação (código SIAFI) (optional)
     * @param elementoDespesa Elemento Despesa (código SIAFI) (optional)
     * @param funcao Função (código SIAFI) (optional)
     * @param grupoDespesa Grupo Despesa (código SIAFI) (optional)
     * @param idPlanoOrcamentario Id Plano orçamentário (optional)
     * @param modalidadeAplicacao Modalidade de Aplicação (código SIAFI) (optional)
     * @param programa Programa (código SIAFI) (optional)
     * @param subfuncao Subfunção (código SIAFI) (optional)
     * @return ApiResponse&lt;List&lt;MovimentacaoLiquidaCovidDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<MovimentacaoLiquidaCovidDTO>> despesasPorFuncaoMovimentacaoLiquidaUsingGETWithHttpInfo(String chaveApiDados, Integer mesAnoLancamento, Integer pagina, String acao, String elementoDespesa, String funcao, String grupoDespesa, Integer idPlanoOrcamentario, String modalidadeAplicacao, String programa, String subfuncao) throws ApiException {
        com.squareup.okhttp.Call call = despesasPorFuncaoMovimentacaoLiquidaUsingGETValidateBeforeCall(chaveApiDados, mesAnoLancamento, pagina, acao, elementoDespesa, funcao, grupoDespesa, idPlanoOrcamentario, modalidadeAplicacao, programa, subfuncao, null, null);
        Type localVarReturnType = new TypeToken<List<MovimentacaoLiquidaCovidDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta de movimentação líquida mensal das despesas do Poder Executivo Federal pela classificação funcional programática (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Ano do registro;  Ao menos um dos demais filtros; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param mesAnoLancamento Mês e Ano de lançamento (AAAAMM) (required)
     * @param pagina Página consultada (required)
     * @param acao Ação (código SIAFI) (optional)
     * @param elementoDespesa Elemento Despesa (código SIAFI) (optional)
     * @param funcao Função (código SIAFI) (optional)
     * @param grupoDespesa Grupo Despesa (código SIAFI) (optional)
     * @param idPlanoOrcamentario Id Plano orçamentário (optional)
     * @param modalidadeAplicacao Modalidade de Aplicação (código SIAFI) (optional)
     * @param programa Programa (código SIAFI) (optional)
     * @param subfuncao Subfunção (código SIAFI) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call despesasPorFuncaoMovimentacaoLiquidaUsingGETAsync(String chaveApiDados, Integer mesAnoLancamento, Integer pagina, String acao, String elementoDespesa, String funcao, String grupoDespesa, Integer idPlanoOrcamentario, String modalidadeAplicacao, String programa, String subfuncao, final ApiCallback<List<MovimentacaoLiquidaCovidDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = despesasPorFuncaoMovimentacaoLiquidaUsingGETValidateBeforeCall(chaveApiDados, mesAnoLancamento, pagina, acao, elementoDespesa, funcao, grupoDespesa, idPlanoOrcamentario, modalidadeAplicacao, programa, subfuncao, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<MovimentacaoLiquidaCovidDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
