/*
 * API REST do Portal da Transparência do Governo Federal
 * API de serviços do Portal da Transparência do Governo Federal
 *
 * OpenAPI spec version: 1.0
 * Contact: listaapitransparencia@cgu.gov.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.harpia.stive.service.client.api;

import com.google.gson.reflect.TypeToken;
import com.harpia.stive.domain.model.ConvenioDTO;
import com.harpia.stive.domain.model.TipoInstrumentoDTO;
import com.harpia.stive.service.client.ApiCallback;
import com.harpia.stive.service.client.ApiClient;
import com.harpia.stive.service.client.ApiException;
import com.harpia.stive.service.client.ApiResponse;
import com.harpia.stive.service.client.Configuration;
import com.harpia.stive.service.client.Pair;
import com.harpia.stive.service.client.ProgressRequestBody;
import com.harpia.stive.service.client.ProgressResponseBody;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConvniosDoPoderExecutivoFederalApi {
    private ApiClient apiClient;

    public ConvniosDoPoderExecutivoFederalApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConvniosDoPoderExecutivoFederalApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for convenioUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call convenioUsingGETCall(String chaveApiDados, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/convenios/id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call convenioUsingGETValidateBeforeCall(String chaveApiDados, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling convenioUsingGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling convenioUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = convenioUsingGETCall(chaveApiDados, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta um convênio do Poder Executivo Federal pelo id
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @return ConvenioDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConvenioDTO convenioUsingGET(String chaveApiDados, Integer id) throws ApiException {
        ApiResponse<ConvenioDTO> resp = convenioUsingGETWithHttpInfo(chaveApiDados, id);
        return resp.getData();
    }

    /**
     * Consulta um convênio do Poder Executivo Federal pelo id
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @return ApiResponse&lt;ConvenioDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConvenioDTO> convenioUsingGETWithHttpInfo(String chaveApiDados, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = convenioUsingGETValidateBeforeCall(chaveApiDados, id, null, null);
        Type localVarReturnType = new TypeToken<ConvenioDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta um convênio do Poder Executivo Federal pelo id (asynchronously)
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call convenioUsingGETAsync(String chaveApiDados, Integer id, final ApiCallback<ConvenioDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = convenioUsingGETValidateBeforeCall(chaveApiDados, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConvenioDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for conveniosPorNumeroOriginalUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param numeroOriginal Número original do convênio (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call conveniosPorNumeroOriginalUsingGETCall(String chaveApiDados, String numeroOriginal, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/convenios/numero-original";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (numeroOriginal != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("numeroOriginal", numeroOriginal));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call conveniosPorNumeroOriginalUsingGETValidateBeforeCall(String chaveApiDados, String numeroOriginal, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling conveniosPorNumeroOriginalUsingGET(Async)");
        }
        
        // verify the required parameter 'numeroOriginal' is set
        if (numeroOriginal == null) {
            throw new ApiException("Missing the required parameter 'numeroOriginal' when calling conveniosPorNumeroOriginalUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling conveniosPorNumeroOriginalUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = conveniosPorNumeroOriginalUsingGETCall(chaveApiDados, numeroOriginal, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta um convênio do Poder Executivo Federal pelo número original do contrato
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Número; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param numeroOriginal Número original do convênio (required)
     * @param pagina Página consultada (required)
     * @return List&lt;ConvenioDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ConvenioDTO> conveniosPorNumeroOriginalUsingGET(String chaveApiDados, String numeroOriginal, Integer pagina) throws ApiException {
        ApiResponse<List<ConvenioDTO>> resp = conveniosPorNumeroOriginalUsingGETWithHttpInfo(chaveApiDados, numeroOriginal, pagina);
        return resp.getData();
    }

    /**
     * Consulta um convênio do Poder Executivo Federal pelo número original do contrato
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Número; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param numeroOriginal Número original do convênio (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;ConvenioDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ConvenioDTO>> conveniosPorNumeroOriginalUsingGETWithHttpInfo(String chaveApiDados, String numeroOriginal, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = conveniosPorNumeroOriginalUsingGETValidateBeforeCall(chaveApiDados, numeroOriginal, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<ConvenioDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta um convênio do Poder Executivo Federal pelo número original do contrato (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Número; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param numeroOriginal Número original do convênio (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call conveniosPorNumeroOriginalUsingGETAsync(String chaveApiDados, String numeroOriginal, Integer pagina, final ApiCallback<List<ConvenioDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = conveniosPorNumeroOriginalUsingGETValidateBeforeCall(chaveApiDados, numeroOriginal, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ConvenioDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for conveniosPorNumeroProcessoUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param numeroProcesso Número do processo (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call conveniosPorNumeroProcessoUsingGETCall(String chaveApiDados, String numeroProcesso, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/convenios/numero-processo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (numeroProcesso != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("numeroProcesso", numeroProcesso));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call conveniosPorNumeroProcessoUsingGETValidateBeforeCall(String chaveApiDados, String numeroProcesso, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling conveniosPorNumeroProcessoUsingGET(Async)");
        }
        
        // verify the required parameter 'numeroProcesso' is set
        if (numeroProcesso == null) {
            throw new ApiException("Missing the required parameter 'numeroProcesso' when calling conveniosPorNumeroProcessoUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling conveniosPorNumeroProcessoUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = conveniosPorNumeroProcessoUsingGETCall(chaveApiDados, numeroProcesso, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta um convênio do Poder Executivo Federal pelo número do processo
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Número do processo; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param numeroProcesso Número do processo (required)
     * @param pagina Página consultada (required)
     * @return List&lt;ConvenioDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ConvenioDTO> conveniosPorNumeroProcessoUsingGET(String chaveApiDados, String numeroProcesso, Integer pagina) throws ApiException {
        ApiResponse<List<ConvenioDTO>> resp = conveniosPorNumeroProcessoUsingGETWithHttpInfo(chaveApiDados, numeroProcesso, pagina);
        return resp.getData();
    }

    /**
     * Consulta um convênio do Poder Executivo Federal pelo número do processo
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Número do processo; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param numeroProcesso Número do processo (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;ConvenioDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ConvenioDTO>> conveniosPorNumeroProcessoUsingGETWithHttpInfo(String chaveApiDados, String numeroProcesso, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = conveniosPorNumeroProcessoUsingGETValidateBeforeCall(chaveApiDados, numeroProcesso, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<ConvenioDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta um convênio do Poder Executivo Federal pelo número do processo (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Número do processo; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param numeroProcesso Número do processo (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call conveniosPorNumeroProcessoUsingGETAsync(String chaveApiDados, String numeroProcesso, Integer pagina, final ApiCallback<List<ConvenioDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = conveniosPorNumeroProcessoUsingGETValidateBeforeCall(chaveApiDados, numeroProcesso, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ConvenioDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for conveniosPorNumeroUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param numero Número do convênio (required)
     * @param pagina Página consultada (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call conveniosPorNumeroUsingGETCall(String chaveApiDados, String numero, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/convenios/numero";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (numero != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("numero", numero));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call conveniosPorNumeroUsingGETValidateBeforeCall(String chaveApiDados, String numero, Integer pagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling conveniosPorNumeroUsingGET(Async)");
        }
        
        // verify the required parameter 'numero' is set
        if (numero == null) {
            throw new ApiException("Missing the required parameter 'numero' when calling conveniosPorNumeroUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling conveniosPorNumeroUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = conveniosPorNumeroUsingGETCall(chaveApiDados, numero, pagina, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta um convênio do Poder Executivo Federal pelo número do contrato
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Número; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param numero Número do convênio (required)
     * @param pagina Página consultada (required)
     * @return List&lt;ConvenioDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ConvenioDTO> conveniosPorNumeroUsingGET(String chaveApiDados, String numero, Integer pagina) throws ApiException {
        ApiResponse<List<ConvenioDTO>> resp = conveniosPorNumeroUsingGETWithHttpInfo(chaveApiDados, numero, pagina);
        return resp.getData();
    }

    /**
     * Consulta um convênio do Poder Executivo Federal pelo número do contrato
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Número; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param numero Número do convênio (required)
     * @param pagina Página consultada (required)
     * @return ApiResponse&lt;List&lt;ConvenioDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ConvenioDTO>> conveniosPorNumeroUsingGETWithHttpInfo(String chaveApiDados, String numero, Integer pagina) throws ApiException {
        com.squareup.okhttp.Call call = conveniosPorNumeroUsingGETValidateBeforeCall(chaveApiDados, numero, pagina, null, null);
        Type localVarReturnType = new TypeToken<List<ConvenioDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta um convênio do Poder Executivo Federal pelo número do contrato (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Número; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param numero Número do convênio (required)
     * @param pagina Página consultada (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call conveniosPorNumeroUsingGETAsync(String chaveApiDados, String numero, Integer pagina, final ApiCallback<List<ConvenioDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = conveniosPorNumeroUsingGETValidateBeforeCall(chaveApiDados, numero, pagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ConvenioDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for conveniosUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param codigoIBGE Município (Código IBGE) (optional)
     * @param codigoOrgao &lt;a href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiafiUsingGET&#39; &gt;Código do Órgão (SIAFI)&lt;/a&gt; (optional)
     * @param convenente Convenente (optional)
     * @param dataFinal Data referência fim (DD/MM/AAAA) (optional)
     * @param dataInicial Data referência início (DD/MM/AAAA) (optional)
     * @param dataUltimaLiberacaoFinal Data da última liberação de recurso fim (DD/MM/AAAA) (optional)
     * @param dataUltimaLiberacaoInicial Data da última liberação de recurso início (DD/MM/AAAA) (optional)
     * @param dataVigenciaFinal Data de vigência fim (DD/MM/AAAA) (optional)
     * @param dataVigenciaInicial Data de vigência início (DD/MM/AAAA) (optional)
     * @param funcao Código Função (optional)
     * @param numero Número do convênio (optional)
     * @param numeroOriginal Número original do convênio (optional)
     * @param situacao Código Situação (optional)
     * @param subfuncao Código Subfunção (optional)
     * @param tipoConvenente Tipo de Convenente (optional)
     * @param tipoInstrumento Código Tipo de Instrumento (optional)
     * @param uf Sigla UF (optional)
     * @param valorLiberadoAte Valor liberado até (Formato: 1.000,00) (optional)
     * @param valorLiberadoDe Valor liberado de (Formato: 1.000,00) (optional)
     * @param valorTotalAte Valor total até (Formato: 1.000,00) (optional)
     * @param valorTotalDe Valor total de (Formato: 1.000,00) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call conveniosUsingGETCall(String chaveApiDados, Integer pagina, String codigoIBGE, String codigoOrgao, String convenente, String dataFinal, String dataInicial, String dataUltimaLiberacaoFinal, String dataUltimaLiberacaoInicial, String dataVigenciaFinal, String dataVigenciaInicial, String funcao, String numero, String numeroOriginal, String situacao, String subfuncao, String tipoConvenente, String tipoInstrumento, String uf, String valorLiberadoAte, String valorLiberadoDe, String valorTotalAte, String valorTotalDe, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/convenios";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoIBGE != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoIBGE", codigoIBGE));
        if (codigoOrgao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoOrgao", codigoOrgao));
        if (convenente != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("convenente", convenente));
        if (dataFinal != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dataFinal", dataFinal));
        if (dataInicial != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dataInicial", dataInicial));
        if (dataUltimaLiberacaoFinal != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dataUltimaLiberacaoFinal", dataUltimaLiberacaoFinal));
        if (dataUltimaLiberacaoInicial != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dataUltimaLiberacaoInicial", dataUltimaLiberacaoInicial));
        if (dataVigenciaFinal != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dataVigenciaFinal", dataVigenciaFinal));
        if (dataVigenciaInicial != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dataVigenciaInicial", dataVigenciaInicial));
        if (funcao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("funcao", funcao));
        if (numero != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("numero", numero));
        if (numeroOriginal != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("numeroOriginal", numeroOriginal));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));
        if (situacao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("situacao", situacao));
        if (subfuncao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("subfuncao", subfuncao));
        if (tipoConvenente != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tipoConvenente", tipoConvenente));
        if (tipoInstrumento != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tipoInstrumento", tipoInstrumento));
        if (uf != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uf", uf));
        if (valorLiberadoAte != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("valorLiberadoAte", valorLiberadoAte));
        if (valorLiberadoDe != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("valorLiberadoDe", valorLiberadoDe));
        if (valorTotalAte != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("valorTotalAte", valorTotalAte));
        if (valorTotalDe != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("valorTotalDe", valorTotalDe));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call conveniosUsingGETValidateBeforeCall(String chaveApiDados, Integer pagina, String codigoIBGE, String codigoOrgao, String convenente, String dataFinal, String dataInicial, String dataUltimaLiberacaoFinal, String dataUltimaLiberacaoInicial, String dataVigenciaFinal, String dataVigenciaInicial, String funcao, String numero, String numeroOriginal, String situacao, String subfuncao, String tipoConvenente, String tipoInstrumento, String uf, String valorLiberadoAte, String valorLiberadoDe, String valorTotalAte, String valorTotalDe, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling conveniosUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling conveniosUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = conveniosUsingGETCall(chaveApiDados, pagina, codigoIBGE, codigoOrgao, convenente, dataFinal, dataInicial, dataUltimaLiberacaoFinal, dataUltimaLiberacaoInicial, dataVigenciaFinal, dataVigenciaInicial, funcao, numero, numeroOriginal, situacao, subfuncao, tipoConvenente, tipoInstrumento, uf, valorLiberadoAte, valorLiberadoDe, valorTotalAte, valorTotalDe, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta todos convênios do Poder Executivo Federal
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Período de no máximo 1 dia; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param codigoIBGE Município (Código IBGE) (optional)
     * @param codigoOrgao &lt;a href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiafiUsingGET&#39; &gt;Código do Órgão (SIAFI)&lt;/a&gt; (optional)
     * @param convenente Convenente (optional)
     * @param dataFinal Data referência fim (DD/MM/AAAA) (optional)
     * @param dataInicial Data referência início (DD/MM/AAAA) (optional)
     * @param dataUltimaLiberacaoFinal Data da última liberação de recurso fim (DD/MM/AAAA) (optional)
     * @param dataUltimaLiberacaoInicial Data da última liberação de recurso início (DD/MM/AAAA) (optional)
     * @param dataVigenciaFinal Data de vigência fim (DD/MM/AAAA) (optional)
     * @param dataVigenciaInicial Data de vigência início (DD/MM/AAAA) (optional)
     * @param funcao Código Função (optional)
     * @param numero Número do convênio (optional)
     * @param numeroOriginal Número original do convênio (optional)
     * @param situacao Código Situação (optional)
     * @param subfuncao Código Subfunção (optional)
     * @param tipoConvenente Tipo de Convenente (optional)
     * @param tipoInstrumento Código Tipo de Instrumento (optional)
     * @param uf Sigla UF (optional)
     * @param valorLiberadoAte Valor liberado até (Formato: 1.000,00) (optional)
     * @param valorLiberadoDe Valor liberado de (Formato: 1.000,00) (optional)
     * @param valorTotalAte Valor total até (Formato: 1.000,00) (optional)
     * @param valorTotalDe Valor total de (Formato: 1.000,00) (optional)
     * @return List&lt;ConvenioDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ConvenioDTO> conveniosUsingGET(String chaveApiDados, Integer pagina, String codigoIBGE, String codigoOrgao, String convenente, String dataFinal, String dataInicial, String dataUltimaLiberacaoFinal, String dataUltimaLiberacaoInicial, String dataVigenciaFinal, String dataVigenciaInicial, String funcao, String numero, String numeroOriginal, String situacao, String subfuncao, String tipoConvenente, String tipoInstrumento, String uf, String valorLiberadoAte, String valorLiberadoDe, String valorTotalAte, String valorTotalDe) throws ApiException {
        ApiResponse<List<ConvenioDTO>> resp = conveniosUsingGETWithHttpInfo(chaveApiDados, pagina, codigoIBGE, codigoOrgao, convenente, dataFinal, dataInicial, dataUltimaLiberacaoFinal, dataUltimaLiberacaoInicial, dataVigenciaFinal, dataVigenciaInicial, funcao, numero, numeroOriginal, situacao, subfuncao, tipoConvenente, tipoInstrumento, uf, valorLiberadoAte, valorLiberadoDe, valorTotalAte, valorTotalDe);
        return resp.getData();
    }

    /**
     * Consulta todos convênios do Poder Executivo Federal
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Período de no máximo 1 dia; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param codigoIBGE Município (Código IBGE) (optional)
     * @param codigoOrgao &lt;a href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiafiUsingGET&#39; &gt;Código do Órgão (SIAFI)&lt;/a&gt; (optional)
     * @param convenente Convenente (optional)
     * @param dataFinal Data referência fim (DD/MM/AAAA) (optional)
     * @param dataInicial Data referência início (DD/MM/AAAA) (optional)
     * @param dataUltimaLiberacaoFinal Data da última liberação de recurso fim (DD/MM/AAAA) (optional)
     * @param dataUltimaLiberacaoInicial Data da última liberação de recurso início (DD/MM/AAAA) (optional)
     * @param dataVigenciaFinal Data de vigência fim (DD/MM/AAAA) (optional)
     * @param dataVigenciaInicial Data de vigência início (DD/MM/AAAA) (optional)
     * @param funcao Código Função (optional)
     * @param numero Número do convênio (optional)
     * @param numeroOriginal Número original do convênio (optional)
     * @param situacao Código Situação (optional)
     * @param subfuncao Código Subfunção (optional)
     * @param tipoConvenente Tipo de Convenente (optional)
     * @param tipoInstrumento Código Tipo de Instrumento (optional)
     * @param uf Sigla UF (optional)
     * @param valorLiberadoAte Valor liberado até (Formato: 1.000,00) (optional)
     * @param valorLiberadoDe Valor liberado de (Formato: 1.000,00) (optional)
     * @param valorTotalAte Valor total até (Formato: 1.000,00) (optional)
     * @param valorTotalDe Valor total de (Formato: 1.000,00) (optional)
     * @return ApiResponse&lt;List&lt;ConvenioDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ConvenioDTO>> conveniosUsingGETWithHttpInfo(String chaveApiDados, Integer pagina, String codigoIBGE, String codigoOrgao, String convenente, String dataFinal, String dataInicial, String dataUltimaLiberacaoFinal, String dataUltimaLiberacaoInicial, String dataVigenciaFinal, String dataVigenciaInicial, String funcao, String numero, String numeroOriginal, String situacao, String subfuncao, String tipoConvenente, String tipoInstrumento, String uf, String valorLiberadoAte, String valorLiberadoDe, String valorTotalAte, String valorTotalDe) throws ApiException {
        com.squareup.okhttp.Call call = conveniosUsingGETValidateBeforeCall(chaveApiDados, pagina, codigoIBGE, codigoOrgao, convenente, dataFinal, dataInicial, dataUltimaLiberacaoFinal, dataUltimaLiberacaoInicial, dataVigenciaFinal, dataVigenciaInicial, funcao, numero, numeroOriginal, situacao, subfuncao, tipoConvenente, tipoInstrumento, uf, valorLiberadoAte, valorLiberadoDe, valorTotalAte, valorTotalDe, null, null);
        Type localVarReturnType = new TypeToken<List<ConvenioDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta todos convênios do Poder Executivo Federal (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1);  Período de no máximo 1 dia; 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param codigoIBGE Município (Código IBGE) (optional)
     * @param codigoOrgao &lt;a href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiafiUsingGET&#39; &gt;Código do Órgão (SIAFI)&lt;/a&gt; (optional)
     * @param convenente Convenente (optional)
     * @param dataFinal Data referência fim (DD/MM/AAAA) (optional)
     * @param dataInicial Data referência início (DD/MM/AAAA) (optional)
     * @param dataUltimaLiberacaoFinal Data da última liberação de recurso fim (DD/MM/AAAA) (optional)
     * @param dataUltimaLiberacaoInicial Data da última liberação de recurso início (DD/MM/AAAA) (optional)
     * @param dataVigenciaFinal Data de vigência fim (DD/MM/AAAA) (optional)
     * @param dataVigenciaInicial Data de vigência início (DD/MM/AAAA) (optional)
     * @param funcao Código Função (optional)
     * @param numero Número do convênio (optional)
     * @param numeroOriginal Número original do convênio (optional)
     * @param situacao Código Situação (optional)
     * @param subfuncao Código Subfunção (optional)
     * @param tipoConvenente Tipo de Convenente (optional)
     * @param tipoInstrumento Código Tipo de Instrumento (optional)
     * @param uf Sigla UF (optional)
     * @param valorLiberadoAte Valor liberado até (Formato: 1.000,00) (optional)
     * @param valorLiberadoDe Valor liberado de (Formato: 1.000,00) (optional)
     * @param valorTotalAte Valor total até (Formato: 1.000,00) (optional)
     * @param valorTotalDe Valor total de (Formato: 1.000,00) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call conveniosUsingGETAsync(String chaveApiDados, Integer pagina, String codigoIBGE, String codigoOrgao, String convenente, String dataFinal, String dataInicial, String dataUltimaLiberacaoFinal, String dataUltimaLiberacaoInicial, String dataVigenciaFinal, String dataVigenciaInicial, String funcao, String numero, String numeroOriginal, String situacao, String subfuncao, String tipoConvenente, String tipoInstrumento, String uf, String valorLiberadoAte, String valorLiberadoDe, String valorTotalAte, String valorTotalDe, final ApiCallback<List<ConvenioDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = conveniosUsingGETValidateBeforeCall(chaveApiDados, pagina, codigoIBGE, codigoOrgao, convenente, dataFinal, dataInicial, dataUltimaLiberacaoFinal, dataUltimaLiberacaoInicial, dataVigenciaFinal, dataVigenciaInicial, funcao, numero, numeroOriginal, situacao, subfuncao, tipoConvenente, tipoInstrumento, uf, valorLiberadoAte, valorLiberadoDe, valorTotalAte, valorTotalDe, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ConvenioDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listaTiposDeInstrumentoUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listaTiposDeInstrumentoUsingGETCall(String chaveApiDados, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/convenios/tipo-instrumento";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listaTiposDeInstrumentoUsingGETValidateBeforeCall(String chaveApiDados, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling listaTiposDeInstrumentoUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = listaTiposDeInstrumentoUsingGETCall(chaveApiDados, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os tipos de instrumentos usados nos convênios
     * 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @return List&lt;TipoInstrumentoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TipoInstrumentoDTO> listaTiposDeInstrumentoUsingGET(String chaveApiDados) throws ApiException {
        ApiResponse<List<TipoInstrumentoDTO>> resp = listaTiposDeInstrumentoUsingGETWithHttpInfo(chaveApiDados);
        return resp.getData();
    }

    /**
     * Consulta os tipos de instrumentos usados nos convênios
     * 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @return ApiResponse&lt;List&lt;TipoInstrumentoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TipoInstrumentoDTO>> listaTiposDeInstrumentoUsingGETWithHttpInfo(String chaveApiDados) throws ApiException {
        com.squareup.okhttp.Call call = listaTiposDeInstrumentoUsingGETValidateBeforeCall(chaveApiDados, null, null);
        Type localVarReturnType = new TypeToken<List<TipoInstrumentoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os tipos de instrumentos usados nos convênios (asynchronously)
     * 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listaTiposDeInstrumentoUsingGETAsync(String chaveApiDados, final ApiCallback<List<TipoInstrumentoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listaTiposDeInstrumentoUsingGETValidateBeforeCall(chaveApiDados, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TipoInstrumentoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
