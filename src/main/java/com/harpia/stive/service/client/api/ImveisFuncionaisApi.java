/*
 * API REST do Portal da Transparência do Governo Federal
 * API de serviços do Portal da Transparência do Governo Federal
 *
 * OpenAPI spec version: 1.0
 * Contact: listaapitransparencia@cgu.gov.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.harpia.stive.service.client.api;

import com.google.gson.reflect.TypeToken;
import com.harpia.stive.domain.model.ImovelFuncionalDTO;
import com.harpia.stive.domain.model.PermissionarioDTO;
import com.harpia.stive.service.client.ApiCallback;
import com.harpia.stive.service.client.ApiClient;
import com.harpia.stive.service.client.ApiException;
import com.harpia.stive.service.client.ApiResponse;
import com.harpia.stive.service.client.Configuration;
import com.harpia.stive.service.client.Pair;
import com.harpia.stive.service.client.ProgressRequestBody;
import com.harpia.stive.service.client.ProgressResponseBody;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImveisFuncionaisApi {
    private ApiClient apiClient;

    public ImveisFuncionaisApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImveisFuncionaisApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for relacaoImoveisUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param cep CEP (optional)
     * @param codigoOrgaoSiafiResponsavelGestao &lt;a href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiafiUsingGET&#39; &gt;Código do Órgão (SIAFI)&lt;/a&gt; (optional)
     * @param endereco Endereço (optional)
     * @param regiao Região (optional)
     * @param situacao &lt;a href&#x3D;&#39;/swagger-ui.html#!/Im243veis32Funcionais/situacaoImovelUsingGET&#39; &gt;Situação Imóvel&lt;/a&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call relacaoImoveisUsingGETCall(String chaveApiDados, Integer pagina, String cep, String codigoOrgaoSiafiResponsavelGestao, String endereco, String regiao, String situacao, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/imoveis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cep != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cep", cep));
        if (codigoOrgaoSiafiResponsavelGestao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoOrgaoSiafiResponsavelGestao", codigoOrgaoSiafiResponsavelGestao));
        if (endereco != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endereco", endereco));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));
        if (regiao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("regiao", regiao));
        if (situacao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("situacao", situacao));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call relacaoImoveisUsingGETValidateBeforeCall(String chaveApiDados, Integer pagina, String cep, String codigoOrgaoSiafiResponsavelGestao, String endereco, String regiao, String situacao, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling relacaoImoveisUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling relacaoImoveisUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = relacaoImoveisUsingGETCall(chaveApiDados, pagina, cep, codigoOrgaoSiafiResponsavelGestao, endereco, regiao, situacao, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta relação de imóveis
     * Filtros mínimos:  Página (padrão &#x3D; 1); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param cep CEP (optional)
     * @param codigoOrgaoSiafiResponsavelGestao &lt;a href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiafiUsingGET&#39; &gt;Código do Órgão (SIAFI)&lt;/a&gt; (optional)
     * @param endereco Endereço (optional)
     * @param regiao Região (optional)
     * @param situacao &lt;a href&#x3D;&#39;/swagger-ui.html#!/Im243veis32Funcionais/situacaoImovelUsingGET&#39; &gt;Situação Imóvel&lt;/a&gt; (optional)
     * @return List&lt;ImovelFuncionalDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ImovelFuncionalDTO> relacaoImoveisUsingGET(String chaveApiDados, Integer pagina, String cep, String codigoOrgaoSiafiResponsavelGestao, String endereco, String regiao, String situacao) throws ApiException {
        ApiResponse<List<ImovelFuncionalDTO>> resp = relacaoImoveisUsingGETWithHttpInfo(chaveApiDados, pagina, cep, codigoOrgaoSiafiResponsavelGestao, endereco, regiao, situacao);
        return resp.getData();
    }

    /**
     * Consulta relação de imóveis
     * Filtros mínimos:  Página (padrão &#x3D; 1); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param cep CEP (optional)
     * @param codigoOrgaoSiafiResponsavelGestao &lt;a href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiafiUsingGET&#39; &gt;Código do Órgão (SIAFI)&lt;/a&gt; (optional)
     * @param endereco Endereço (optional)
     * @param regiao Região (optional)
     * @param situacao &lt;a href&#x3D;&#39;/swagger-ui.html#!/Im243veis32Funcionais/situacaoImovelUsingGET&#39; &gt;Situação Imóvel&lt;/a&gt; (optional)
     * @return ApiResponse&lt;List&lt;ImovelFuncionalDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ImovelFuncionalDTO>> relacaoImoveisUsingGETWithHttpInfo(String chaveApiDados, Integer pagina, String cep, String codigoOrgaoSiafiResponsavelGestao, String endereco, String regiao, String situacao) throws ApiException {
        com.squareup.okhttp.Call call = relacaoImoveisUsingGETValidateBeforeCall(chaveApiDados, pagina, cep, codigoOrgaoSiafiResponsavelGestao, endereco, regiao, situacao, null, null);
        Type localVarReturnType = new TypeToken<List<ImovelFuncionalDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta relação de imóveis (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param cep CEP (optional)
     * @param codigoOrgaoSiafiResponsavelGestao &lt;a href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiafiUsingGET&#39; &gt;Código do Órgão (SIAFI)&lt;/a&gt; (optional)
     * @param endereco Endereço (optional)
     * @param regiao Região (optional)
     * @param situacao &lt;a href&#x3D;&#39;/swagger-ui.html#!/Im243veis32Funcionais/situacaoImovelUsingGET&#39; &gt;Situação Imóvel&lt;/a&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call relacaoImoveisUsingGETAsync(String chaveApiDados, Integer pagina, String cep, String codigoOrgaoSiafiResponsavelGestao, String endereco, String regiao, String situacao, final ApiCallback<List<ImovelFuncionalDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = relacaoImoveisUsingGETValidateBeforeCall(chaveApiDados, pagina, cep, codigoOrgaoSiafiResponsavelGestao, endereco, regiao, situacao, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ImovelFuncionalDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for relacaoOcupantesUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param codigoOrgaoSiafiOcupante &lt;a href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiafiUsingGET&#39; &gt;Código do Órgão (SIAFI)&lt;/a&gt; (optional)
     * @param cpfOcupante CPF Ocupante (optional)
     * @param dataFimOcupacao Data fim ocupação (DD/MM/AAAA) (optional)
     * @param dataInicioOcupacao Data início ocupação(DD/MM/AAAA) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call relacaoOcupantesUsingGETCall(String chaveApiDados, Integer pagina, String codigoOrgaoSiafiOcupante, String cpfOcupante, String dataFimOcupacao, String dataInicioOcupacao, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/permissionarios";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoOrgaoSiafiOcupante != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoOrgaoSiafiOcupante", codigoOrgaoSiafiOcupante));
        if (cpfOcupante != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cpfOcupante", cpfOcupante));
        if (dataFimOcupacao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dataFimOcupacao", dataFimOcupacao));
        if (dataInicioOcupacao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dataInicioOcupacao", dataInicioOcupacao));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call relacaoOcupantesUsingGETValidateBeforeCall(String chaveApiDados, Integer pagina, String codigoOrgaoSiafiOcupante, String cpfOcupante, String dataFimOcupacao, String dataInicioOcupacao, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling relacaoOcupantesUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling relacaoOcupantesUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = relacaoOcupantesUsingGETCall(chaveApiDados, pagina, codigoOrgaoSiafiOcupante, cpfOcupante, dataFimOcupacao, dataInicioOcupacao, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta relação de ocupantes
     * Filtros mínimos:  Página (padrão &#x3D; 1); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param codigoOrgaoSiafiOcupante &lt;a href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiafiUsingGET&#39; &gt;Código do Órgão (SIAFI)&lt;/a&gt; (optional)
     * @param cpfOcupante CPF Ocupante (optional)
     * @param dataFimOcupacao Data fim ocupação (DD/MM/AAAA) (optional)
     * @param dataInicioOcupacao Data início ocupação(DD/MM/AAAA) (optional)
     * @return List&lt;PermissionarioDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PermissionarioDTO> relacaoOcupantesUsingGET(String chaveApiDados, Integer pagina, String codigoOrgaoSiafiOcupante, String cpfOcupante, String dataFimOcupacao, String dataInicioOcupacao) throws ApiException {
        ApiResponse<List<PermissionarioDTO>> resp = relacaoOcupantesUsingGETWithHttpInfo(chaveApiDados, pagina, codigoOrgaoSiafiOcupante, cpfOcupante, dataFimOcupacao, dataInicioOcupacao);
        return resp.getData();
    }

    /**
     * Consulta relação de ocupantes
     * Filtros mínimos:  Página (padrão &#x3D; 1); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param codigoOrgaoSiafiOcupante &lt;a href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiafiUsingGET&#39; &gt;Código do Órgão (SIAFI)&lt;/a&gt; (optional)
     * @param cpfOcupante CPF Ocupante (optional)
     * @param dataFimOcupacao Data fim ocupação (DD/MM/AAAA) (optional)
     * @param dataInicioOcupacao Data início ocupação(DD/MM/AAAA) (optional)
     * @return ApiResponse&lt;List&lt;PermissionarioDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PermissionarioDTO>> relacaoOcupantesUsingGETWithHttpInfo(String chaveApiDados, Integer pagina, String codigoOrgaoSiafiOcupante, String cpfOcupante, String dataFimOcupacao, String dataInicioOcupacao) throws ApiException {
        com.squareup.okhttp.Call call = relacaoOcupantesUsingGETValidateBeforeCall(chaveApiDados, pagina, codigoOrgaoSiafiOcupante, cpfOcupante, dataFimOcupacao, dataInicioOcupacao, null, null);
        Type localVarReturnType = new TypeToken<List<PermissionarioDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta relação de ocupantes (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param codigoOrgaoSiafiOcupante &lt;a href&#x3D;&#39;/swagger-ui.html#!/211rg227os/orgaosSiafiUsingGET&#39; &gt;Código do Órgão (SIAFI)&lt;/a&gt; (optional)
     * @param cpfOcupante CPF Ocupante (optional)
     * @param dataFimOcupacao Data fim ocupação (DD/MM/AAAA) (optional)
     * @param dataInicioOcupacao Data início ocupação(DD/MM/AAAA) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call relacaoOcupantesUsingGETAsync(String chaveApiDados, Integer pagina, String codigoOrgaoSiafiOcupante, String cpfOcupante, String dataFimOcupacao, String dataInicioOcupacao, final ApiCallback<List<PermissionarioDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = relacaoOcupantesUsingGETValidateBeforeCall(chaveApiDados, pagina, codigoOrgaoSiafiOcupante, cpfOcupante, dataFimOcupacao, dataInicioOcupacao, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PermissionarioDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for situacaoImovelUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call situacaoImovelUsingGETCall(String chaveApiDados, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/situacao-imovel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call situacaoImovelUsingGETValidateBeforeCall(String chaveApiDados, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling situacaoImovelUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = situacaoImovelUsingGETCall(chaveApiDados, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta situações dos imóveis funcionais
     * 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> situacaoImovelUsingGET(String chaveApiDados) throws ApiException {
        ApiResponse<List<String>> resp = situacaoImovelUsingGETWithHttpInfo(chaveApiDados);
        return resp.getData();
    }

    /**
     * Consulta situações dos imóveis funcionais
     * 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> situacaoImovelUsingGETWithHttpInfo(String chaveApiDados) throws ApiException {
        com.squareup.okhttp.Call call = situacaoImovelUsingGETValidateBeforeCall(chaveApiDados, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta situações dos imóveis funcionais (asynchronously)
     * 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call situacaoImovelUsingGETAsync(String chaveApiDados, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = situacaoImovelUsingGETValidateBeforeCall(chaveApiDados, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
