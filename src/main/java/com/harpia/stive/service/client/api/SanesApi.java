/*
 * API REST do Portal da Transparência do Governo Federal
 * API de serviços do Portal da Transparência do Governo Federal
 *
 * OpenAPI spec version: 1.0
 * Contact: listaapitransparencia@cgu.gov.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.harpia.stive.service.client.api;

import com.google.gson.reflect.TypeToken;
import com.harpia.stive.domain.model.AcordosLenienciaDTO;
import com.harpia.stive.domain.model.CeafDTO;
import com.harpia.stive.domain.model.CeisDTO;
import com.harpia.stive.domain.model.CepimDTO;
import com.harpia.stive.domain.model.CnepDTO;
import com.harpia.stive.service.client.ApiCallback;
import com.harpia.stive.service.client.ApiClient;
import com.harpia.stive.service.client.ApiException;
import com.harpia.stive.service.client.ApiResponse;
import com.harpia.stive.service.client.Configuration;
import com.harpia.stive.service.client.Pair;
import com.harpia.stive.service.client.ProgressRequestBody;
import com.harpia.stive.service.client.ProgressResponseBody;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SanesApi {
    private ApiClient apiClient;

    public SanesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SanesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for acordoLenienciaUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call acordoLenienciaUsingGETCall(String chaveApiDados, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/acordos-leniencia/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call acordoLenienciaUsingGETValidateBeforeCall(String chaveApiDados, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling acordoLenienciaUsingGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling acordoLenienciaUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = acordoLenienciaUsingGETCall(chaveApiDados, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta um registro de Acordo de Leniência pelo id
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @return AcordosLenienciaDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AcordosLenienciaDTO acordoLenienciaUsingGET(String chaveApiDados, Integer id) throws ApiException {
        ApiResponse<AcordosLenienciaDTO> resp = acordoLenienciaUsingGETWithHttpInfo(chaveApiDados, id);
        return resp.getData();
    }

    /**
     * Consulta um registro de Acordo de Leniência pelo id
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @return ApiResponse&lt;AcordosLenienciaDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AcordosLenienciaDTO> acordoLenienciaUsingGETWithHttpInfo(String chaveApiDados, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = acordoLenienciaUsingGETValidateBeforeCall(chaveApiDados, id, null, null);
        Type localVarReturnType = new TypeToken<AcordosLenienciaDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta um registro de Acordo de Leniência pelo id (asynchronously)
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call acordoLenienciaUsingGETAsync(String chaveApiDados, Integer id, final ApiCallback<AcordosLenienciaDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = acordoLenienciaUsingGETValidateBeforeCall(chaveApiDados, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AcordosLenienciaDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for acordosLenienciaUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param cnpjSancionado CNPJ sancionado (optional)
     * @param dataFinalSancao Data final da sanção (DD/MM/AAAA) (optional)
     * @param dataInicialSancao Data inicial da sanção (DD/MM/AAAA) (optional)
     * @param nomeSancionado Nome, nome fantasia ou razão social do sancionado (optional)
     * @param situacao Situação do acordo (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call acordosLenienciaUsingGETCall(String chaveApiDados, Integer pagina, String cnpjSancionado, String dataFinalSancao, String dataInicialSancao, String nomeSancionado, String situacao, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/acordos-leniencia";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cnpjSancionado != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cnpjSancionado", cnpjSancionado));
        if (dataFinalSancao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dataFinalSancao", dataFinalSancao));
        if (dataInicialSancao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dataInicialSancao", dataInicialSancao));
        if (nomeSancionado != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nomeSancionado", nomeSancionado));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));
        if (situacao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("situacao", situacao));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call acordosLenienciaUsingGETValidateBeforeCall(String chaveApiDados, Integer pagina, String cnpjSancionado, String dataFinalSancao, String dataInicialSancao, String nomeSancionado, String situacao, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling acordosLenienciaUsingGET(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling acordosLenienciaUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = acordosLenienciaUsingGETCall(chaveApiDados, pagina, cnpjSancionado, dataFinalSancao, dataInicialSancao, nomeSancionado, situacao, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os registros de Acordos de Leniência por Nome ou CNPJ do Sancionado/Situação/Período
     * Filtros mínimos:  Página (padrão &#x3D; 1); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param cnpjSancionado CNPJ sancionado (optional)
     * @param dataFinalSancao Data final da sanção (DD/MM/AAAA) (optional)
     * @param dataInicialSancao Data inicial da sanção (DD/MM/AAAA) (optional)
     * @param nomeSancionado Nome, nome fantasia ou razão social do sancionado (optional)
     * @param situacao Situação do acordo (optional)
     * @return List&lt;AcordosLenienciaDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AcordosLenienciaDTO> acordosLenienciaUsingGET(String chaveApiDados, Integer pagina, String cnpjSancionado, String dataFinalSancao, String dataInicialSancao, String nomeSancionado, String situacao) throws ApiException {
        ApiResponse<List<AcordosLenienciaDTO>> resp = acordosLenienciaUsingGETWithHttpInfo(chaveApiDados, pagina, cnpjSancionado, dataFinalSancao, dataInicialSancao, nomeSancionado, situacao);
        return resp.getData();
    }

    /**
     * Consulta os registros de Acordos de Leniência por Nome ou CNPJ do Sancionado/Situação/Período
     * Filtros mínimos:  Página (padrão &#x3D; 1); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param cnpjSancionado CNPJ sancionado (optional)
     * @param dataFinalSancao Data final da sanção (DD/MM/AAAA) (optional)
     * @param dataInicialSancao Data inicial da sanção (DD/MM/AAAA) (optional)
     * @param nomeSancionado Nome, nome fantasia ou razão social do sancionado (optional)
     * @param situacao Situação do acordo (optional)
     * @return ApiResponse&lt;List&lt;AcordosLenienciaDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AcordosLenienciaDTO>> acordosLenienciaUsingGETWithHttpInfo(String chaveApiDados, Integer pagina, String cnpjSancionado, String dataFinalSancao, String dataInicialSancao, String nomeSancionado, String situacao) throws ApiException {
        com.squareup.okhttp.Call call = acordosLenienciaUsingGETValidateBeforeCall(chaveApiDados, pagina, cnpjSancionado, dataFinalSancao, dataInicialSancao, nomeSancionado, situacao, null, null);
        Type localVarReturnType = new TypeToken<List<AcordosLenienciaDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os registros de Acordos de Leniência por Nome ou CNPJ do Sancionado/Situação/Período (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param cnpjSancionado CNPJ sancionado (optional)
     * @param dataFinalSancao Data final da sanção (DD/MM/AAAA) (optional)
     * @param dataInicialSancao Data inicial da sanção (DD/MM/AAAA) (optional)
     * @param nomeSancionado Nome, nome fantasia ou razão social do sancionado (optional)
     * @param situacao Situação do acordo (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call acordosLenienciaUsingGETAsync(String chaveApiDados, Integer pagina, String cnpjSancionado, String dataFinalSancao, String dataInicialSancao, String nomeSancionado, String situacao, final ApiCallback<List<AcordosLenienciaDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = acordosLenienciaUsingGETValidateBeforeCall(chaveApiDados, pagina, cnpjSancionado, dataFinalSancao, dataInicialSancao, nomeSancionado, situacao, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AcordosLenienciaDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ceafUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ceafUsingGETCall(String chaveApiDados, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/ceaf/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ceafUsingGETValidateBeforeCall(String chaveApiDados, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling ceafUsingGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ceafUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = ceafUsingGETCall(chaveApiDados, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta um registro do CEAF pelo id
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @return CeafDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CeafDTO ceafUsingGET(String chaveApiDados, Integer id) throws ApiException {
        ApiResponse<CeafDTO> resp = ceafUsingGETWithHttpInfo(chaveApiDados, id);
        return resp.getData();
    }

    /**
     * Consulta um registro do CEAF pelo id
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @return ApiResponse&lt;CeafDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CeafDTO> ceafUsingGETWithHttpInfo(String chaveApiDados, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = ceafUsingGETValidateBeforeCall(chaveApiDados, id, null, null);
        Type localVarReturnType = new TypeToken<CeafDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta um registro do CEAF pelo id (asynchronously)
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ceafUsingGETAsync(String chaveApiDados, Integer id, final ApiCallback<CeafDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ceafUsingGETValidateBeforeCall(chaveApiDados, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CeafDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ceafUsingGET1
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param cpfSancionado CPF do sancionado (optional)
     * @param dataPublicacaoFim Data publicação fim (DD/MM/AAAA) (optional)
     * @param dataPublicacaoInicio Data publicação início (DD/MM/AAAA) (optional)
     * @param nomeSancionado Nome do sancionado (optional)
     * @param orgaoLotacao Órgão de lotação (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ceafUsingGET1Call(String chaveApiDados, Integer pagina, String cpfSancionado, String dataPublicacaoFim, String dataPublicacaoInicio, String nomeSancionado, String orgaoLotacao, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/ceaf";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cpfSancionado != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cpfSancionado", cpfSancionado));
        if (dataPublicacaoFim != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dataPublicacaoFim", dataPublicacaoFim));
        if (dataPublicacaoInicio != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dataPublicacaoInicio", dataPublicacaoInicio));
        if (nomeSancionado != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nomeSancionado", nomeSancionado));
        if (orgaoLotacao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgaoLotacao", orgaoLotacao));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ceafUsingGET1ValidateBeforeCall(String chaveApiDados, Integer pagina, String cpfSancionado, String dataPublicacaoFim, String dataPublicacaoInicio, String nomeSancionado, String orgaoLotacao, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling ceafUsingGET1(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling ceafUsingGET1(Async)");
        }
        

        com.squareup.okhttp.Call call = ceafUsingGET1Call(chaveApiDados, pagina, cpfSancionado, dataPublicacaoFim, dataPublicacaoInicio, nomeSancionado, orgaoLotacao, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os registros do CEAF por CPF/Órgão de Lotação/Período
     * Filtros mínimos:  Página (padrão &#x3D; 1); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param cpfSancionado CPF do sancionado (optional)
     * @param dataPublicacaoFim Data publicação fim (DD/MM/AAAA) (optional)
     * @param dataPublicacaoInicio Data publicação início (DD/MM/AAAA) (optional)
     * @param nomeSancionado Nome do sancionado (optional)
     * @param orgaoLotacao Órgão de lotação (optional)
     * @return List&lt;CeafDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CeafDTO> ceafUsingGET1(String chaveApiDados, Integer pagina, String cpfSancionado, String dataPublicacaoFim, String dataPublicacaoInicio, String nomeSancionado, String orgaoLotacao) throws ApiException {
        ApiResponse<List<CeafDTO>> resp = ceafUsingGET1WithHttpInfo(chaveApiDados, pagina, cpfSancionado, dataPublicacaoFim, dataPublicacaoInicio, nomeSancionado, orgaoLotacao);
        return resp.getData();
    }

    /**
     * Consulta os registros do CEAF por CPF/Órgão de Lotação/Período
     * Filtros mínimos:  Página (padrão &#x3D; 1); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param cpfSancionado CPF do sancionado (optional)
     * @param dataPublicacaoFim Data publicação fim (DD/MM/AAAA) (optional)
     * @param dataPublicacaoInicio Data publicação início (DD/MM/AAAA) (optional)
     * @param nomeSancionado Nome do sancionado (optional)
     * @param orgaoLotacao Órgão de lotação (optional)
     * @return ApiResponse&lt;List&lt;CeafDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CeafDTO>> ceafUsingGET1WithHttpInfo(String chaveApiDados, Integer pagina, String cpfSancionado, String dataPublicacaoFim, String dataPublicacaoInicio, String nomeSancionado, String orgaoLotacao) throws ApiException {
        com.squareup.okhttp.Call call = ceafUsingGET1ValidateBeforeCall(chaveApiDados, pagina, cpfSancionado, dataPublicacaoFim, dataPublicacaoInicio, nomeSancionado, orgaoLotacao, null, null);
        Type localVarReturnType = new TypeToken<List<CeafDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os registros do CEAF por CPF/Órgão de Lotação/Período (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param cpfSancionado CPF do sancionado (optional)
     * @param dataPublicacaoFim Data publicação fim (DD/MM/AAAA) (optional)
     * @param dataPublicacaoInicio Data publicação início (DD/MM/AAAA) (optional)
     * @param nomeSancionado Nome do sancionado (optional)
     * @param orgaoLotacao Órgão de lotação (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ceafUsingGET1Async(String chaveApiDados, Integer pagina, String cpfSancionado, String dataPublicacaoFim, String dataPublicacaoInicio, String nomeSancionado, String orgaoLotacao, final ApiCallback<List<CeafDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ceafUsingGET1ValidateBeforeCall(chaveApiDados, pagina, cpfSancionado, dataPublicacaoFim, dataPublicacaoInicio, nomeSancionado, orgaoLotacao, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CeafDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ceisUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ceisUsingGETCall(String chaveApiDados, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/ceis/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ceisUsingGETValidateBeforeCall(String chaveApiDados, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling ceisUsingGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ceisUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = ceisUsingGETCall(chaveApiDados, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta um registro do CEIS pelo id
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @return CeisDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CeisDTO ceisUsingGET(String chaveApiDados, Integer id) throws ApiException {
        ApiResponse<CeisDTO> resp = ceisUsingGETWithHttpInfo(chaveApiDados, id);
        return resp.getData();
    }

    /**
     * Consulta um registro do CEIS pelo id
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @return ApiResponse&lt;CeisDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CeisDTO> ceisUsingGETWithHttpInfo(String chaveApiDados, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = ceisUsingGETValidateBeforeCall(chaveApiDados, id, null, null);
        Type localVarReturnType = new TypeToken<CeisDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta um registro do CEIS pelo id (asynchronously)
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ceisUsingGETAsync(String chaveApiDados, Integer id, final ApiCallback<CeisDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ceisUsingGETValidateBeforeCall(chaveApiDados, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CeisDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ceisUsingGET1
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param codigoSancionado CNPJ ou CPF Sancionado (optional)
     * @param dataFinalSancao Data Final da Sanção (DD/MM/AAAA) (optional)
     * @param dataInicialSancao Data Inicial da Sanção (DD/MM/AAAA) (optional)
     * @param nomeSancionado Nome, nome fantasia ou razão social do Sancionado (optional)
     * @param orgaoSancionador Órgão Sancionador (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ceisUsingGET1Call(String chaveApiDados, Integer pagina, String codigoSancionado, String dataFinalSancao, String dataInicialSancao, String nomeSancionado, String orgaoSancionador, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/ceis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoSancionado != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoSancionado", codigoSancionado));
        if (dataFinalSancao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dataFinalSancao", dataFinalSancao));
        if (dataInicialSancao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dataInicialSancao", dataInicialSancao));
        if (nomeSancionado != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nomeSancionado", nomeSancionado));
        if (orgaoSancionador != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgaoSancionador", orgaoSancionador));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ceisUsingGET1ValidateBeforeCall(String chaveApiDados, Integer pagina, String codigoSancionado, String dataFinalSancao, String dataInicialSancao, String nomeSancionado, String orgaoSancionador, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling ceisUsingGET1(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling ceisUsingGET1(Async)");
        }
        

        com.squareup.okhttp.Call call = ceisUsingGET1Call(chaveApiDados, pagina, codigoSancionado, dataFinalSancao, dataInicialSancao, nomeSancionado, orgaoSancionador, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os registros do CEIS por CNPJ ou CPF Sancionado/Órgão Sancionador/Período
     * Filtros mínimos:  Página (padrão &#x3D; 1); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param codigoSancionado CNPJ ou CPF Sancionado (optional)
     * @param dataFinalSancao Data Final da Sanção (DD/MM/AAAA) (optional)
     * @param dataInicialSancao Data Inicial da Sanção (DD/MM/AAAA) (optional)
     * @param nomeSancionado Nome, nome fantasia ou razão social do Sancionado (optional)
     * @param orgaoSancionador Órgão Sancionador (optional)
     * @return List&lt;CeisDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CeisDTO> ceisUsingGET1(String chaveApiDados, Integer pagina, String codigoSancionado, String dataFinalSancao, String dataInicialSancao, String nomeSancionado, String orgaoSancionador) throws ApiException {
        ApiResponse<List<CeisDTO>> resp = ceisUsingGET1WithHttpInfo(chaveApiDados, pagina, codigoSancionado, dataFinalSancao, dataInicialSancao, nomeSancionado, orgaoSancionador);
        return resp.getData();
    }

    /**
     * Consulta os registros do CEIS por CNPJ ou CPF Sancionado/Órgão Sancionador/Período
     * Filtros mínimos:  Página (padrão &#x3D; 1); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param codigoSancionado CNPJ ou CPF Sancionado (optional)
     * @param dataFinalSancao Data Final da Sanção (DD/MM/AAAA) (optional)
     * @param dataInicialSancao Data Inicial da Sanção (DD/MM/AAAA) (optional)
     * @param nomeSancionado Nome, nome fantasia ou razão social do Sancionado (optional)
     * @param orgaoSancionador Órgão Sancionador (optional)
     * @return ApiResponse&lt;List&lt;CeisDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CeisDTO>> ceisUsingGET1WithHttpInfo(String chaveApiDados, Integer pagina, String codigoSancionado, String dataFinalSancao, String dataInicialSancao, String nomeSancionado, String orgaoSancionador) throws ApiException {
        com.squareup.okhttp.Call call = ceisUsingGET1ValidateBeforeCall(chaveApiDados, pagina, codigoSancionado, dataFinalSancao, dataInicialSancao, nomeSancionado, orgaoSancionador, null, null);
        Type localVarReturnType = new TypeToken<List<CeisDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os registros do CEIS por CNPJ ou CPF Sancionado/Órgão Sancionador/Período (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param codigoSancionado CNPJ ou CPF Sancionado (optional)
     * @param dataFinalSancao Data Final da Sanção (DD/MM/AAAA) (optional)
     * @param dataInicialSancao Data Inicial da Sanção (DD/MM/AAAA) (optional)
     * @param nomeSancionado Nome, nome fantasia ou razão social do Sancionado (optional)
     * @param orgaoSancionador Órgão Sancionador (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ceisUsingGET1Async(String chaveApiDados, Integer pagina, String codigoSancionado, String dataFinalSancao, String dataInicialSancao, String nomeSancionado, String orgaoSancionador, final ApiCallback<List<CeisDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ceisUsingGET1ValidateBeforeCall(chaveApiDados, pagina, codigoSancionado, dataFinalSancao, dataInicialSancao, nomeSancionado, orgaoSancionador, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CeisDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cepimUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cepimUsingGETCall(String chaveApiDados, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/cepim/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cepimUsingGETValidateBeforeCall(String chaveApiDados, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling cepimUsingGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling cepimUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = cepimUsingGETCall(chaveApiDados, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta um registro do CEPIM pelo id
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @return CepimDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CepimDTO cepimUsingGET(String chaveApiDados, Integer id) throws ApiException {
        ApiResponse<CepimDTO> resp = cepimUsingGETWithHttpInfo(chaveApiDados, id);
        return resp.getData();
    }

    /**
     * Consulta um registro do CEPIM pelo id
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @return ApiResponse&lt;CepimDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CepimDTO> cepimUsingGETWithHttpInfo(String chaveApiDados, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = cepimUsingGETValidateBeforeCall(chaveApiDados, id, null, null);
        Type localVarReturnType = new TypeToken<CepimDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta um registro do CEPIM pelo id (asynchronously)
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cepimUsingGETAsync(String chaveApiDados, Integer id, final ApiCallback<CepimDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cepimUsingGETValidateBeforeCall(chaveApiDados, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CepimDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cepimUsingGET1
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param cnpjSancionado CNPJ do Sancionado (optional)
     * @param nomeSancionado Nome, nome fantasia ou razão social do Sancionado (optional)
     * @param orgaoEntidade Órgão/Entidade (optional)
     * @param ufSancionado UF do Sancionado (sigla) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cepimUsingGET1Call(String chaveApiDados, Integer pagina, String cnpjSancionado, String nomeSancionado, String orgaoEntidade, String ufSancionado, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/cepim";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cnpjSancionado != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cnpjSancionado", cnpjSancionado));
        if (nomeSancionado != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nomeSancionado", nomeSancionado));
        if (orgaoEntidade != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgaoEntidade", orgaoEntidade));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));
        if (ufSancionado != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ufSancionado", ufSancionado));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cepimUsingGET1ValidateBeforeCall(String chaveApiDados, Integer pagina, String cnpjSancionado, String nomeSancionado, String orgaoEntidade, String ufSancionado, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling cepimUsingGET1(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling cepimUsingGET1(Async)");
        }
        

        com.squareup.okhttp.Call call = cepimUsingGET1Call(chaveApiDados, pagina, cnpjSancionado, nomeSancionado, orgaoEntidade, ufSancionado, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os registros do CEPIM por CNPJ ou CPF Sancionado/Órgão superior
     * Filtros mínimos:  Página (padrão &#x3D; 1); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param cnpjSancionado CNPJ do Sancionado (optional)
     * @param nomeSancionado Nome, nome fantasia ou razão social do Sancionado (optional)
     * @param orgaoEntidade Órgão/Entidade (optional)
     * @param ufSancionado UF do Sancionado (sigla) (optional)
     * @return List&lt;CepimDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CepimDTO> cepimUsingGET1(String chaveApiDados, Integer pagina, String cnpjSancionado, String nomeSancionado, String orgaoEntidade, String ufSancionado) throws ApiException {
        ApiResponse<List<CepimDTO>> resp = cepimUsingGET1WithHttpInfo(chaveApiDados, pagina, cnpjSancionado, nomeSancionado, orgaoEntidade, ufSancionado);
        return resp.getData();
    }

    /**
     * Consulta os registros do CEPIM por CNPJ ou CPF Sancionado/Órgão superior
     * Filtros mínimos:  Página (padrão &#x3D; 1); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param cnpjSancionado CNPJ do Sancionado (optional)
     * @param nomeSancionado Nome, nome fantasia ou razão social do Sancionado (optional)
     * @param orgaoEntidade Órgão/Entidade (optional)
     * @param ufSancionado UF do Sancionado (sigla) (optional)
     * @return ApiResponse&lt;List&lt;CepimDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CepimDTO>> cepimUsingGET1WithHttpInfo(String chaveApiDados, Integer pagina, String cnpjSancionado, String nomeSancionado, String orgaoEntidade, String ufSancionado) throws ApiException {
        com.squareup.okhttp.Call call = cepimUsingGET1ValidateBeforeCall(chaveApiDados, pagina, cnpjSancionado, nomeSancionado, orgaoEntidade, ufSancionado, null, null);
        Type localVarReturnType = new TypeToken<List<CepimDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os registros do CEPIM por CNPJ ou CPF Sancionado/Órgão superior (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param cnpjSancionado CNPJ do Sancionado (optional)
     * @param nomeSancionado Nome, nome fantasia ou razão social do Sancionado (optional)
     * @param orgaoEntidade Órgão/Entidade (optional)
     * @param ufSancionado UF do Sancionado (sigla) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cepimUsingGET1Async(String chaveApiDados, Integer pagina, String cnpjSancionado, String nomeSancionado, String orgaoEntidade, String ufSancionado, final ApiCallback<List<CepimDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cepimUsingGET1ValidateBeforeCall(chaveApiDados, pagina, cnpjSancionado, nomeSancionado, orgaoEntidade, ufSancionado, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CepimDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cnepUsingGET
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cnepUsingGETCall(String chaveApiDados, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/cnep/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cnepUsingGETValidateBeforeCall(String chaveApiDados, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling cnepUsingGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling cnepUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = cnepUsingGETCall(chaveApiDados, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta um registro do CNEP pelo id
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @return CnepDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CnepDTO cnepUsingGET(String chaveApiDados, Integer id) throws ApiException {
        ApiResponse<CnepDTO> resp = cnepUsingGETWithHttpInfo(chaveApiDados, id);
        return resp.getData();
    }

    /**
     * Consulta um registro do CNEP pelo id
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @return ApiResponse&lt;CnepDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CnepDTO> cnepUsingGETWithHttpInfo(String chaveApiDados, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = cnepUsingGETValidateBeforeCall(chaveApiDados, id, null, null);
        Type localVarReturnType = new TypeToken<CnepDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta um registro do CNEP pelo id (asynchronously)
     * Filtros mínimos: ID do registro
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param id ID do registro (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cnepUsingGETAsync(String chaveApiDados, Integer id, final ApiCallback<CnepDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cnepUsingGETValidateBeforeCall(chaveApiDados, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CnepDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cnepUsingGET1
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param codigoSancionado CNPJ ou CPF do Sancionado (optional)
     * @param dataFinalSancao Data Final da Sanção (DD/MM/AAAA) (optional)
     * @param dataInicialSancao Data Inicial da Sanção (DD/MM/AAAA) (optional)
     * @param nomeSancionado Nome, nome fantasia ou razão social do Sancionado (optional)
     * @param orgaoSancionador Órgão Sancionador (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cnepUsingGET1Call(String chaveApiDados, Integer pagina, String codigoSancionado, String dataFinalSancao, String dataInicialSancao, String nomeSancionado, String orgaoSancionador, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-de-dados/cnep";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (codigoSancionado != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("codigoSancionado", codigoSancionado));
        if (dataFinalSancao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dataFinalSancao", dataFinalSancao));
        if (dataInicialSancao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dataInicialSancao", dataInicialSancao));
        if (nomeSancionado != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nomeSancionado", nomeSancionado));
        if (orgaoSancionador != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orgaoSancionador", orgaoSancionador));
        if (pagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagina", pagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (chaveApiDados != null)
        localVarHeaderParams.put("chave-api-dados", apiClient.parameterToString(chaveApiDados));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cnepUsingGET1ValidateBeforeCall(String chaveApiDados, Integer pagina, String codigoSancionado, String dataFinalSancao, String dataInicialSancao, String nomeSancionado, String orgaoSancionador, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chaveApiDados' is set
        if (chaveApiDados == null) {
            throw new ApiException("Missing the required parameter 'chaveApiDados' when calling cnepUsingGET1(Async)");
        }
        
        // verify the required parameter 'pagina' is set
        if (pagina == null) {
            throw new ApiException("Missing the required parameter 'pagina' when calling cnepUsingGET1(Async)");
        }
        

        com.squareup.okhttp.Call call = cnepUsingGET1Call(chaveApiDados, pagina, codigoSancionado, dataFinalSancao, dataInicialSancao, nomeSancionado, orgaoSancionador, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consulta os registros do CNEP por CNPJ ou CPF Sancionado/Órgão Sancionador/Período
     * Filtros mínimos:  Página (padrão &#x3D; 1); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param codigoSancionado CNPJ ou CPF do Sancionado (optional)
     * @param dataFinalSancao Data Final da Sanção (DD/MM/AAAA) (optional)
     * @param dataInicialSancao Data Inicial da Sanção (DD/MM/AAAA) (optional)
     * @param nomeSancionado Nome, nome fantasia ou razão social do Sancionado (optional)
     * @param orgaoSancionador Órgão Sancionador (optional)
     * @return List&lt;CnepDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CnepDTO> cnepUsingGET1(String chaveApiDados, Integer pagina, String codigoSancionado, String dataFinalSancao, String dataInicialSancao, String nomeSancionado, String orgaoSancionador) throws ApiException {
        ApiResponse<List<CnepDTO>> resp = cnepUsingGET1WithHttpInfo(chaveApiDados, pagina, codigoSancionado, dataFinalSancao, dataInicialSancao, nomeSancionado, orgaoSancionador);
        return resp.getData();
    }

    /**
     * Consulta os registros do CNEP por CNPJ ou CPF Sancionado/Órgão Sancionador/Período
     * Filtros mínimos:  Página (padrão &#x3D; 1); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param codigoSancionado CNPJ ou CPF do Sancionado (optional)
     * @param dataFinalSancao Data Final da Sanção (DD/MM/AAAA) (optional)
     * @param dataInicialSancao Data Inicial da Sanção (DD/MM/AAAA) (optional)
     * @param nomeSancionado Nome, nome fantasia ou razão social do Sancionado (optional)
     * @param orgaoSancionador Órgão Sancionador (optional)
     * @return ApiResponse&lt;List&lt;CnepDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CnepDTO>> cnepUsingGET1WithHttpInfo(String chaveApiDados, Integer pagina, String codigoSancionado, String dataFinalSancao, String dataInicialSancao, String nomeSancionado, String orgaoSancionador) throws ApiException {
        com.squareup.okhttp.Call call = cnepUsingGET1ValidateBeforeCall(chaveApiDados, pagina, codigoSancionado, dataFinalSancao, dataInicialSancao, nomeSancionado, orgaoSancionador, null, null);
        Type localVarReturnType = new TypeToken<List<CnepDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consulta os registros do CNEP por CNPJ ou CPF Sancionado/Órgão Sancionador/Período (asynchronously)
     * Filtros mínimos:  Página (padrão &#x3D; 1); 
     * @param chaveApiDados Chave para acessar à API. Para obter a chave acesse http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email (required)
     * @param pagina Página consultada (required)
     * @param codigoSancionado CNPJ ou CPF do Sancionado (optional)
     * @param dataFinalSancao Data Final da Sanção (DD/MM/AAAA) (optional)
     * @param dataInicialSancao Data Inicial da Sanção (DD/MM/AAAA) (optional)
     * @param nomeSancionado Nome, nome fantasia ou razão social do Sancionado (optional)
     * @param orgaoSancionador Órgão Sancionador (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cnepUsingGET1Async(String chaveApiDados, Integer pagina, String codigoSancionado, String dataFinalSancao, String dataInicialSancao, String nomeSancionado, String orgaoSancionador, final ApiCallback<List<CnepDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cnepUsingGET1ValidateBeforeCall(chaveApiDados, pagina, codigoSancionado, dataFinalSancao, dataInicialSancao, nomeSancionado, orgaoSancionador, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CnepDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
